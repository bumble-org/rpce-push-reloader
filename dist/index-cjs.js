'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fb = _interopDefault(require('@firebase/app'));
require('@firebase/auth');
require('@firebase/functions');

const messagingSenderId = '444790084672';

const config = {
  apiKey: 'AIzaSyAS9LYKPeLGOjeSYfgRyYrUYqwfPGbJS4A',
  authDomain: 'rpce-reloader.firebaseapp.com',
  databaseURL: 'https://rpce-reloader.firebaseio.com',
  projectId: 'rpce-reloader',
  storageBucket: '',
  messagingSenderId,
  appId: '1:444790084672:web:01c370a8f180e498',
};

// Firebase manual chunk

// Initialize full web app on import
const firebase = fb.initializeApp(config, 'reloader');

const login = async (cb) => {
  const { user } = await firebase.auth().signInAnonymously();

  const unsubscribe = firebase
    .auth()
    .onAuthStateChanged((user) => {
      const shouldRestart = !user;

      if (shouldRestart) {
        unsubscribe();
      }

      cb(shouldRestart);
    });

  return user.uid
};

const update = firebase
  .functions()
  .httpsCallable('updateUserTime');

const reload = firebase
  .functions()
  .httpsCallable('reloadClient');

var bgClientCode = "(function () {\n    'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n     */\r\n    function deepCopy(value) {\r\n        return deepExtend(undefined, value);\r\n    }\r\n    /**\r\n     * Copy properties from source to target (recursively allows extension\r\n     * of Objects and Arrays).  Scalar values in the target are over-written.\r\n     * If target is undefined, an object of the appropriate type will be created\r\n     * (and returned).\r\n     *\r\n     * We recursively copy all child properties of plain Objects in the source- so\r\n     * that namespace- like dictionaries are merged.\r\n     *\r\n     * Note that the target can be a function, in which case the properties in\r\n     * the source Object are copied onto it as static properties of the Function.\r\n     */\r\n    function deepExtend(target, source) {\r\n        if (!(source instanceof Object)) {\r\n            return source;\r\n        }\r\n        switch (source.constructor) {\r\n            case Date:\r\n                // Treat Dates like scalars; if the target date object had any child\r\n                // properties - they will be lost!\r\n                var dateValue = source;\r\n                return new Date(dateValue.getTime());\r\n            case Object:\r\n                if (target === undefined) {\r\n                    target = {};\r\n                }\r\n                break;\r\n            case Array:\r\n                // Always copy the array source and overwrite the target.\r\n                target = [];\r\n                break;\r\n            default:\r\n                // Not a plain Object - treat it as a scalar.\r\n                return source;\r\n        }\r\n        for (var prop in source) {\r\n            if (!source.hasOwnProperty(prop)) {\r\n                continue;\r\n            }\r\n            target[prop] = deepExtend(target[prop], source[prop]);\r\n        }\r\n        return target;\r\n    }\n    /**\r\n     * Detect Node.js.\r\n     *\r\n     * @return true if Node.js environment is detected.\r\n     */\r\n    // Node detection logic from: https://github.com/iliakan/detect-node/\r\n    function isNode() {\r\n        try {\r\n            return (Object.prototype.toString.call(global.process) === '[object process]');\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Detect Browser Environment\r\n     */\r\n    function isBrowser() {\r\n        return typeof self === 'object' && self.self === self;\r\n    }\r\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var ERROR_NAME = 'FirebaseError';\r\n    // Based on code from:\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\n    var FirebaseError = /** @class */ (function (_super) {\r\n        __extends(FirebaseError, _super);\r\n        function FirebaseError(code, message) {\r\n            var _this = _super.call(this, message) || this;\r\n            _this.code = code;\r\n            _this.name = ERROR_NAME;\r\n            // Fix For ES5\r\n            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n            Object.setPrototypeOf(_this, FirebaseError.prototype);\r\n            // Maintains proper stack trace for where our error was thrown.\r\n            // Only available on V8.\r\n            if (Error.captureStackTrace) {\r\n                Error.captureStackTrace(_this, ErrorFactory.prototype.create);\r\n            }\r\n            return _this;\r\n        }\r\n        return FirebaseError;\r\n    }(Error));\r\n    var ErrorFactory = /** @class */ (function () {\r\n        function ErrorFactory(service, serviceName, errors) {\r\n            this.service = service;\r\n            this.serviceName = serviceName;\r\n            this.errors = errors;\r\n        }\r\n        ErrorFactory.prototype.create = function (code) {\r\n            var data = [];\r\n            for (var _i = 1; _i < arguments.length; _i++) {\r\n                data[_i - 1] = arguments[_i];\r\n            }\r\n            var customData = data[0] || {};\r\n            var fullCode = this.service + \"/\" + code;\r\n            var template = this.errors[code];\r\n            var message = template ? replaceTemplate(template, customData) : 'Error';\r\n            // Service Name: Error message (service/code).\r\n            var fullMessage = this.serviceName + \": \" + message + \" (\" + fullCode + \").\";\r\n            var error = new FirebaseError(fullCode, fullMessage);\r\n            // Keys with an underscore at the end of their name are not included in\r\n            // error.data for some reason.\r\n            // TODO: Replace with Object.entries when lib is updated to es2017.\r\n            for (var _a = 0, _b = Object.keys(customData); _a < _b.length; _a++) {\r\n                var key = _b[_a];\r\n                if (key.slice(-1) !== '_') {\r\n                    if (key in error) {\r\n                        console.warn(\"Overwriting FirebaseError base field \\\"\" + key + \"\\\" can cause unexpected behavior.\");\r\n                    }\r\n                    error[key] = customData[key];\r\n                }\r\n            }\r\n            return error;\r\n        };\r\n        return ErrorFactory;\r\n    }());\r\n    function replaceTemplate(template, data) {\r\n        return template.replace(PATTERN, function (_, key) {\r\n            var value = data[key];\r\n            return value != null ? value.toString() : \"<\" + key + \"?>\";\r\n        });\r\n    }\r\n    var PATTERN = /\\{\\$([^}]+)}/g;\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function contains(obj, key) {\r\n        return Object.prototype.hasOwnProperty.call(obj, key);\r\n    }\r\n\n    /**\r\n     * Helper to make a Subscribe function (just like Promise helps make a\r\n     * Thenable).\r\n     *\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    function createSubscribe(executor, onNoObservers) {\r\n        var proxy = new ObserverProxy(executor, onNoObservers);\r\n        return proxy.subscribe.bind(proxy);\r\n    }\r\n    /**\r\n     * Implement fan-out for any number of Observers attached via a subscribe\r\n     * function.\r\n     */\r\n    var ObserverProxy = /** @class */ (function () {\r\n        /**\r\n         * @param executor Function which can make calls to a single Observer\r\n         *     as a proxy.\r\n         * @param onNoObservers Callback when count of Observers goes to zero.\r\n         */\r\n        function ObserverProxy(executor, onNoObservers) {\r\n            var _this = this;\r\n            this.observers = [];\r\n            this.unsubscribes = [];\r\n            this.observerCount = 0;\r\n            // Micro-task scheduling by calling task.then().\r\n            this.task = Promise.resolve();\r\n            this.finalized = false;\r\n            this.onNoObservers = onNoObservers;\r\n            // Call the executor asynchronously so subscribers that are called\r\n            // synchronously after the creation of the subscribe function\r\n            // can still receive the very first value generated in the executor.\r\n            this.task\r\n                .then(function () {\r\n                executor(_this);\r\n            })\r\n                .catch(function (e) {\r\n                _this.error(e);\r\n            });\r\n        }\r\n        ObserverProxy.prototype.next = function (value) {\r\n            this.forEachObserver(function (observer) {\r\n                observer.next(value);\r\n            });\r\n        };\r\n        ObserverProxy.prototype.error = function (error) {\r\n            this.forEachObserver(function (observer) {\r\n                observer.error(error);\r\n            });\r\n            this.close(error);\r\n        };\r\n        ObserverProxy.prototype.complete = function () {\r\n            this.forEachObserver(function (observer) {\r\n                observer.complete();\r\n            });\r\n            this.close();\r\n        };\r\n        /**\r\n         * Subscribe function that can be used to add an Observer to the fan-out list.\r\n         *\r\n         * - We require that no event is sent to a subscriber sychronously to their\r\n         *   call to subscribe().\r\n         */\r\n        ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {\r\n            var _this = this;\r\n            var observer;\r\n            if (nextOrObserver === undefined &&\r\n                error === undefined &&\r\n                complete === undefined) {\r\n                throw new Error('Missing Observer.');\r\n            }\r\n            // Assemble an Observer object when passed as callback functions.\r\n            if (implementsAnyMethods(nextOrObserver, [\r\n                'next',\r\n                'error',\r\n                'complete'\r\n            ])) {\r\n                observer = nextOrObserver;\r\n            }\r\n            else {\r\n                observer = {\r\n                    next: nextOrObserver,\r\n                    error: error,\r\n                    complete: complete\r\n                };\r\n            }\r\n            if (observer.next === undefined) {\r\n                observer.next = noop;\r\n            }\r\n            if (observer.error === undefined) {\r\n                observer.error = noop;\r\n            }\r\n            if (observer.complete === undefined) {\r\n                observer.complete = noop;\r\n            }\r\n            var unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n            // Attempt to subscribe to a terminated Observable - we\r\n            // just respond to the Observer with the final error or complete\r\n            // event.\r\n            if (this.finalized) {\r\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                this.task.then(function () {\r\n                    try {\r\n                        if (_this.finalError) {\r\n                            observer.error(_this.finalError);\r\n                        }\r\n                        else {\r\n                            observer.complete();\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        // nothing\r\n                    }\r\n                    return;\r\n                });\r\n            }\r\n            this.observers.push(observer);\r\n            return unsub;\r\n        };\r\n        // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n        // any unsubscribed Observer.\r\n        ObserverProxy.prototype.unsubscribeOne = function (i) {\r\n            if (this.observers === undefined || this.observers[i] === undefined) {\r\n                return;\r\n            }\r\n            delete this.observers[i];\r\n            this.observerCount -= 1;\r\n            if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n                this.onNoObservers(this);\r\n            }\r\n        };\r\n        ObserverProxy.prototype.forEachObserver = function (fn) {\r\n            if (this.finalized) {\r\n                // Already closed by previous event....just eat the additional values.\r\n                return;\r\n            }\r\n            // Since sendOne calls asynchronously - there is no chance that\r\n            // this.observers will become undefined.\r\n            for (var i = 0; i < this.observers.length; i++) {\r\n                this.sendOne(i, fn);\r\n            }\r\n        };\r\n        // Call the Observer via one of it's callback function. We are careful to\r\n        // confirm that the observe has not been unsubscribed since this asynchronous\r\n        // function had been queued.\r\n        ObserverProxy.prototype.sendOne = function (i, fn) {\r\n            var _this = this;\r\n            // Execute the callback asynchronously\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(function () {\r\n                if (_this.observers !== undefined && _this.observers[i] !== undefined) {\r\n                    try {\r\n                        fn(_this.observers[i]);\r\n                    }\r\n                    catch (e) {\r\n                        // Ignore exceptions raised in Observers or missing methods of an\r\n                        // Observer.\r\n                        // Log error to console. b/31404806\r\n                        if (typeof console !== 'undefined' && console.error) {\r\n                            console.error(e);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        ObserverProxy.prototype.close = function (err) {\r\n            var _this = this;\r\n            if (this.finalized) {\r\n                return;\r\n            }\r\n            this.finalized = true;\r\n            if (err !== undefined) {\r\n                this.finalError = err;\r\n            }\r\n            // Proxy is no longer needed - garbage collect references\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(function () {\r\n                _this.observers = undefined;\r\n                _this.onNoObservers = undefined;\r\n            });\r\n        };\r\n        return ObserverProxy;\r\n    }());\r\n    /**\r\n     * Return true if the object passed in implements any of the named methods.\r\n     */\r\n    function implementsAnyMethods(obj, methods) {\r\n        if (typeof obj !== 'object' || obj === null) {\r\n            return false;\r\n        }\r\n        for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\r\n            var method = methods_1[_i];\r\n            if (method in obj && typeof obj[method] === 'function') {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function noop() {\r\n        // do nothing\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * The JS SDK supports 5 log levels and also allows a user the ability to\r\n     * silence the logs altogether.\r\n     *\r\n     * The order is a follows:\r\n     * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n     *\r\n     * All of the log types above the current log level will be captured (i.e. if\r\n     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n     * `VERBOSE` logs will not)\r\n     */\r\n    var LogLevel;\r\n    (function (LogLevel) {\r\n        LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n        LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n        LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n        LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n        LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n        LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n    })(LogLevel || (LogLevel = {}));\r\n    /**\r\n     * The default log level\r\n     */\r\n    var defaultLogLevel = LogLevel.INFO;\r\n    /**\r\n     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n     * messages on to their corresponding console counterparts (if the log method\r\n     * is supported by the current log level)\r\n     */\r\n    var defaultLogHandler = function (instance, logType) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        if (logType < instance.logLevel) {\r\n            return;\r\n        }\r\n        var now = new Date().toISOString();\r\n        switch (logType) {\r\n            /**\r\n             * By default, `console.debug` is not displayed in the developer console (in\r\n             * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n             * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n             * logs to the `console.log` function.\r\n             */\r\n            case LogLevel.DEBUG:\r\n                console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n                break;\r\n            case LogLevel.VERBOSE:\r\n                console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n                break;\r\n            case LogLevel.INFO:\r\n                console.info.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n                break;\r\n            case LogLevel.WARN:\r\n                console.warn.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n                break;\r\n            case LogLevel.ERROR:\r\n                console.error.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n                break;\r\n            default:\r\n                throw new Error(\"Attempted to log a message with an invalid logType (value: \" + logType + \")\");\r\n        }\r\n    };\r\n    var Logger = /** @class */ (function () {\r\n        /**\r\n         * Gives you an instance of a Logger to capture messages according to\r\n         * Firebase's logging scheme.\r\n         *\r\n         * @param name The name that the logs will be associated with\r\n         */\r\n        function Logger(name) {\r\n            this.name = name;\r\n            /**\r\n             * The log level of the given Logger instance.\r\n             */\r\n            this._logLevel = defaultLogLevel;\r\n            /**\r\n             * The log handler for the Logger instance.\r\n             */\r\n            this._logHandler = defaultLogHandler;\r\n        }\r\n        Object.defineProperty(Logger.prototype, \"logLevel\", {\r\n            get: function () {\r\n                return this._logLevel;\r\n            },\r\n            set: function (val) {\r\n                if (!(val in LogLevel)) {\r\n                    throw new TypeError('Invalid value assigned to `logLevel`');\r\n                }\r\n                this._logLevel = val;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Logger.prototype, \"logHandler\", {\r\n            get: function () {\r\n                return this._logHandler;\r\n            },\r\n            set: function (val) {\r\n                if (typeof val !== 'function') {\r\n                    throw new TypeError('Value assigned to `logHandler` must be a function');\r\n                }\r\n                this._logHandler = val;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * The functions below are all based on the `console` interface\r\n         */\r\n        Logger.prototype.debug = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\r\n        };\r\n        Logger.prototype.log = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\r\n        };\r\n        Logger.prototype.info = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));\r\n        };\r\n        Logger.prototype.warn = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));\r\n        };\r\n        Logger.prototype.error = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));\r\n        };\r\n        return Logger;\r\n    }());\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var _a;\r\n    var ERRORS = (_a = {},\r\n        _a[\"no-app\" /* NO_APP */] = \"No Firebase App '{$appName}' has been created - \" +\r\n            'call Firebase App.initializeApp()',\r\n        _a[\"bad-app-name\" /* BAD_APP_NAME */] = \"Illegal App name: '{$appName}\",\r\n        _a[\"duplicate-app\" /* DUPLICATE_APP */] = \"Firebase App named '{$appName}' already exists\",\r\n        _a[\"app-deleted\" /* APP_DELETED */] = \"Firebase App named '{$appName}' already deleted\",\r\n        _a[\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */] = 'firebase.{$appName}() takes either no argument or a ' +\r\n            'Firebase App instance.',\r\n        _a);\r\n    var ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * Global context object for a collection of services using\r\n     * a shared authentication state.\r\n     */\r\n    var FirebaseAppImpl = /** @class */ (function () {\r\n        function FirebaseAppImpl(options, config, firebase_) {\r\n            var _this = this;\r\n            this.firebase_ = firebase_;\r\n            this.isDeleted_ = false;\r\n            this.services_ = {};\r\n            // An array to capture listeners before the true auth functions\r\n            // exist\r\n            this.tokenListeners_ = [];\r\n            // An array to capture requests to send events before analytics component loads.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any, use any here to make using function.apply easier\r\n            this.analyticsEventRequests_ = [];\r\n            this.name_ = config.name;\r\n            this.automaticDataCollectionEnabled_ =\r\n                config.automaticDataCollectionEnabled || false;\r\n            this.options_ = deepCopy(options);\r\n            var self = this;\r\n            this.INTERNAL = {\r\n                getUid: function () { return null; },\r\n                getToken: function () { return Promise.resolve(null); },\r\n                addAuthTokenListener: function (callback) {\r\n                    _this.tokenListeners_.push(callback);\r\n                    // Make sure callback is called, asynchronously, in the absence of the auth module\r\n                    setTimeout(function () { return callback(null); }, 0);\r\n                },\r\n                removeAuthTokenListener: function (callback) {\r\n                    _this.tokenListeners_ = _this.tokenListeners_.filter(function (listener) { return listener !== callback; });\r\n                },\r\n                analytics: {\r\n                    logEvent: function () {\r\n                        self.analyticsEventRequests_.push(arguments);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        Object.defineProperty(FirebaseAppImpl.prototype, \"automaticDataCollectionEnabled\", {\r\n            get: function () {\r\n                this.checkDestroyed_();\r\n                return this.automaticDataCollectionEnabled_;\r\n            },\r\n            set: function (val) {\r\n                this.checkDestroyed_();\r\n                this.automaticDataCollectionEnabled_ = val;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(FirebaseAppImpl.prototype, \"name\", {\r\n            get: function () {\r\n                this.checkDestroyed_();\r\n                return this.name_;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(FirebaseAppImpl.prototype, \"options\", {\r\n            get: function () {\r\n                this.checkDestroyed_();\r\n                return this.options_;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        FirebaseAppImpl.prototype.delete = function () {\r\n            var _this = this;\r\n            return new Promise(function (resolve) {\r\n                _this.checkDestroyed_();\r\n                resolve();\r\n            })\r\n                .then(function () {\r\n                _this.firebase_.INTERNAL.removeApp(_this.name_);\r\n                var services = [];\r\n                for (var _i = 0, _a = Object.keys(_this.services_); _i < _a.length; _i++) {\r\n                    var serviceKey = _a[_i];\r\n                    for (var _b = 0, _c = Object.keys(_this.services_[serviceKey]); _b < _c.length; _b++) {\r\n                        var instanceKey = _c[_b];\r\n                        services.push(_this.services_[serviceKey][instanceKey]);\r\n                    }\r\n                }\r\n                return Promise.all(services\r\n                    .filter(function (service) { return 'INTERNAL' in service; })\r\n                    .map(function (service) { return service.INTERNAL.delete(); }));\r\n            })\r\n                .then(function () {\r\n                _this.isDeleted_ = true;\r\n                _this.services_ = {};\r\n            });\r\n        };\r\n        /**\r\n         * Return a service instance associated with this app (creating it\r\n         * on demand), identified by the passed instanceIdentifier.\r\n         *\r\n         * NOTE: Currently storage and functions are the only ones that are leveraging this\r\n         * functionality. They invoke it by calling:\r\n         *\r\n         * ```javascript\r\n         * firebase.app().storage('STORAGE BUCKET ID')\r\n         * ```\r\n         *\r\n         * The service name is passed to this already\r\n         * @internal\r\n         */\r\n        FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {\r\n            if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }\r\n            this.checkDestroyed_();\r\n            if (!this.services_[name]) {\r\n                this.services_[name] = {};\r\n            }\r\n            if (!this.services_[name][instanceIdentifier]) {\r\n                /**\r\n                 * If a custom instance has been defined (i.e. not '[DEFAULT]')\r\n                 * then we will pass that instance on, otherwise we pass `null`\r\n                 */\r\n                var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME\r\n                    ? instanceIdentifier\r\n                    : undefined;\r\n                var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);\r\n                this.services_[name][instanceIdentifier] = service;\r\n            }\r\n            return this.services_[name][instanceIdentifier];\r\n        };\r\n        /**\r\n         * Remove a service instance from the cache, so we will create a new instance for this service\r\n         * when people try to get this service again.\r\n         *\r\n         * NOTE: currently only firestore is using this functionality to support firestore shutdown.\r\n         *\r\n         * @param name The service name\r\n         * @param instanceIdentifier instance identifier in case multiple instances are allowed\r\n         * @internal\r\n         */\r\n        FirebaseAppImpl.prototype._removeServiceInstance = function (name, instanceIdentifier) {\r\n            if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }\r\n            if (this.services_[name] && this.services_[name][instanceIdentifier]) {\r\n                delete this.services_[name][instanceIdentifier];\r\n            }\r\n        };\r\n        /**\r\n         * Callback function used to extend an App instance at the time\r\n         * of service instance creation.\r\n         */\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        FirebaseAppImpl.prototype.extendApp = function (props) {\r\n            // Copy the object onto the FirebaseAppImpl prototype\r\n            deepExtend(this, props);\r\n            if (props.INTERNAL) {\r\n                /**\r\n                 * If the app has overwritten the addAuthTokenListener stub, forward\r\n                 * the active token listeners on to the true fxn.\r\n                 *\r\n                 * TODO: This function is required due to our current module\r\n                 * structure. Once we are able to rely strictly upon a single module\r\n                 * implementation, this code should be refactored and Auth should\r\n                 * provide these stubs and the upgrade logic\r\n                 */\r\n                if (props.INTERNAL.addAuthTokenListener) {\r\n                    for (var _i = 0, _a = this.tokenListeners_; _i < _a.length; _i++) {\r\n                        var listener = _a[_i];\r\n                        this.INTERNAL.addAuthTokenListener(listener);\r\n                    }\r\n                    this.tokenListeners_ = [];\r\n                }\r\n                if (props.INTERNAL.analytics) {\r\n                    for (var _b = 0, _c = this.analyticsEventRequests_; _b < _c.length; _b++) {\r\n                        var request = _c[_b];\r\n                        // logEvent is the actual implementation at this point.\r\n                        // We forward the queued events to it.\r\n                        this.INTERNAL.analytics.logEvent.apply(undefined, request);\r\n                    }\r\n                    this.analyticsEventRequests_ = [];\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * This function will throw an Error if the App has already been deleted -\r\n         * use before performing API actions on the App.\r\n         */\r\n        FirebaseAppImpl.prototype.checkDestroyed_ = function () {\r\n            if (this.isDeleted_) {\r\n                throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this.name_ });\r\n            }\r\n        };\r\n        return FirebaseAppImpl;\r\n    }());\r\n    // Prevent dead-code elimination of these methods w/o invalid property\r\n    // copying.\r\n    (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||\r\n        FirebaseAppImpl.prototype.delete ||\r\n        console.log('dc');\n\n    var version = \"7.0.0\";\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var logger = new Logger('@firebase/app');\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * Because auth can't share code with other components, we attach the utility functions\r\n     * in an internal namespace to share code.\r\n     * This function return a firebase namespace object without\r\n     * any utility functions, so it can be shared between the regular firebaseNamespace and\r\n     * the lite version.\r\n     */\r\n    function createFirebaseNamespaceCore(firebaseAppImpl) {\r\n        var apps = {};\r\n        var factories = {};\r\n        var appHooks = {};\r\n        // A namespace is a plain JavaScript Object.\r\n        var namespace = {\r\n            // Hack to prevent Babel from modifying the object returned\r\n            // as the firebase namespace.\r\n            // @ts-ignore\r\n            __esModule: true,\r\n            initializeApp: initializeApp,\r\n            // @ts-ignore\r\n            app: app,\r\n            // @ts-ignore\r\n            apps: null,\r\n            SDK_VERSION: version,\r\n            INTERNAL: {\r\n                registerService: registerService,\r\n                removeApp: removeApp,\r\n                factories: factories,\r\n                useAsService: useAsService\r\n            }\r\n        };\r\n        // Inject a circular default export to allow Babel users who were previously\r\n        // using:\r\n        //\r\n        //   import firebase from 'firebase';\r\n        //   which becomes: var firebase = require('firebase').default;\r\n        //\r\n        // instead of\r\n        //\r\n        //   import * as firebase from 'firebase';\r\n        //   which becomes: var firebase = require('firebase');\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        namespace['default'] = namespace;\r\n        // firebase.apps is a read-only getter.\r\n        Object.defineProperty(namespace, 'apps', {\r\n            get: getApps\r\n        });\r\n        /**\r\n         * Called by App.delete() - but before any services associated with the App\r\n         * are deleted.\r\n         */\r\n        function removeApp(name) {\r\n            var app = apps[name];\r\n            callAppHooks(app, 'delete');\r\n            delete apps[name];\r\n        }\r\n        /**\r\n         * Get the App object for a given name (or DEFAULT).\r\n         */\r\n        function app(name) {\r\n            name = name || DEFAULT_ENTRY_NAME;\r\n            if (!contains(apps, name)) {\r\n                throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n            }\r\n            return apps[name];\r\n        }\r\n        // @ts-ignore\r\n        app['App'] = firebaseAppImpl;\r\n        function initializeApp(options, rawConfig) {\r\n            if (rawConfig === void 0) { rawConfig = {}; }\r\n            if (typeof rawConfig !== 'object' || rawConfig === null) {\r\n                var name_1 = rawConfig;\r\n                rawConfig = { name: name_1 };\r\n            }\r\n            var config = rawConfig;\r\n            if (config.name === undefined) {\r\n                config.name = DEFAULT_ENTRY_NAME;\r\n            }\r\n            var name = config.name;\r\n            if (typeof name !== 'string' || !name) {\r\n                throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n                    appName: String(name)\r\n                });\r\n            }\r\n            if (contains(apps, name)) {\r\n                throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n            }\r\n            var app = new firebaseAppImpl(options, config, namespace);\r\n            apps[name] = app;\r\n            callAppHooks(app, 'create');\r\n            return app;\r\n        }\r\n        /*\r\n         * Return an array of all the non-deleted FirebaseApps.\r\n         */\r\n        function getApps() {\r\n            // Make a copy so caller cannot mutate the apps list.\r\n            return Object.keys(apps).map(function (name) { return apps[name]; });\r\n        }\r\n        /*\r\n         * Register a Firebase Service.\r\n         *\r\n         * firebase.INTERNAL.registerService()\r\n         *\r\n         * TODO: Implement serviceProperties.\r\n         */\r\n        function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {\r\n            if (allowMultipleInstances === void 0) { allowMultipleInstances = false; }\r\n            // If re-registering a service that already exists, return existing service\r\n            if (factories[name]) {\r\n                logger.debug(\"There were multiple attempts to register service \" + name + \".\");\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                return namespace[name];\r\n            }\r\n            // Capture the service factory for later service instantiation\r\n            factories[name] = createService;\r\n            // Capture the appHook, if passed\r\n            if (appHook) {\r\n                appHooks[name] = appHook;\r\n                // Run the **new** app hook on all existing apps\r\n                getApps().forEach(function (app) {\r\n                    appHook('create', app);\r\n                });\r\n            }\r\n            // The Service namespace is an accessor function ...\r\n            function serviceNamespace(appArg) {\r\n                if (appArg === void 0) { appArg = app(); }\r\n                // @ts-ignore\r\n                if (typeof appArg[name] !== 'function') {\r\n                    // Invalid argument.\r\n                    // This happens in the following case: firebase.storage('gs:/')\r\n                    throw ERROR_FACTORY.create(\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */, {\r\n                        appName: name\r\n                    });\r\n                }\r\n                // Forward service instance lookup to the FirebaseApp.\r\n                // @ts-ignore\r\n                return appArg[name]();\r\n            }\r\n            // ... and a container for service-level properties.\r\n            if (serviceProperties !== undefined) {\r\n                deepExtend(serviceNamespace, serviceProperties);\r\n            }\r\n            // Monkey-patch the serviceNamespace onto the firebase namespace\r\n            // @ts-ignore\r\n            namespace[name] = serviceNamespace;\r\n            // Patch the FirebaseAppImpl prototype\r\n            // @ts-ignore\r\n            firebaseAppImpl.prototype[name] =\r\n                // TODO: The eslint disable can be removed and the 'ignoreRestArgs'\r\n                // option added to the no-explicit-any rule when ESlint releases it.\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                function () {\r\n                    var args = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        args[_i] = arguments[_i];\r\n                    }\r\n                    var serviceFxn = this._getService.bind(this, name);\r\n                    return serviceFxn.apply(this, allowMultipleInstances ? args : []);\r\n                };\r\n            return serviceNamespace;\r\n        }\r\n        function callAppHooks(app, eventName) {\r\n            for (var _i = 0, _a = Object.keys(factories); _i < _a.length; _i++) {\r\n                var serviceName = _a[_i];\r\n                // Ignore virtual services\r\n                var factoryName = useAsService(app, serviceName);\r\n                if (factoryName === null) {\r\n                    return;\r\n                }\r\n                if (appHooks[factoryName]) {\r\n                    appHooks[factoryName](eventName, app);\r\n                }\r\n            }\r\n        }\r\n        // Map the requested service to a registered service name\r\n        // (used to map auth to serverAuth service when needed).\r\n        function useAsService(app, name) {\r\n            if (name === 'serverAuth') {\r\n                return null;\r\n            }\r\n            var useService = name;\r\n            return useService;\r\n        }\r\n        return namespace;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * Return a firebase namespace object.\r\n     *\r\n     * In production, this will be called exactly once and the result\r\n     * assigned to the 'firebase' global.  It may be called multiple times\r\n     * in unit tests.\r\n     */\r\n    function createFirebaseNamespace() {\r\n        var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);\r\n        namespace.INTERNAL = __assign({}, namespace.INTERNAL, { createFirebaseNamespace: createFirebaseNamespace,\r\n            extendNamespace: extendNamespace,\r\n            createSubscribe: createSubscribe,\r\n            ErrorFactory: ErrorFactory,\r\n            deepExtend: deepExtend });\r\n        /**\r\n         * Patch the top-level firebase namespace with additional properties.\r\n         *\r\n         * firebase.INTERNAL.extendNamespace()\r\n         */\r\n        function extendNamespace(props) {\r\n            deepExtend(namespace, props);\r\n        }\r\n        return namespace;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    // Firebase Lite detection\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (isBrowser() && self.firebase !== undefined) {\r\n        logger.warn(\"\\n    Warning: Firebase is already defined in the global scope. Please make sure\\n    Firebase library is only loaded once.\\n  \");\r\n        // eslint-disable-next-line\r\n        var sdkVersion = self.firebase.SDK_VERSION;\r\n        if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {\r\n            logger.warn(\"\\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\\n    \");\r\n        }\r\n    }\r\n    var firebaseNamespace = createFirebaseNamespace();\r\n    var initializeApp = firebaseNamespace.initializeApp;\r\n    // TODO: This disable can be removed and the 'ignoreRestArgs' option added to\r\n    // the no-explicit-any rule when ESlint releases it.\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    firebaseNamespace.initializeApp = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        // Environment check before initializing app\r\n        // Do the check in initializeApp, so people have a chance to disable it by setting logLevel\r\n        // in @firebase/logger\r\n        if (isNode()) {\r\n            logger.warn(\"\\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\\n      run in a Node environment.  If running in a Node environment, make sure you\\n      are using the bundle specified by the \\\"main\\\" field in package.json.\\n      \\n      If you are using Webpack, you can specify \\\"main\\\" as the first item in\\n      \\\"resolve.mainFields\\\":\\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\\n      \\n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify \\\"main\\\"\\n      as the first item in \\\"mainFields\\\", e.g. ['main', 'module'].\\n      https://github.com/rollup/rollup-plugin-node-resolve\\n      \");\r\n        }\r\n        return initializeApp.apply(undefined, args);\r\n    };\r\n    var firebase = firebaseNamespace;\n\n    function toArray(arr) {\n      return Array.prototype.slice.call(arr);\n    }\n\n    function promisifyRequest(request) {\n      return new Promise(function(resolve, reject) {\n        request.onsuccess = function() {\n          resolve(request.result);\n        };\n\n        request.onerror = function() {\n          reject(request.error);\n        };\n      });\n    }\n\n    function promisifyRequestCall(obj, method, args) {\n      var request;\n      var p = new Promise(function(resolve, reject) {\n        request = obj[method].apply(obj, args);\n        promisifyRequest(request).then(resolve, reject);\n      });\n\n      p.request = request;\n      return p;\n    }\n\n    function promisifyCursorRequestCall(obj, method, args) {\n      var p = promisifyRequestCall(obj, method, args);\n      return p.then(function(value) {\n        if (!value) return;\n        return new Cursor(value, p.request);\n      });\n    }\n\n    function proxyProperties(ProxyClass, targetProp, properties) {\n      properties.forEach(function(prop) {\n        Object.defineProperty(ProxyClass.prototype, prop, {\n          get: function() {\n            return this[targetProp][prop];\n          },\n          set: function(val) {\n            this[targetProp][prop] = val;\n          }\n        });\n      });\n    }\n\n    function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n      properties.forEach(function(prop) {\n        if (!(prop in Constructor.prototype)) return;\n        ProxyClass.prototype[prop] = function() {\n          return promisifyRequestCall(this[targetProp], prop, arguments);\n        };\n      });\n    }\n\n    function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n      properties.forEach(function(prop) {\n        if (!(prop in Constructor.prototype)) return;\n        ProxyClass.prototype[prop] = function() {\n          return this[targetProp][prop].apply(this[targetProp], arguments);\n        };\n      });\n    }\n\n    function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n      properties.forEach(function(prop) {\n        if (!(prop in Constructor.prototype)) return;\n        ProxyClass.prototype[prop] = function() {\n          return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n        };\n      });\n    }\n\n    function Index(index) {\n      this._index = index;\n    }\n\n    proxyProperties(Index, '_index', [\n      'name',\n      'keyPath',\n      'multiEntry',\n      'unique'\n    ]);\n\n    proxyRequestMethods(Index, '_index', IDBIndex, [\n      'get',\n      'getKey',\n      'getAll',\n      'getAllKeys',\n      'count'\n    ]);\n\n    proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n      'openCursor',\n      'openKeyCursor'\n    ]);\n\n    function Cursor(cursor, request) {\n      this._cursor = cursor;\n      this._request = request;\n    }\n\n    proxyProperties(Cursor, '_cursor', [\n      'direction',\n      'key',\n      'primaryKey',\n      'value'\n    ]);\n\n    proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n      'update',\n      'delete'\n    ]);\n\n    // proxy 'next' methods\n    ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n      if (!(methodName in IDBCursor.prototype)) return;\n      Cursor.prototype[methodName] = function() {\n        var cursor = this;\n        var args = arguments;\n        return Promise.resolve().then(function() {\n          cursor._cursor[methodName].apply(cursor._cursor, args);\n          return promisifyRequest(cursor._request).then(function(value) {\n            if (!value) return;\n            return new Cursor(value, cursor._request);\n          });\n        });\n      };\n    });\n\n    function ObjectStore(store) {\n      this._store = store;\n    }\n\n    ObjectStore.prototype.createIndex = function() {\n      return new Index(this._store.createIndex.apply(this._store, arguments));\n    };\n\n    ObjectStore.prototype.index = function() {\n      return new Index(this._store.index.apply(this._store, arguments));\n    };\n\n    proxyProperties(ObjectStore, '_store', [\n      'name',\n      'keyPath',\n      'indexNames',\n      'autoIncrement'\n    ]);\n\n    proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n      'put',\n      'add',\n      'delete',\n      'clear',\n      'get',\n      'getAll',\n      'getKey',\n      'getAllKeys',\n      'count'\n    ]);\n\n    proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n      'openCursor',\n      'openKeyCursor'\n    ]);\n\n    proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n      'deleteIndex'\n    ]);\n\n    function Transaction(idbTransaction) {\n      this._tx = idbTransaction;\n      this.complete = new Promise(function(resolve, reject) {\n        idbTransaction.oncomplete = function() {\n          resolve();\n        };\n        idbTransaction.onerror = function() {\n          reject(idbTransaction.error);\n        };\n        idbTransaction.onabort = function() {\n          reject(idbTransaction.error);\n        };\n      });\n    }\n\n    Transaction.prototype.objectStore = function() {\n      return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n    };\n\n    proxyProperties(Transaction, '_tx', [\n      'objectStoreNames',\n      'mode'\n    ]);\n\n    proxyMethods(Transaction, '_tx', IDBTransaction, [\n      'abort'\n    ]);\n\n    function UpgradeDB(db, oldVersion, transaction) {\n      this._db = db;\n      this.oldVersion = oldVersion;\n      this.transaction = new Transaction(transaction);\n    }\n\n    UpgradeDB.prototype.createObjectStore = function() {\n      return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n    };\n\n    proxyProperties(UpgradeDB, '_db', [\n      'name',\n      'version',\n      'objectStoreNames'\n    ]);\n\n    proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n      'deleteObjectStore',\n      'close'\n    ]);\n\n    function DB(db) {\n      this._db = db;\n    }\n\n    DB.prototype.transaction = function() {\n      return new Transaction(this._db.transaction.apply(this._db, arguments));\n    };\n\n    proxyProperties(DB, '_db', [\n      'name',\n      'version',\n      'objectStoreNames'\n    ]);\n\n    proxyMethods(DB, '_db', IDBDatabase, [\n      'close'\n    ]);\n\n    // Add cursor iterators\n    // TODO: remove this once browsers do the right thing with promises\n    ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n      [ObjectStore, Index].forEach(function(Constructor) {\n        // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n        if (!(funcName in Constructor.prototype)) return;\n\n        Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n          var args = toArray(arguments);\n          var callback = args[args.length - 1];\n          var nativeObject = this._store || this._index;\n          var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n          request.onsuccess = function() {\n            callback(request.result);\n          };\n        };\n      });\n    });\n\n    // polyfill getAll\n    [Index, ObjectStore].forEach(function(Constructor) {\n      if (Constructor.prototype.getAll) return;\n      Constructor.prototype.getAll = function(query, count) {\n        var instance = this;\n        var items = [];\n\n        return new Promise(function(resolve) {\n          instance.iterateCursor(query, function(cursor) {\n            if (!cursor) {\n              resolve(items);\n              return;\n            }\n            items.push(cursor.value);\n\n            if (count !== undefined && items.length == count) {\n              resolve(items);\n              return;\n            }\n            cursor.continue();\n          });\n        });\n      };\n    });\n\n    function openDb(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    }\n\n    var version$1 = \"0.2.7\";\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var PENDING_TIMEOUT_MS = 10000;\r\n    var PACKAGE_VERSION = \"w:\" + version$1;\r\n    var INTERNAL_AUTH_VERSION = 'FIS_v2';\r\n    var INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\r\n    var TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\r\n    var SERVICE = 'installations';\r\n    var SERVICE_NAME = 'Installations';\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var _a$1;\r\n    var ERROR_DESCRIPTION_MAP = (_a$1 = {},\r\n        _a$1[\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */] = 'Missing App configuration values.',\r\n        _a$1[\"create-installation-failed\" /* CREATE_INSTALLATION_FAILED */] = 'Could not register Firebase Installation.',\r\n        _a$1[\"generate-token-failed\" /* GENERATE_TOKEN_FAILED */] = 'Could not generate Auth Token.',\r\n        _a$1[\"not-registered\" /* NOT_REGISTERED */] = 'Firebase Installation is not registered.',\r\n        _a$1[\"installation-not-found\" /* INSTALLATION_NOT_FOUND */] = 'Firebase Installation not found.',\r\n        _a$1[\"request-failed\" /* REQUEST_FAILED */] = '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\r\n        _a$1[\"app-offline\" /* APP_OFFLINE */] = 'Could not process request. Application offline.',\r\n        _a$1[\"delete-pending-registration\" /* DELETE_PENDING_REGISTRATION */] = \"Can't delete installation while there is a pending registration request.\",\r\n        _a$1);\r\n    var ERROR_FACTORY$1 = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\r\n    /** Returns true if error is a FirebaseError that is based on an error from the server. */\r\n    function isServerError(error) {\r\n        return (error instanceof FirebaseError &&\r\n            error.code.includes(\"request-failed\" /* REQUEST_FAILED */));\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function extractAppConfig(app) {\r\n        if (!app || !app.options) {\r\n            throw ERROR_FACTORY$1.create(\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */);\r\n        }\r\n        var appName = app.name;\r\n        var _a = app.options, projectId = _a.projectId, apiKey = _a.apiKey, appId = _a.appId;\r\n        if (!appName || !projectId || !apiKey || !appId) {\r\n            throw ERROR_FACTORY$1.create(\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */);\r\n        }\r\n        return { appName: appName, projectId: projectId, apiKey: apiKey, appId: appId };\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function getInstallationsEndpoint(_a) {\r\n        var projectId = _a.projectId;\r\n        return INSTALLATIONS_API_URL + \"/projects/\" + projectId + \"/installations\";\r\n    }\r\n    function extractAuthTokenInfoFromResponse(response) {\r\n        return {\r\n            token: response.token,\r\n            requestStatus: 2 /* COMPLETED */,\r\n            expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\r\n            creationTime: Date.now()\r\n        };\r\n    }\r\n    function getErrorFromResponse(requestName, response) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var responseJson, errorData;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, response.json()];\r\n                    case 1:\r\n                        responseJson = _a.sent();\r\n                        errorData = responseJson.error;\r\n                        return [2 /*return*/, ERROR_FACTORY$1.create(\"request-failed\" /* REQUEST_FAILED */, {\r\n                                requestName: requestName,\r\n                                serverCode: errorData.code,\r\n                                serverMessage: errorData.message,\r\n                                serverStatus: errorData.status\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function getHeaders(_a) {\r\n        var apiKey = _a.apiKey;\r\n        return new Headers({\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json',\r\n            'x-goog-api-key': apiKey\r\n        });\r\n    }\r\n    function getHeadersWithAuth(appConfig, _a) {\r\n        var refreshToken = _a.refreshToken;\r\n        var headers = getHeaders(appConfig);\r\n        headers.append('Authorization', getAuthorizationHeader(refreshToken));\r\n        return headers;\r\n    }\r\n    /**\r\n     * Calls the passed in fetch wrapper and returns the response.\r\n     * If the returned response has a status of 5xx, re-runs the function once and\r\n     * returns the response.\r\n     */\r\n    function retryIfServerError(fn) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, fn()];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        if (result.status >= 500 && result.status < 600) {\r\n                            // Internal Server Error. Retry request.\r\n                            return [2 /*return*/, fn()];\r\n                        }\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function getExpiresInFromResponseExpiresIn(responseExpiresIn) {\r\n        // This works because the server will never respond with fractions of a second.\r\n        return Number(responseExpiresIn.replace('s', '000'));\r\n    }\r\n    function getAuthorizationHeader(refreshToken) {\r\n        return INTERNAL_AUTH_VERSION + \" \" + refreshToken;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function createInstallation(appConfig, _a) {\r\n        var fid = _a.fid;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        endpoint = getInstallationsEndpoint(appConfig);\r\n                        headers = getHeaders(appConfig);\r\n                        body = {\r\n                            fid: fid,\r\n                            authVersion: INTERNAL_AUTH_VERSION,\r\n                            appId: appConfig.appId,\r\n                            sdkVersion: PACKAGE_VERSION\r\n                        };\r\n                        request = {\r\n                            method: 'POST',\r\n                            headers: headers,\r\n                            body: JSON.stringify(body)\r\n                        };\r\n                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];\r\n                    case 1:\r\n                        response = _b.sent();\r\n                        if (!response.ok) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, response.json()];\r\n                    case 2:\r\n                        responseValue = _b.sent();\r\n                        registeredInstallationEntry = {\r\n                            fid: responseValue.fid || fid,\r\n                            registrationStatus: 2 /* COMPLETED */,\r\n                            refreshToken: responseValue.refreshToken,\r\n                            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\r\n                        };\r\n                        return [2 /*return*/, registeredInstallationEntry];\r\n                    case 3: return [4 /*yield*/, getErrorFromResponse('Create Installation', response)];\r\n                    case 4: throw _b.sent();\r\n                }\r\n            });\r\n        });\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /** Returns a promise that resolves after given time passes. */\r\n    function sleep(ms) {\r\n        return new Promise(function (resolve) {\r\n            setTimeout(resolve, ms);\r\n        });\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function bufferToBase64UrlSafe(array) {\r\n        var b64 = btoa(String.fromCharCode.apply(String, __spread(array)));\r\n        return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\r\n    var INVALID_FID = '';\r\n    /**\r\n     * Generates a new FID using random values from Web Crypto API.\r\n     * Returns an empty string if FID generation fails for any reason.\r\n     */\r\n    function generateFid() {\r\n        try {\r\n            // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\r\n            // bytes. our implementation generates a 17 byte array instead.\r\n            var fidByteArray = new Uint8Array(17);\r\n            var crypto_1 = self.crypto || self.msCrypto;\r\n            crypto_1.getRandomValues(fidByteArray);\r\n            // Replace the first 4 random bits with the constant FID header of 0b0111.\r\n            fidByteArray[0] = 112 + (fidByteArray[0] % 16);\r\n            var fid = encode(fidByteArray);\r\n            return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\r\n        }\r\n        catch (_a) {\r\n            // FID generation errored\r\n            return INVALID_FID;\r\n        }\r\n    }\r\n    /** Converts a FID Uint8Array to a base64 string representation. */\r\n    function encode(fidByteArray) {\r\n        var b64String = bufferToBase64UrlSafe(fidByteArray);\r\n        // Remove the 23rd character that was added because of the extra 4 bits at the\r\n        // end of our 17 byte array, and the '=' padding.\r\n        return b64String.substr(0, 22);\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var DATABASE_NAME = 'firebase-installations-database';\r\n    var DATABASE_VERSION = 1;\r\n    var OBJECT_STORE_NAME = 'firebase-installations-store';\r\n    var dbPromise = null;\r\n    function getDbPromise() {\r\n        if (!dbPromise) {\r\n            dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDB) {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (upgradeDB.oldVersion) {\r\n                    case 0:\r\n                        upgradeDB.createObjectStore(OBJECT_STORE_NAME);\r\n                }\r\n            });\r\n        }\r\n        return dbPromise;\r\n    }\r\n    /** Assigns or overwrites the record for the given key with the given value. */\r\n    function set(appConfig, value) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var key, db, tx;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        key = getKey(appConfig);\r\n                        return [4 /*yield*/, getDbPromise()];\r\n                    case 1:\r\n                        db = _a.sent();\r\n                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n                        return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME).put(value, key)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, tx.complete];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2 /*return*/, value];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /** Removes record(s) from the objectStore that match the given key. */\r\n    function remove(appConfig) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var key, db, tx;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        key = getKey(appConfig);\r\n                        return [4 /*yield*/, getDbPromise()];\r\n                    case 1:\r\n                        db = _a.sent();\r\n                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n                        return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME).delete(key)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, tx.complete];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Atomically updates a record with the result of updateFn, which gets\r\n     * called with the current value. If newValue is undefined, the record is\r\n     * deleted instead.\r\n     * @return Updated value\r\n     */\r\n    function update(appConfig, updateFn) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var key, db, tx, store, oldValue, newValue;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        key = getKey(appConfig);\r\n                        return [4 /*yield*/, getDbPromise()];\r\n                    case 1:\r\n                        db = _a.sent();\r\n                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n                        store = tx.objectStore(OBJECT_STORE_NAME);\r\n                        return [4 /*yield*/, store.get(key)];\r\n                    case 2:\r\n                        oldValue = _a.sent();\r\n                        newValue = updateFn(oldValue);\r\n                        if (newValue === oldValue) {\r\n                            return [2 /*return*/, newValue];\r\n                        }\r\n                        if (!(newValue === undefined)) return [3 /*break*/, 4];\r\n                        return [4 /*yield*/, store.delete(key)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 6];\r\n                    case 4: return [4 /*yield*/, store.put(newValue, key)];\r\n                    case 5:\r\n                        _a.sent();\r\n                        _a.label = 6;\r\n                    case 6: return [4 /*yield*/, tx.complete];\r\n                    case 7:\r\n                        _a.sent();\r\n                        return [2 /*return*/, newValue];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function getKey(appConfig) {\r\n        return appConfig.appName + \"!\" + appConfig.appId;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * Updates and returns the InstallationEntry from the database.\r\n     * Also triggers a registration request if it is necessary and possible.\r\n     */\r\n    function getInstallationEntry(appConfig) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var registrationPromise, installationEntry, _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, update(appConfig, function (oldEntry) {\r\n                            var installationEntry = updateOrCreateInstallationEntry(oldEntry);\r\n                            var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);\r\n                            registrationPromise = entryWithPromise.registrationPromise;\r\n                            return entryWithPromise.installationEntry;\r\n                        })];\r\n                    case 1:\r\n                        installationEntry = _b.sent();\r\n                        if (!(installationEntry.fid === INVALID_FID)) return [3 /*break*/, 3];\r\n                        _a = {};\r\n                        return [4 /*yield*/, registrationPromise];\r\n                    case 2: \r\n                    // FID generation failed. Waiting for the FID from the server.\r\n                    return [2 /*return*/, (_a.installationEntry = _b.sent(), _a)];\r\n                    case 3: return [2 /*return*/, {\r\n                            installationEntry: installationEntry,\r\n                            registrationPromise: registrationPromise\r\n                        }];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function updateOrCreateInstallationEntry(oldEntry) {\r\n        var entry = oldEntry || {\r\n            fid: generateFid(),\r\n            registrationStatus: 0 /* NOT_STARTED */\r\n        };\r\n        if (hasInstallationRequestTimedOut(entry)) {\r\n            return {\r\n                fid: entry.fid,\r\n                registrationStatus: 0 /* NOT_STARTED */\r\n            };\r\n        }\r\n        return entry;\r\n    }\r\n    /**\r\n     * If the Firebase Installation is not registered yet, this will trigger the registration\r\n     * and return an InProgressInstallationEntry.\r\n     */\r\n    function triggerRegistrationIfNecessary(appConfig, installationEntry) {\r\n        if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {\r\n            if (!navigator.onLine) {\r\n                // Registration required but app is offline.\r\n                var registrationPromiseWithError = Promise.reject(ERROR_FACTORY$1.create(\"app-offline\" /* APP_OFFLINE */));\r\n                return {\r\n                    installationEntry: installationEntry,\r\n                    registrationPromise: registrationPromiseWithError\r\n                };\r\n            }\r\n            // Try registering. Change status to IN_PROGRESS.\r\n            var inProgressEntry = {\r\n                fid: installationEntry.fid,\r\n                registrationStatus: 1 /* IN_PROGRESS */,\r\n                registrationTime: Date.now()\r\n            };\r\n            var registrationPromise = registerInstallation(appConfig, inProgressEntry);\r\n            return { installationEntry: inProgressEntry, registrationPromise: registrationPromise };\r\n        }\r\n        else if (installationEntry.registrationStatus === 1 /* IN_PROGRESS */) {\r\n            return {\r\n                installationEntry: installationEntry,\r\n                registrationPromise: waitUntilFidRegistration(appConfig)\r\n            };\r\n        }\r\n        else {\r\n            return { installationEntry: installationEntry };\r\n        }\r\n    }\r\n    /** This will be executed only once for each new Firebase Installation. */\r\n    function registerInstallation(appConfig, installationEntry) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var registeredInstallationEntry, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 7]);\r\n                        return [4 /*yield*/, createInstallation(appConfig, installationEntry)];\r\n                    case 1:\r\n                        registeredInstallationEntry = _a.sent();\r\n                        return [2 /*return*/, set(appConfig, registeredInstallationEntry)];\r\n                    case 2:\r\n                        e_1 = _a.sent();\r\n                        if (!(isServerError(e_1) && e_1.serverCode === 409)) return [3 /*break*/, 4];\r\n                        // Server returned a \"FID can not be used\" error.\r\n                        // Generate a new ID next time.\r\n                        return [4 /*yield*/, remove(appConfig)];\r\n                    case 3:\r\n                        // Server returned a \"FID can not be used\" error.\r\n                        // Generate a new ID next time.\r\n                        _a.sent();\r\n                        return [3 /*break*/, 6];\r\n                    case 4: \r\n                    // Registration failed. Set FID as not registered.\r\n                    return [4 /*yield*/, set(appConfig, {\r\n                            fid: installationEntry.fid,\r\n                            registrationStatus: 0 /* NOT_STARTED */\r\n                        })];\r\n                    case 5:\r\n                        // Registration failed. Set FID as not registered.\r\n                        _a.sent();\r\n                        _a.label = 6;\r\n                    case 6: throw e_1;\r\n                    case 7: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /** Call if FID registration is pending. */\r\n    function waitUntilFidRegistration(appConfig) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var entry;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, updateInstallationRequest(appConfig)];\r\n                    case 1:\r\n                        entry = _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];\r\n                        // createInstallation request still in progress.\r\n                        return [4 /*yield*/, sleep(100)];\r\n                    case 3:\r\n                        // createInstallation request still in progress.\r\n                        _a.sent();\r\n                        return [4 /*yield*/, updateInstallationRequest(appConfig)];\r\n                    case 4:\r\n                        entry = _a.sent();\r\n                        return [3 /*break*/, 2];\r\n                    case 5:\r\n                        if (entry.registrationStatus === 0 /* NOT_STARTED */) {\r\n                            throw ERROR_FACTORY$1.create(\"create-installation-failed\" /* CREATE_INSTALLATION_FAILED */);\r\n                        }\r\n                        return [2 /*return*/, entry];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Called only if there is a CreateInstallation request in progress.\r\n     *\r\n     * Updates the InstallationEntry in the DB based on the status of the\r\n     * CreateInstallation request.\r\n     *\r\n     * Returns the updated InstallationEntry.\r\n     */\r\n    function updateInstallationRequest(appConfig) {\r\n        return update(appConfig, function (oldEntry) {\r\n            if (!oldEntry) {\r\n                throw ERROR_FACTORY$1.create(\"installation-not-found\" /* INSTALLATION_NOT_FOUND */);\r\n            }\r\n            if (hasInstallationRequestTimedOut(oldEntry)) {\r\n                return {\r\n                    fid: oldEntry.fid,\r\n                    registrationStatus: 0 /* NOT_STARTED */\r\n                };\r\n            }\r\n            return oldEntry;\r\n        });\r\n    }\r\n    function hasInstallationRequestTimedOut(installationEntry) {\r\n        return (installationEntry.registrationStatus === 1 /* IN_PROGRESS */ &&\r\n            installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function generateAuthToken(appConfig, installationEntry) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var endpoint, headers, body, request, response, responseValue, completedAuthToken;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\r\n                        headers = getHeadersWithAuth(appConfig, installationEntry);\r\n                        body = {\r\n                            installation: {\r\n                                sdkVersion: PACKAGE_VERSION\r\n                            }\r\n                        };\r\n                        request = {\r\n                            method: 'POST',\r\n                            headers: headers,\r\n                            body: JSON.stringify(body)\r\n                        };\r\n                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (!response.ok) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, response.json()];\r\n                    case 2:\r\n                        responseValue = _a.sent();\r\n                        completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\r\n                        return [2 /*return*/, completedAuthToken];\r\n                    case 3: return [4 /*yield*/, getErrorFromResponse('Generate Auth Token', response)];\r\n                    case 4: throw _a.sent();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function getGenerateAuthTokenEndpoint(appConfig, _a) {\r\n        var fid = _a.fid;\r\n        return getInstallationsEndpoint(appConfig) + \"/\" + fid + \"/authTokens:generate\";\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * Returns a valid authentication token for the installation. Generates a new\r\n     * token if one doesn't exist, is expired or about to expire.\r\n     *\r\n     * Should only be called if the Firebase Installation is registered.\r\n     */\r\n    function refreshAuthToken(appConfig) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var tokenPromise, entry, authToken, _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, update(appConfig, function (oldEntry) {\r\n                            if (!isEntryRegistered(oldEntry)) {\r\n                                throw ERROR_FACTORY$1.create(\"not-registered\" /* NOT_REGISTERED */);\r\n                            }\r\n                            var oldAuthToken = oldEntry.authToken;\r\n                            if (isAuthTokenValid(oldAuthToken)) {\r\n                                // There is a valid token in the DB.\r\n                                return oldEntry;\r\n                            }\r\n                            else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {\r\n                                // There already is a token request in progress.\r\n                                tokenPromise = waitUntilAuthTokenRequest(appConfig);\r\n                                return oldEntry;\r\n                            }\r\n                            else {\r\n                                // No token or token expired.\r\n                                if (!navigator.onLine) {\r\n                                    throw ERROR_FACTORY$1.create(\"app-offline\" /* APP_OFFLINE */);\r\n                                }\r\n                                var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\r\n                                tokenPromise = fetchAuthTokenFromServer(appConfig, inProgressEntry);\r\n                                return inProgressEntry;\r\n                            }\r\n                        })];\r\n                    case 1:\r\n                        entry = _b.sent();\r\n                        if (!tokenPromise) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, tokenPromise];\r\n                    case 2:\r\n                        _a = _b.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        _a = entry.authToken;\r\n                        _b.label = 4;\r\n                    case 4:\r\n                        authToken = _a;\r\n                        return [2 /*return*/, authToken.token];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call only if FID is registered and Auth Token request is in progress.\r\n     */\r\n    function waitUntilAuthTokenRequest(appConfig) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var entry, authToken;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, updateAuthTokenRequest(appConfig)];\r\n                    case 1:\r\n                        entry = _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        if (!(entry.authToken.requestStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];\r\n                        // generateAuthToken still in progress.\r\n                        return [4 /*yield*/, sleep(100)];\r\n                    case 3:\r\n                        // generateAuthToken still in progress.\r\n                        _a.sent();\r\n                        return [4 /*yield*/, updateAuthTokenRequest(appConfig)];\r\n                    case 4:\r\n                        entry = _a.sent();\r\n                        return [3 /*break*/, 2];\r\n                    case 5:\r\n                        authToken = entry.authToken;\r\n                        if (authToken.requestStatus === 0 /* NOT_STARTED */) {\r\n                            throw ERROR_FACTORY$1.create(\"generate-token-failed\" /* GENERATE_TOKEN_FAILED */);\r\n                        }\r\n                        else {\r\n                            return [2 /*return*/, authToken];\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Called only if there is a GenerateAuthToken request in progress.\r\n     *\r\n     * Updates the InstallationEntry in the DB based on the status of the\r\n     * GenerateAuthToken request.\r\n     *\r\n     * Returns the updated InstallationEntry.\r\n     */\r\n    function updateAuthTokenRequest(appConfig) {\r\n        return update(appConfig, function (oldEntry) {\r\n            if (!isEntryRegistered(oldEntry)) {\r\n                throw ERROR_FACTORY$1.create(\"not-registered\" /* NOT_REGISTERED */);\r\n            }\r\n            var oldAuthToken = oldEntry.authToken;\r\n            if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\r\n                return __assign({}, oldEntry, { authToken: { requestStatus: 0 /* NOT_STARTED */ } });\r\n            }\r\n            return oldEntry;\r\n        });\r\n    }\r\n    function fetchAuthTokenFromServer(appConfig, installationEntry) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 3, , 8]);\r\n                        return [4 /*yield*/, generateAuthToken(appConfig, installationEntry)];\r\n                    case 1:\r\n                        authToken = _a.sent();\r\n                        updatedInstallationEntry = __assign({}, installationEntry, { authToken: authToken });\r\n                        return [4 /*yield*/, set(appConfig, updatedInstallationEntry)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, authToken];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        if (!(isServerError(e_1) && (e_1.serverCode === 401 || e_1.serverCode === 404))) return [3 /*break*/, 5];\r\n                        // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\r\n                        // Generate a new ID next time.\r\n                        return [4 /*yield*/, remove(appConfig)];\r\n                    case 4:\r\n                        // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\r\n                        // Generate a new ID next time.\r\n                        _a.sent();\r\n                        return [3 /*break*/, 7];\r\n                    case 5:\r\n                        updatedInstallationEntry = __assign({}, installationEntry, { authToken: { requestStatus: 0 /* NOT_STARTED */ } });\r\n                        return [4 /*yield*/, set(appConfig, updatedInstallationEntry)];\r\n                    case 6:\r\n                        _a.sent();\r\n                        _a.label = 7;\r\n                    case 7: throw e_1;\r\n                    case 8: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function isEntryRegistered(installationEntry) {\r\n        return (installationEntry !== undefined &&\r\n            installationEntry.registrationStatus === 2 /* COMPLETED */);\r\n    }\r\n    function isAuthTokenValid(authToken) {\r\n        return (authToken.requestStatus === 2 /* COMPLETED */ &&\r\n            !isAuthTokenExpired(authToken));\r\n    }\r\n    function isAuthTokenExpired(authToken) {\r\n        var now = Date.now();\r\n        return (now < authToken.creationTime ||\r\n            authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);\r\n    }\r\n    /** Returns an updated InstallationEntry with an InProgressAuthToken. */\r\n    function makeAuthTokenRequestInProgressEntry(oldEntry) {\r\n        var inProgressAuthToken = {\r\n            requestStatus: 1 /* IN_PROGRESS */,\r\n            requestTime: Date.now()\r\n        };\r\n        return __assign({}, oldEntry, { authToken: inProgressAuthToken });\r\n    }\r\n    function hasAuthTokenRequestTimedOut(authToken) {\r\n        return (authToken.requestStatus === 1 /* IN_PROGRESS */ &&\r\n            authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function getId(app) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var appConfig, _a, installationEntry, registrationPromise;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        appConfig = extractAppConfig(app);\r\n                        return [4 /*yield*/, getInstallationEntry(appConfig)];\r\n                    case 1:\r\n                        _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;\r\n                        if (registrationPromise) {\r\n                            // Suppress registration errors as they are not a problem for getId.\r\n                            registrationPromise.catch(function () { });\r\n                        }\r\n                        if (installationEntry.registrationStatus === 2 /* COMPLETED */) {\r\n                            // If the installation is already registered, update the authentication\r\n                            // token if needed. Suppress errors as they are not relevant to getId.\r\n                            refreshAuthToken(appConfig).catch(function () { });\r\n                        }\r\n                        return [2 /*return*/, installationEntry.fid];\r\n                }\r\n            });\r\n        });\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function getToken(app) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var appConfig;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        appConfig = extractAppConfig(app);\r\n                        return [4 /*yield*/, completeInstallationRegistration(appConfig)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        // At this point we either have a Registered Installation in the DB, or we've\r\n                        // already thrown an error.\r\n                        return [2 /*return*/, refreshAuthToken(appConfig)];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function completeInstallationRegistration(appConfig) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, installationEntry, registrationPromise;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, getInstallationEntry(appConfig)];\r\n                    case 1:\r\n                        _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;\r\n                        if (!registrationPromise) return [3 /*break*/, 3];\r\n                        // A createInstallation request is in progress. Wait until it finishes.\r\n                        return [4 /*yield*/, registrationPromise];\r\n                    case 2:\r\n                        // A createInstallation request is in progress. Wait until it finishes.\r\n                        _b.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        if (installationEntry.registrationStatus !== 2 /* COMPLETED */) {\r\n                            // Installation ID can't be registered.\r\n                            throw ERROR_FACTORY$1.create(\"create-installation-failed\" /* CREATE_INSTALLATION_FAILED */);\r\n                        }\r\n                        _b.label = 4;\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function deleteInstallation(appConfig, installationEntry) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var endpoint, headers, request, response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        endpoint = getDeleteEndpoint(appConfig, installationEntry);\r\n                        headers = getHeadersWithAuth(appConfig, installationEntry);\r\n                        request = {\r\n                            method: 'DELETE',\r\n                            headers: headers\r\n                        };\r\n                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (!!response.ok) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, getErrorFromResponse('Delete Installation', response)];\r\n                    case 2: throw _a.sent();\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function getDeleteEndpoint(appConfig, _a) {\r\n        var fid = _a.fid;\r\n        return getInstallationsEndpoint(appConfig) + \"/\" + fid;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function deleteInstallation$1(app) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var appConfig, entry;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        appConfig = extractAppConfig(app);\r\n                        return [4 /*yield*/, update(appConfig, function (oldEntry) {\r\n                                if (oldEntry && oldEntry.registrationStatus === 0 /* NOT_STARTED */) {\r\n                                    // Delete the unregistered entry without sending a deleteInstallation request.\r\n                                    return undefined;\r\n                                }\r\n                                return oldEntry;\r\n                            })];\r\n                    case 1:\r\n                        entry = _a.sent();\r\n                        if (!entry) return [3 /*break*/, 6];\r\n                        if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 2];\r\n                        // Can't delete while trying to register.\r\n                        throw ERROR_FACTORY$1.create(\"delete-pending-registration\" /* DELETE_PENDING_REGISTRATION */);\r\n                    case 2:\r\n                        if (!(entry.registrationStatus === 2 /* COMPLETED */)) return [3 /*break*/, 6];\r\n                        if (!!navigator.onLine) return [3 /*break*/, 3];\r\n                        throw ERROR_FACTORY$1.create(\"app-offline\" /* APP_OFFLINE */);\r\n                    case 3: return [4 /*yield*/, deleteInstallation(appConfig, entry)];\r\n                    case 4:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, remove(appConfig)];\r\n                    case 5:\r\n                        _a.sent();\r\n                        _a.label = 6;\r\n                    case 6: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function registerInstallations(instance) {\r\n        var installationsName = 'installations';\r\n        var factoryMethod = function (app) {\r\n            // Throws if app isn't configured properly.\r\n            extractAppConfig(app);\r\n            return {\r\n                app: app,\r\n                getId: function () { return getId(app); },\r\n                getToken: function () { return getToken(app); },\r\n                delete: function () { return deleteInstallation$1(app); }\r\n            };\r\n        };\r\n        instance.INTERNAL.registerService(installationsName, factoryMethod);\r\n    }\r\n    registerInstallations(firebase);\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var _a$2;\r\n    var ERROR_MAP = (_a$2 = {},\r\n        _a$2[\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */] = 'This method is available in a Window context.',\r\n        _a$2[\"only-available-in-sw\" /* AVAILABLE_IN_SW */] = 'This method is available in a service worker context.',\r\n        _a$2[\"should-be-overriden\" /* SHOULD_BE_INHERITED */] = 'This method should be overriden by extended classes.',\r\n        _a$2[\"bad-sender-id\" /* BAD_SENDER_ID */] = \"Please ensure that 'messagingSenderId' is set \" +\r\n            'correctly in the options passed into firebase.initializeApp().',\r\n        _a$2[\"permission-default\" /* PERMISSION_DEFAULT */] = 'The required permissions were not granted and dismissed instead.',\r\n        _a$2[\"permission-blocked\" /* PERMISSION_BLOCKED */] = 'The required permissions were not granted and blocked instead.',\r\n        _a$2[\"unsupported-browser\" /* UNSUPPORTED_BROWSER */] = \"This browser doesn't support the API's \" +\r\n            'required to use the firebase SDK.',\r\n        _a$2[\"notifications-blocked\" /* NOTIFICATIONS_BLOCKED */] = 'Notifications have been blocked.',\r\n        _a$2[\"failed-serviceworker-registration\" /* FAILED_DEFAULT_REGISTRATION */] = 'We are unable to register the ' +\r\n            'default service worker. {$browserErrorMessage}',\r\n        _a$2[\"sw-registration-expected\" /* SW_REGISTRATION_EXPECTED */] = 'A service worker registration was the expected input.',\r\n        _a$2[\"get-subscription-failed\" /* GET_SUBSCRIPTION_FAILED */] = 'There was an error when trying to get ' +\r\n            'any existing Push Subscriptions.',\r\n        _a$2[\"invalid-saved-token\" /* INVALID_SAVED_TOKEN */] = 'Unable to access details of the saved token.',\r\n        _a$2[\"sw-reg-redundant\" /* SW_REG_REDUNDANT */] = 'The service worker being used for push was made redundant.',\r\n        _a$2[\"token-subscribe-failed\" /* TOKEN_SUBSCRIBE_FAILED */] = 'A problem occured while subscribing the user to FCM: {$errorInfo}',\r\n        _a$2[\"token-subscribe-no-token\" /* TOKEN_SUBSCRIBE_NO_TOKEN */] = 'FCM returned no token when subscribing the user to push.',\r\n        _a$2[\"token-unsubscribe-failed\" /* TOKEN_UNSUBSCRIBE_FAILED */] = 'A problem occured while unsubscribing the ' +\r\n            'user from FCM: {$errorInfo}',\r\n        _a$2[\"token-update-failed\" /* TOKEN_UPDATE_FAILED */] = 'A problem occured while updating the user from FCM: {$errorInfo}',\r\n        _a$2[\"token-update-no-token\" /* TOKEN_UPDATE_NO_TOKEN */] = 'FCM returned no token when updating the user to push.',\r\n        _a$2[\"use-sw-before-get-token\" /* USE_SW_BEFORE_GET_TOKEN */] = 'The useServiceWorker() method may only be called once and must be ' +\r\n            'called before calling getToken() to ensure your service worker is used.',\r\n        _a$2[\"invalid-delete-token\" /* INVALID_DELETE_TOKEN */] = 'You must pass a valid token into ' +\r\n            'deleteToken(), i.e. the token from getToken().',\r\n        _a$2[\"delete-token-not-found\" /* DELETE_TOKEN_NOT_FOUND */] = 'The deletion attempt for token could not ' +\r\n            'be performed as the token was not found.',\r\n        _a$2[\"delete-scope-not-found\" /* DELETE_SCOPE_NOT_FOUND */] = 'The deletion attempt for service worker ' +\r\n            'scope could not be performed as the scope was not found.',\r\n        _a$2[\"bg-handler-function-expected\" /* BG_HANDLER_FUNCTION_EXPECTED */] = 'The input to setBackgroundMessageHandler() must be a function.',\r\n        _a$2[\"no-window-client-to-msg\" /* NO_WINDOW_CLIENT_TO_MSG */] = 'An attempt was made to message a non-existant window client.',\r\n        _a$2[\"unable-to-resubscribe\" /* UNABLE_TO_RESUBSCRIBE */] = 'There was an error while re-subscribing ' +\r\n            'the FCM token for push messaging. Will have to resubscribe the ' +\r\n            'user on next visit. {$errorInfo}',\r\n        _a$2[\"no-fcm-token-for-resubscribe\" /* NO_FCM_TOKEN_FOR_RESUBSCRIBE */] = 'Could not find an FCM token ' +\r\n            'and as a result, unable to resubscribe. Will have to resubscribe the ' +\r\n            'user on next visit.',\r\n        _a$2[\"failed-to-delete-token\" /* FAILED_TO_DELETE_TOKEN */] = 'Unable to delete the currently saved token.',\r\n        _a$2[\"no-sw-in-reg\" /* NO_SW_IN_REG */] = 'Even though the service worker registration was ' +\r\n            'successful, there was a problem accessing the service worker itself.',\r\n        _a$2[\"bad-scope\" /* BAD_SCOPE */] = 'The service worker scope must be a string with at ' +\r\n            'least one character.',\r\n        _a$2[\"bad-vapid-key\" /* BAD_VAPID_KEY */] = 'The public VAPID key is not a Uint8Array with 65 bytes.',\r\n        _a$2[\"bad-subscription\" /* BAD_SUBSCRIPTION */] = 'The subscription must be a valid PushSubscription.',\r\n        _a$2[\"bad-token\" /* BAD_TOKEN */] = 'The FCM Token used for storage / lookup was not ' +\r\n            'a valid token string.',\r\n        _a$2[\"failed-delete-vapid-key\" /* FAILED_DELETE_VAPID_KEY */] = 'The VAPID key could not be deleted.',\r\n        _a$2[\"invalid-public-vapid-key\" /* INVALID_PUBLIC_VAPID_KEY */] = 'The public VAPID key must be a string.',\r\n        _a$2[\"use-public-key-before-get-token\" /* USE_PUBLIC_KEY_BEFORE_GET_TOKEN */] = 'The usePublicVapidKey() method may only be called once and must be ' +\r\n            'called before calling getToken() to ensure your VAPID key is used.',\r\n        _a$2[\"public-vapid-key-decryption-failed\" /* PUBLIC_KEY_DECRYPTION_FAILED */] = 'The public VAPID key did not equal 65 bytes when decrypted.',\r\n        _a$2);\r\n    var errorFactory = new ErrorFactory('messaging', 'Messaging', ERROR_MAP);\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var DEFAULT_PUBLIC_VAPID_KEY = new Uint8Array([\r\n        0x04,\r\n        0x33,\r\n        0x94,\r\n        0xf7,\r\n        0xdf,\r\n        0xa1,\r\n        0xeb,\r\n        0xb1,\r\n        0xdc,\r\n        0x03,\r\n        0xa2,\r\n        0x5e,\r\n        0x15,\r\n        0x71,\r\n        0xdb,\r\n        0x48,\r\n        0xd3,\r\n        0x2e,\r\n        0xed,\r\n        0xed,\r\n        0xb2,\r\n        0x34,\r\n        0xdb,\r\n        0xb7,\r\n        0x47,\r\n        0x3a,\r\n        0x0c,\r\n        0x8f,\r\n        0xc4,\r\n        0xcc,\r\n        0xe1,\r\n        0x6f,\r\n        0x3c,\r\n        0x8c,\r\n        0x84,\r\n        0xdf,\r\n        0xab,\r\n        0xb6,\r\n        0x66,\r\n        0x3e,\r\n        0xf2,\r\n        0x0c,\r\n        0xd4,\r\n        0x8b,\r\n        0xfe,\r\n        0xe3,\r\n        0xf9,\r\n        0x76,\r\n        0x2f,\r\n        0x14,\r\n        0x1c,\r\n        0x63,\r\n        0x08,\r\n        0x6a,\r\n        0x6f,\r\n        0x2d,\r\n        0xb1,\r\n        0x1a,\r\n        0x95,\r\n        0xb0,\r\n        0xce,\r\n        0x37,\r\n        0xc0,\r\n        0x9c,\r\n        0x6e\r\n    ]);\r\n    var ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\r\n    var FN_CAMPAIGN_ID = 'google.c.a.c_id';\r\n    var FN_CAMPAIGN_NAME = 'google.c.a.c_l';\r\n    var FN_CAMPAIGN_TIME = 'google.c.a.ts';\r\n    /** Set to '1' if Analytics is enabled for the campaign */\r\n    var FN_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var MessageType;\r\n    (function (MessageType) {\r\n        MessageType[\"PUSH_MSG_RECEIVED\"] = \"push-msg-received\";\r\n        MessageType[\"NOTIFICATION_CLICKED\"] = \"notification-clicked\";\r\n    })(MessageType || (MessageType = {}));\n\n    /**\r\n     * @license\r\n     * Copyright 2018 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function isArrayBufferEqual(a, b) {\r\n        if (a == null || b == null) {\r\n            return false;\r\n        }\r\n        if (a === b) {\r\n            return true;\r\n        }\r\n        if (a.byteLength !== b.byteLength) {\r\n            return false;\r\n        }\r\n        var viewA = new DataView(a);\r\n        var viewB = new DataView(b);\r\n        for (var i = 0; i < a.byteLength; i++) {\r\n            if (viewA.getUint8(i) !== viewB.getUint8(i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function toBase64(arrayBuffer) {\r\n        var uint8Version = new Uint8Array(arrayBuffer);\r\n        return btoa(String.fromCharCode.apply(String, __spread(uint8Version)));\r\n    }\r\n    function arrayBufferToBase64(arrayBuffer) {\r\n        var base64String = toBase64(arrayBuffer);\r\n        return base64String\r\n            .replace(/=/g, '')\r\n            .replace(/\\+/g, '-')\r\n            .replace(/\\//g, '_');\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var SubscriptionManager = /** @class */ (function () {\r\n        function SubscriptionManager() {\r\n        }\r\n        SubscriptionManager.prototype.getToken = function (app, subscription, vapidKey) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var headers, body, subscribeOptions, responseData, response, err_1, message;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, getHeaders$1(app)];\r\n                        case 1:\r\n                            headers = _a.sent();\r\n                            body = getBody(subscription, vapidKey);\r\n                            subscribeOptions = {\r\n                                method: 'POST',\r\n                                headers: headers,\r\n                                body: JSON.stringify(body)\r\n                            };\r\n                            _a.label = 2;\r\n                        case 2:\r\n                            _a.trys.push([2, 5, , 6]);\r\n                            return [4 /*yield*/, fetch(getEndpoint(app), subscribeOptions)];\r\n                        case 3:\r\n                            response = _a.sent();\r\n                            return [4 /*yield*/, response.json()];\r\n                        case 4:\r\n                            responseData = _a.sent();\r\n                            return [3 /*break*/, 6];\r\n                        case 5:\r\n                            err_1 = _a.sent();\r\n                            throw errorFactory.create(\"token-subscribe-failed\" /* TOKEN_SUBSCRIBE_FAILED */, {\r\n                                errorInfo: err_1\r\n                            });\r\n                        case 6:\r\n                            if (responseData.error) {\r\n                                message = responseData.error.message;\r\n                                throw errorFactory.create(\"token-subscribe-failed\" /* TOKEN_SUBSCRIBE_FAILED */, {\r\n                                    errorInfo: message\r\n                                });\r\n                            }\r\n                            if (!responseData.token) {\r\n                                throw errorFactory.create(\"token-subscribe-no-token\" /* TOKEN_SUBSCRIBE_NO_TOKEN */);\r\n                            }\r\n                            return [2 /*return*/, responseData.token];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Update the underlying token details for fcmToken.\r\n         */\r\n        SubscriptionManager.prototype.updateToken = function (tokenDetails, app, subscription, vapidKey) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var headers, body, updateOptions, responseData, response, err_2, message;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, getHeaders$1(app)];\r\n                        case 1:\r\n                            headers = _a.sent();\r\n                            body = getBody(subscription, vapidKey);\r\n                            updateOptions = {\r\n                                method: 'PATCH',\r\n                                headers: headers,\r\n                                body: JSON.stringify(body)\r\n                            };\r\n                            _a.label = 2;\r\n                        case 2:\r\n                            _a.trys.push([2, 5, , 6]);\r\n                            return [4 /*yield*/, fetch(getEndpoint(app) + \"/\" + tokenDetails.fcmToken, updateOptions)];\r\n                        case 3:\r\n                            response = _a.sent();\r\n                            return [4 /*yield*/, response.json()];\r\n                        case 4:\r\n                            responseData = _a.sent();\r\n                            return [3 /*break*/, 6];\r\n                        case 5:\r\n                            err_2 = _a.sent();\r\n                            throw errorFactory.create(\"token-update-failed\" /* TOKEN_UPDATE_FAILED */, {\r\n                                errorInfo: err_2\r\n                            });\r\n                        case 6:\r\n                            if (responseData.error) {\r\n                                message = responseData.error.message;\r\n                                throw errorFactory.create(\"token-update-failed\" /* TOKEN_UPDATE_FAILED */, {\r\n                                    errorInfo: message\r\n                                });\r\n                            }\r\n                            if (!responseData.token) {\r\n                                throw errorFactory.create(\"token-update-no-token\" /* TOKEN_UPDATE_NO_TOKEN */);\r\n                            }\r\n                            return [2 /*return*/, responseData.token];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        SubscriptionManager.prototype.deleteToken = function (app, tokenDetails) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var headers, unsubscribeOptions, response, responseData, message, err_3;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, getHeaders$1(app)];\r\n                        case 1:\r\n                            headers = _a.sent();\r\n                            unsubscribeOptions = {\r\n                                method: 'DELETE',\r\n                                headers: headers\r\n                            };\r\n                            _a.label = 2;\r\n                        case 2:\r\n                            _a.trys.push([2, 5, , 6]);\r\n                            return [4 /*yield*/, fetch(getEndpoint(app) + \"/\" + tokenDetails.fcmToken, unsubscribeOptions)];\r\n                        case 3:\r\n                            response = _a.sent();\r\n                            return [4 /*yield*/, response.json()];\r\n                        case 4:\r\n                            responseData = _a.sent();\r\n                            if (responseData.error) {\r\n                                message = responseData.error.message;\r\n                                throw errorFactory.create(\"token-unsubscribe-failed\" /* TOKEN_UNSUBSCRIBE_FAILED */, {\r\n                                    errorInfo: message\r\n                                });\r\n                            }\r\n                            return [3 /*break*/, 6];\r\n                        case 5:\r\n                            err_3 = _a.sent();\r\n                            throw errorFactory.create(\"token-unsubscribe-failed\" /* TOKEN_UNSUBSCRIBE_FAILED */, {\r\n                                errorInfo: err_3\r\n                            });\r\n                        case 6: return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        return SubscriptionManager;\r\n    }());\r\n    function getEndpoint(app) {\r\n        return ENDPOINT + \"/projects/\" + app.options.projectId + \"/registrations\";\r\n    }\r\n    function getHeaders$1(app) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var installations, authToken;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        installations = app.installations();\r\n                        return [4 /*yield*/, installations.getToken()];\r\n                    case 1:\r\n                        authToken = _a.sent();\r\n                        return [2 /*return*/, new Headers({\r\n                                'Content-Type': 'application/json',\r\n                                Accept: 'application/json',\r\n                                'x-goog-api-key': app.options.apiKey,\r\n                                'x-goog-firebase-installations-auth': \"FIS \" + authToken\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function getBody(subscription, vapidKey) {\r\n        var p256dh = arrayBufferToBase64(subscription.getKey('p256dh'));\r\n        var auth = arrayBufferToBase64(subscription.getKey('auth'));\r\n        var body = {\r\n            web: {\r\n                endpoint: subscription.endpoint,\r\n                p256dh: p256dh,\r\n                auth: auth\r\n            }\r\n        };\r\n        if (!isArrayBufferEqual(vapidKey.buffer, DEFAULT_PUBLIC_VAPID_KEY.buffer)) {\r\n            body.web.applicationPubKey = arrayBufferToBase64(vapidKey);\r\n        }\r\n        return body;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function base64ToArrayBuffer(base64String) {\r\n        var padding = '='.repeat((4 - (base64String.length % 4)) % 4);\r\n        var base64 = (base64String + padding)\r\n            .replace(/\\-/g, '+')\r\n            .replace(/_/g, '/');\r\n        var rawData = atob(base64);\r\n        var outputArray = new Uint8Array(rawData.length);\r\n        for (var i = 0; i < rawData.length; ++i) {\r\n            outputArray[i] = rawData.charCodeAt(i);\r\n        }\r\n        return outputArray;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var OLD_DB_NAME = 'undefined';\r\n    var OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\r\n    function handleDb(db, app) {\r\n        if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\r\n            // We found a database with the name 'undefined', but our expected object\r\n            // store isn't defined.\r\n            return;\r\n        }\r\n        var transaction = db.transaction(OLD_OBJECT_STORE_NAME);\r\n        var objectStore = transaction.objectStore(OLD_OBJECT_STORE_NAME);\r\n        var subscriptionManager = new SubscriptionManager();\r\n        var openCursorRequest = objectStore.openCursor();\r\n        openCursorRequest.onerror = function (event) {\r\n            // NOOP - Nothing we can do.\r\n            console.warn('Unable to cleanup old IDB.', event);\r\n        };\r\n        openCursorRequest.onsuccess = function () {\r\n            var cursor = openCursorRequest.result;\r\n            if (cursor) {\r\n                // cursor.value contains the current record being iterated through\r\n                // this is where you'd do something with the result\r\n                var tokenDetails = cursor.value;\r\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                subscriptionManager.deleteToken(app, tokenDetails);\r\n                cursor.continue();\r\n            }\r\n            else {\r\n                db.close();\r\n                indexedDB.deleteDatabase(OLD_DB_NAME);\r\n            }\r\n        };\r\n    }\r\n    function cleanV1(app) {\r\n        var request = indexedDB.open(OLD_DB_NAME);\r\n        request.onerror = function (_event) {\r\n            // NOOP - Nothing we can do.\r\n        };\r\n        request.onsuccess = function (_event) {\r\n            var db = request.result;\r\n            handleDb(db, app);\r\n        };\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var DbInterface = /** @class */ (function () {\r\n        function DbInterface() {\r\n            this.dbPromise = null;\r\n        }\r\n        /** Gets record(s) from the objectStore that match the given key. */\r\n        DbInterface.prototype.get = function (key) {\r\n            return this.createTransaction(function (objectStore) { return objectStore.get(key); });\r\n        };\r\n        /** Gets record(s) from the objectStore that match the given index. */\r\n        DbInterface.prototype.getIndex = function (index, key) {\r\n            function runRequest(objectStore) {\r\n                var idbIndex = objectStore.index(index);\r\n                return idbIndex.get(key);\r\n            }\r\n            return this.createTransaction(runRequest);\r\n        };\r\n        /** Assigns or overwrites the record for the given value. */\r\n        // IndexedDB values are of type \"any\"\r\n        DbInterface.prototype.put = function (value) {\r\n            return this.createTransaction(function (objectStore) { return objectStore.put(value); }, 'readwrite');\r\n        };\r\n        /** Deletes record(s) from the objectStore that match the given key. */\r\n        DbInterface.prototype.delete = function (key) {\r\n            return this.createTransaction(function (objectStore) { return objectStore.delete(key); }, 'readwrite');\r\n        };\r\n        /**\r\n         * Close the currently open database.\r\n         */\r\n        DbInterface.prototype.closeDatabase = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var db;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            if (!this.dbPromise) return [3 /*break*/, 2];\r\n                            return [4 /*yield*/, this.dbPromise];\r\n                        case 1:\r\n                            db = _a.sent();\r\n                            db.close();\r\n                            this.dbPromise = null;\r\n                            _a.label = 2;\r\n                        case 2: return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Creates an IndexedDB Transaction and passes its objectStore to the\r\n         * runRequest function, which runs the database request.\r\n         *\r\n         * @return Promise that resolves with the result of the runRequest function\r\n         */\r\n        DbInterface.prototype.createTransaction = function (runRequest, mode) {\r\n            if (mode === void 0) { mode = 'readonly'; }\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var db, transaction, request, result;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.getDb()];\r\n                        case 1:\r\n                            db = _a.sent();\r\n                            transaction = db.transaction(this.objectStoreName, mode);\r\n                            request = transaction.objectStore(this.objectStoreName);\r\n                            return [4 /*yield*/, promisify(runRequest(request))];\r\n                        case 2:\r\n                            result = _a.sent();\r\n                            return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                                    transaction.oncomplete = function () {\r\n                                        resolve(result);\r\n                                    };\r\n                                    transaction.onerror = function () {\r\n                                        reject(transaction.error);\r\n                                    };\r\n                                })];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /** Gets the cached db connection or opens a new one. */\r\n        DbInterface.prototype.getDb = function () {\r\n            var _this = this;\r\n            if (!this.dbPromise) {\r\n                this.dbPromise = new Promise(function (resolve, reject) {\r\n                    var request = indexedDB.open(_this.dbName, _this.dbVersion);\r\n                    request.onsuccess = function () {\r\n                        resolve(request.result);\r\n                    };\r\n                    request.onerror = function () {\r\n                        _this.dbPromise = null;\r\n                        reject(request.error);\r\n                    };\r\n                    request.onupgradeneeded = function (event) { return _this.onDbUpgrade(request, event); };\r\n                });\r\n            }\r\n            return this.dbPromise;\r\n        };\r\n        return DbInterface;\r\n    }());\r\n    /** Promisifies an IDBRequest. Resolves with the IDBRequest's result. */\r\n    function promisify(request) {\r\n        return new Promise(function (resolve, reject) {\r\n            request.onsuccess = function () {\r\n                resolve(request.result);\r\n            };\r\n            request.onerror = function () {\r\n                reject(request.error);\r\n            };\r\n        });\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var TokenDetailsModel = /** @class */ (function (_super) {\r\n        __extends(TokenDetailsModel, _super);\r\n        function TokenDetailsModel(app) {\r\n            var _this = _super.call(this) || this;\r\n            _this.app = app;\r\n            _this.dbName = 'fcm_token_details_db';\r\n            _this.dbVersion = 4;\r\n            _this.objectStoreName = 'fcm_token_object_Store';\r\n            return _this;\r\n        }\r\n        TokenDetailsModel.prototype.onDbUpgrade = function (request, event) {\r\n            var db = request.result;\r\n            // Lack of 'break' statements is intentional.\r\n            switch (event.oldVersion) {\r\n                case 0: {\r\n                    // New IDB instance\r\n                    var objectStore = db.createObjectStore(this.objectStoreName, {\r\n                        keyPath: 'swScope'\r\n                    });\r\n                    // Make sure the sender ID can be searched\r\n                    objectStore.createIndex('fcmSenderId', 'fcmSenderId', {\r\n                        unique: false\r\n                    });\r\n                    objectStore.createIndex('fcmToken', 'fcmToken', { unique: true });\r\n                }\r\n                case 1: {\r\n                    // Prior to version 2, we were using either 'fcm_token_details_db'\r\n                    // or 'undefined' as the database name due to bug in the SDK\r\n                    // So remove the old tokens and databases.\r\n                    cleanV1(this.app);\r\n                }\r\n                case 2: {\r\n                    // Update from v2 to v4 directly in a single openCursor request.\r\n                    // We need to do this because for some reason, doing a subsequent update on the same data\r\n                    // in the same transaction drops the first update.\r\n                    var objectStore = request.transaction.objectStore(this.objectStoreName);\r\n                    var cursorRequest_1 = objectStore.openCursor();\r\n                    cursorRequest_1.onsuccess = function () {\r\n                        var cursor = cursorRequest_1.result;\r\n                        if (cursor) {\r\n                            var value = cursor.value;\r\n                            var newValue = __assign({}, value);\r\n                            if (!value.createTime) {\r\n                                newValue.createTime = Date.now();\r\n                            }\r\n                            if (typeof value.vapidKey === 'string') {\r\n                                newValue.vapidKey = base64ToArrayBuffer(value.vapidKey);\r\n                            }\r\n                            if (typeof value.auth === 'string') {\r\n                                newValue.auth = base64ToArrayBuffer(value.auth).buffer;\r\n                            }\r\n                            if (typeof value.auth === 'string') {\r\n                                newValue.p256dh = base64ToArrayBuffer(value.p256dh).buffer;\r\n                            }\r\n                            if (typeof value.fcmPushSet === 'string') {\r\n                                delete newValue.fcmPushSet;\r\n                            }\r\n                            cursor.update(newValue);\r\n                            cursor.continue();\r\n                        }\r\n                    };\r\n                    // Break here as we've already updated to v4.\r\n                    break;\r\n                }\r\n                case 3: {\r\n                    // Update from V3 to V4.\r\n                    var objectStore = request.transaction.objectStore(this.objectStoreName);\r\n                    var cursorRequest_2 = objectStore.openCursor();\r\n                    cursorRequest_2.onsuccess = function () {\r\n                        var cursor = cursorRequest_2.result;\r\n                        if (cursor) {\r\n                            var value = cursor.value;\r\n                            var newValue = __assign({}, value);\r\n                            if (typeof value.fcmPushSet === 'string') {\r\n                                delete newValue.fcmPushSet;\r\n                            }\r\n                            cursor.update(newValue);\r\n                            cursor.continue();\r\n                        }\r\n                    };\r\n                }\r\n                default: // ignore\r\n            }\r\n        };\r\n        /**\r\n         * Given a token, this method will look up the details in indexedDB.\r\n         */\r\n        TokenDetailsModel.prototype.getTokenDetailsFromToken = function (fcmToken) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    if (!fcmToken) {\r\n                        throw errorFactory.create(\"bad-token\" /* BAD_TOKEN */);\r\n                    }\r\n                    validateInputs({ fcmToken: fcmToken });\r\n                    return [2 /*return*/, this.getIndex('fcmToken', fcmToken)];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Given a service worker scope, this method will look up the details in\r\n         * indexedDB.\r\n         * @return The details associated with that token.\r\n         */\r\n        TokenDetailsModel.prototype.getTokenDetailsFromSWScope = function (swScope) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    if (!swScope) {\r\n                        throw errorFactory.create(\"bad-scope\" /* BAD_SCOPE */);\r\n                    }\r\n                    validateInputs({ swScope: swScope });\r\n                    return [2 /*return*/, this.get(swScope)];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Save the details for the fcm token for re-use at a later date.\r\n         * @param input A plain js object containing args to save.\r\n         */\r\n        TokenDetailsModel.prototype.saveTokenDetails = function (tokenDetails) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    if (!tokenDetails.swScope) {\r\n                        throw errorFactory.create(\"bad-scope\" /* BAD_SCOPE */);\r\n                    }\r\n                    if (!tokenDetails.vapidKey) {\r\n                        throw errorFactory.create(\"bad-vapid-key\" /* BAD_VAPID_KEY */);\r\n                    }\r\n                    if (!tokenDetails.endpoint || !tokenDetails.auth || !tokenDetails.p256dh) {\r\n                        throw errorFactory.create(\"bad-subscription\" /* BAD_SUBSCRIPTION */);\r\n                    }\r\n                    if (!tokenDetails.fcmSenderId) {\r\n                        throw errorFactory.create(\"bad-sender-id\" /* BAD_SENDER_ID */);\r\n                    }\r\n                    if (!tokenDetails.fcmToken) {\r\n                        throw errorFactory.create(\"bad-token\" /* BAD_TOKEN */);\r\n                    }\r\n                    validateInputs(tokenDetails);\r\n                    return [2 /*return*/, this.put(tokenDetails)];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This method deletes details of the current FCM token.\r\n         * It's returning a promise in case we need to move to an async\r\n         * method for deleting at a later date.\r\n         *\r\n         * @return Resolves once the FCM token details have been deleted and returns\r\n         * the deleted details.\r\n         */\r\n        TokenDetailsModel.prototype.deleteToken = function (token) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var details;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            if (typeof token !== 'string' || token.length === 0) {\r\n                                return [2 /*return*/, Promise.reject(errorFactory.create(\"invalid-delete-token\" /* INVALID_DELETE_TOKEN */))];\r\n                            }\r\n                            return [4 /*yield*/, this.getTokenDetailsFromToken(token)];\r\n                        case 1:\r\n                            details = _a.sent();\r\n                            if (!details) {\r\n                                throw errorFactory.create(\"delete-token-not-found\" /* DELETE_TOKEN_NOT_FOUND */);\r\n                            }\r\n                            return [4 /*yield*/, this.delete(details.swScope)];\r\n                        case 2:\r\n                            _a.sent();\r\n                            return [2 /*return*/, details];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        return TokenDetailsModel;\r\n    }(DbInterface));\r\n    /**\r\n     * This method takes an object and will check for known arguments and\r\n     * validate the input.\r\n     * @return Promise that resolves if input is valid, rejects otherwise.\r\n     */\r\n    function validateInputs(input) {\r\n        if (input.fcmToken) {\r\n            if (typeof input.fcmToken !== 'string' || input.fcmToken.length === 0) {\r\n                throw errorFactory.create(\"bad-token\" /* BAD_TOKEN */);\r\n            }\r\n        }\r\n        if (input.swScope) {\r\n            if (typeof input.swScope !== 'string' || input.swScope.length === 0) {\r\n                throw errorFactory.create(\"bad-scope\" /* BAD_SCOPE */);\r\n            }\r\n        }\r\n        if (input.vapidKey) {\r\n            if (!(input.vapidKey instanceof Uint8Array) ||\r\n                input.vapidKey.length !== 65) {\r\n                throw errorFactory.create(\"bad-vapid-key\" /* BAD_VAPID_KEY */);\r\n            }\r\n        }\r\n        if (input.endpoint) {\r\n            if (typeof input.endpoint !== 'string' || input.endpoint.length === 0) {\r\n                throw errorFactory.create(\"bad-subscription\" /* BAD_SUBSCRIPTION */);\r\n            }\r\n        }\r\n        if (input.auth) {\r\n            if (!(input.auth instanceof ArrayBuffer)) {\r\n                throw errorFactory.create(\"bad-subscription\" /* BAD_SUBSCRIPTION */);\r\n            }\r\n        }\r\n        if (input.p256dh) {\r\n            if (!(input.p256dh instanceof ArrayBuffer)) {\r\n                throw errorFactory.create(\"bad-subscription\" /* BAD_SUBSCRIPTION */);\r\n            }\r\n        }\r\n        if (input.fcmSenderId) {\r\n            if (typeof input.fcmSenderId !== 'string' ||\r\n                input.fcmSenderId.length === 0) {\r\n                throw errorFactory.create(\"bad-sender-id\" /* BAD_SENDER_ID */);\r\n            }\r\n        }\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var UNCOMPRESSED_PUBLIC_KEY_SIZE = 65;\r\n    var VapidDetailsModel = /** @class */ (function (_super) {\r\n        __extends(VapidDetailsModel, _super);\r\n        function VapidDetailsModel() {\r\n            var _this = _super !== null && _super.apply(this, arguments) || this;\r\n            _this.dbName = 'fcm_vapid_details_db';\r\n            _this.dbVersion = 1;\r\n            _this.objectStoreName = 'fcm_vapid_object_Store';\r\n            return _this;\r\n        }\r\n        VapidDetailsModel.prototype.onDbUpgrade = function (request) {\r\n            var db = request.result;\r\n            db.createObjectStore(this.objectStoreName, { keyPath: 'swScope' });\r\n        };\r\n        /**\r\n         * Given a service worker scope, this method will look up the vapid key\r\n         * in indexedDB.\r\n         */\r\n        VapidDetailsModel.prototype.getVapidFromSWScope = function (swScope) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var result;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            if (typeof swScope !== 'string' || swScope.length === 0) {\r\n                                throw errorFactory.create(\"bad-scope\" /* BAD_SCOPE */);\r\n                            }\r\n                            return [4 /*yield*/, this.get(swScope)];\r\n                        case 1:\r\n                            result = _a.sent();\r\n                            return [2 /*return*/, result ? result.vapidKey : undefined];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Save a vapid key against a swScope for later date.\r\n         */\r\n        VapidDetailsModel.prototype.saveVapidDetails = function (swScope, vapidKey) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var details;\r\n                return __generator(this, function (_a) {\r\n                    if (typeof swScope !== 'string' || swScope.length === 0) {\r\n                        throw errorFactory.create(\"bad-scope\" /* BAD_SCOPE */);\r\n                    }\r\n                    if (vapidKey === null || vapidKey.length !== UNCOMPRESSED_PUBLIC_KEY_SIZE) {\r\n                        throw errorFactory.create(\"bad-vapid-key\" /* BAD_VAPID_KEY */);\r\n                    }\r\n                    details = {\r\n                        swScope: swScope,\r\n                        vapidKey: vapidKey\r\n                    };\r\n                    return [2 /*return*/, this.put(details)];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This method deletes details of the current FCM VAPID key for a SW scope.\r\n         * Resolves once the scope/vapid details have been deleted and returns the\r\n         * deleted vapid key.\r\n         */\r\n        VapidDetailsModel.prototype.deleteVapidDetails = function (swScope) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var vapidKey;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.getVapidFromSWScope(swScope)];\r\n                        case 1:\r\n                            vapidKey = _a.sent();\r\n                            if (!vapidKey) {\r\n                                throw errorFactory.create(\"delete-scope-not-found\" /* DELETE_SCOPE_NOT_FOUND */);\r\n                            }\r\n                            return [4 /*yield*/, this.delete(swScope)];\r\n                        case 2:\r\n                            _a.sent();\r\n                            return [2 /*return*/, vapidKey];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        return VapidDetailsModel;\r\n    }(DbInterface));\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    // Token should be refreshed once a week.\r\n    var TOKEN_EXPIRATION_MILLIS = 7 * 24 * 60 * 60 * 1000; // 7 days\r\n    var BaseController = /** @class */ (function () {\r\n        function BaseController(app) {\r\n            var _this = this;\r\n            this.app = app;\r\n            this.vapidDetailsModel = new VapidDetailsModel();\r\n            this.subscriptionManager = new SubscriptionManager();\r\n            if (!app.options.messagingSenderId ||\r\n                typeof app.options.messagingSenderId !== 'string') {\r\n                throw errorFactory.create(\"bad-sender-id\" /* BAD_SENDER_ID */);\r\n            }\r\n            this.INTERNAL = {\r\n                delete: function () { return _this.delete(); }\r\n            };\r\n            this.tokenDetailsModel = new TokenDetailsModel(app);\r\n        }\r\n        BaseController.prototype.getToken = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var currentPermission, swReg, publicVapidKey, pushSubscription, tokenDetails;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            currentPermission = this.getNotificationPermission_();\r\n                            if (currentPermission === 'denied') {\r\n                                throw errorFactory.create(\"notifications-blocked\" /* NOTIFICATIONS_BLOCKED */);\r\n                            }\r\n                            else if (currentPermission !== 'granted') {\r\n                                // We must wait for permission to be granted\r\n                                return [2 /*return*/, null];\r\n                            }\r\n                            return [4 /*yield*/, this.getSWRegistration_()];\r\n                        case 1:\r\n                            swReg = _a.sent();\r\n                            return [4 /*yield*/, this.getPublicVapidKey_()];\r\n                        case 2:\r\n                            publicVapidKey = _a.sent();\r\n                            return [4 /*yield*/, this.getPushSubscription(swReg, publicVapidKey)];\r\n                        case 3:\r\n                            pushSubscription = _a.sent();\r\n                            return [4 /*yield*/, this.tokenDetailsModel.getTokenDetailsFromSWScope(swReg.scope)];\r\n                        case 4:\r\n                            tokenDetails = _a.sent();\r\n                            if (tokenDetails) {\r\n                                return [2 /*return*/, this.manageExistingToken(swReg, pushSubscription, publicVapidKey, tokenDetails)];\r\n                            }\r\n                            return [2 /*return*/, this.getNewToken(swReg, pushSubscription, publicVapidKey)];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * manageExistingToken is triggered if there's an existing FCM token in the\r\n         * database and it can take 3 different actions:\r\n         * 1) Retrieve the existing FCM token from the database.\r\n         * 2) If VAPID details have changed: Delete the existing token and create a\r\n         * new one with the new VAPID key.\r\n         * 3) If the database cache is invalidated: Send a request to FCM to update\r\n         * the token, and to check if the token is still valid on FCM-side.\r\n         */\r\n        BaseController.prototype.manageExistingToken = function (swReg, pushSubscription, publicVapidKey, tokenDetails) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var isTokenValid, now;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            isTokenValid = isTokenStillValid(pushSubscription, publicVapidKey, tokenDetails);\r\n                            if (!isTokenValid) return [3 /*break*/, 1];\r\n                            now = Date.now();\r\n                            if (now < tokenDetails.createTime + TOKEN_EXPIRATION_MILLIS) {\r\n                                return [2 /*return*/, tokenDetails.fcmToken];\r\n                            }\r\n                            else {\r\n                                return [2 /*return*/, this.updateToken(swReg, pushSubscription, publicVapidKey, tokenDetails)];\r\n                            }\r\n                            return [3 /*break*/, 3];\r\n                        case 1: \r\n                        // If the token is no longer valid (for example if the VAPID details\r\n                        // have changed), delete the existing token from the FCM client and server\r\n                        // database. No need to unsubscribe from the Service Worker as we have a\r\n                        // good push subscription that we'd like to use in getNewToken.\r\n                        return [4 /*yield*/, this.deleteTokenFromDB(tokenDetails.fcmToken)];\r\n                        case 2:\r\n                            // If the token is no longer valid (for example if the VAPID details\r\n                            // have changed), delete the existing token from the FCM client and server\r\n                            // database. No need to unsubscribe from the Service Worker as we have a\r\n                            // good push subscription that we'd like to use in getNewToken.\r\n                            _a.sent();\r\n                            return [2 /*return*/, this.getNewToken(swReg, pushSubscription, publicVapidKey)];\r\n                        case 3: return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        BaseController.prototype.updateToken = function (swReg, pushSubscription, publicVapidKey, tokenDetails) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var updatedToken, allDetails, e_1;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            _a.trys.push([0, 4, , 6]);\r\n                            return [4 /*yield*/, this.subscriptionManager.updateToken(tokenDetails, this.app, pushSubscription, publicVapidKey)];\r\n                        case 1:\r\n                            updatedToken = _a.sent();\r\n                            allDetails = {\r\n                                swScope: swReg.scope,\r\n                                vapidKey: publicVapidKey,\r\n                                fcmSenderId: this.app.options.messagingSenderId,\r\n                                fcmToken: updatedToken,\r\n                                createTime: Date.now(),\r\n                                endpoint: pushSubscription.endpoint,\r\n                                auth: pushSubscription.getKey('auth'),\r\n                                p256dh: pushSubscription.getKey('p256dh')\r\n                            };\r\n                            return [4 /*yield*/, this.tokenDetailsModel.saveTokenDetails(allDetails)];\r\n                        case 2:\r\n                            _a.sent();\r\n                            return [4 /*yield*/, this.vapidDetailsModel.saveVapidDetails(swReg.scope, publicVapidKey)];\r\n                        case 3:\r\n                            _a.sent();\r\n                            return [2 /*return*/, updatedToken];\r\n                        case 4:\r\n                            e_1 = _a.sent();\r\n                            return [4 /*yield*/, this.deleteToken(tokenDetails.fcmToken)];\r\n                        case 5:\r\n                            _a.sent();\r\n                            throw e_1;\r\n                        case 6: return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        BaseController.prototype.getNewToken = function (swReg, pushSubscription, publicVapidKey) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var newToken, allDetails;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.subscriptionManager.getToken(this.app, pushSubscription, publicVapidKey)];\r\n                        case 1:\r\n                            newToken = _a.sent();\r\n                            allDetails = {\r\n                                swScope: swReg.scope,\r\n                                vapidKey: publicVapidKey,\r\n                                fcmSenderId: this.app.options.messagingSenderId,\r\n                                fcmToken: newToken,\r\n                                createTime: Date.now(),\r\n                                endpoint: pushSubscription.endpoint,\r\n                                auth: pushSubscription.getKey('auth'),\r\n                                p256dh: pushSubscription.getKey('p256dh')\r\n                            };\r\n                            return [4 /*yield*/, this.tokenDetailsModel.saveTokenDetails(allDetails)];\r\n                        case 2:\r\n                            _a.sent();\r\n                            return [4 /*yield*/, this.vapidDetailsModel.saveVapidDetails(swReg.scope, publicVapidKey)];\r\n                        case 3:\r\n                            _a.sent();\r\n                            return [2 /*return*/, newToken];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This method deletes tokens that the token manager looks after,\r\n         * unsubscribes the token from FCM  and then unregisters the push\r\n         * subscription if it exists. It returns a promise that indicates\r\n         * whether or not the unsubscribe request was processed successfully.\r\n         */\r\n        BaseController.prototype.deleteToken = function (token) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var registration, pushSubscription;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: \r\n                        // Delete the token details from the database.\r\n                        return [4 /*yield*/, this.deleteTokenFromDB(token)];\r\n                        case 1:\r\n                            // Delete the token details from the database.\r\n                            _a.sent();\r\n                            return [4 /*yield*/, this.getSWRegistration_()];\r\n                        case 2:\r\n                            registration = _a.sent();\r\n                            if (!registration) return [3 /*break*/, 4];\r\n                            return [4 /*yield*/, registration.pushManager.getSubscription()];\r\n                        case 3:\r\n                            pushSubscription = _a.sent();\r\n                            if (pushSubscription) {\r\n                                return [2 /*return*/, pushSubscription.unsubscribe()];\r\n                            }\r\n                            _a.label = 4;\r\n                        case 4: \r\n                        // If there's no SW, consider it a success.\r\n                        return [2 /*return*/, true];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This method will delete the token from the client database, and make a\r\n         * call to FCM to remove it from the server DB. Does not temper with the\r\n         * push subscription.\r\n         */\r\n        BaseController.prototype.deleteTokenFromDB = function (token) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var tokenDetails;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.tokenDetailsModel.deleteToken(token)];\r\n                        case 1:\r\n                            tokenDetails = _a.sent();\r\n                            return [4 /*yield*/, this.subscriptionManager.deleteToken(this.app, tokenDetails)];\r\n                        case 2:\r\n                            _a.sent();\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a PushSubscription for the current user.\r\n         */\r\n        BaseController.prototype.getPushSubscription = function (swRegistration, publicVapidKey) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var subscription;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, swRegistration.pushManager.getSubscription()];\r\n                        case 1:\r\n                            subscription = _a.sent();\r\n                            if (subscription) {\r\n                                return [2 /*return*/, subscription];\r\n                            }\r\n                            return [2 /*return*/, swRegistration.pushManager.subscribe({\r\n                                    userVisibleOnly: true,\r\n                                    applicationServerKey: publicVapidKey\r\n                                })];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        //\r\n        // The following methods should only be available in the window.\r\n        //\r\n        /**\r\n         * @deprecated Use Notification.requestPermission() instead.\r\n         * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\r\n         */\r\n        BaseController.prototype.requestPermission = function () {\r\n            throw errorFactory.create(\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */);\r\n        };\r\n        BaseController.prototype.useServiceWorker = function (_registration) {\r\n            throw errorFactory.create(\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */);\r\n        };\r\n        BaseController.prototype.usePublicVapidKey = function (_b64PublicKey) {\r\n            throw errorFactory.create(\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */);\r\n        };\r\n        BaseController.prototype.onMessage = function (_nextOrObserver, _error, _completed) {\r\n            throw errorFactory.create(\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */);\r\n        };\r\n        BaseController.prototype.onTokenRefresh = function (_nextOrObserver, _error, _completed) {\r\n            throw errorFactory.create(\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */);\r\n        };\r\n        //\r\n        // The following methods are used by the service worker only.\r\n        //\r\n        BaseController.prototype.setBackgroundMessageHandler = function (_callback) {\r\n            throw errorFactory.create(\"only-available-in-sw\" /* AVAILABLE_IN_SW */);\r\n        };\r\n        //\r\n        // The following methods are used by the service themselves and not exposed\r\n        // publicly or not expected to be used by developers.\r\n        //\r\n        /**\r\n         * This method is required to adhere to the Firebase interface.\r\n         * It closes any currently open indexdb database connections.\r\n         */\r\n        BaseController.prototype.delete = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, Promise.all([\r\n                                this.tokenDetailsModel.closeDatabase(),\r\n                                this.vapidDetailsModel.closeDatabase()\r\n                            ])];\r\n                        case 1:\r\n                            _a.sent();\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Returns the current Notification Permission state.\r\n         */\r\n        BaseController.prototype.getNotificationPermission_ = function () {\r\n            return Notification.permission;\r\n        };\r\n        BaseController.prototype.getTokenDetailsModel = function () {\r\n            return this.tokenDetailsModel;\r\n        };\r\n        BaseController.prototype.getVapidDetailsModel = function () {\r\n            return this.vapidDetailsModel;\r\n        };\r\n        // Visible for testing\r\n        // TODO: make protected\r\n        BaseController.prototype.getSubscriptionManager = function () {\r\n            return this.subscriptionManager;\r\n        };\r\n        return BaseController;\r\n    }());\r\n    /**\r\n     * Checks if the tokenDetails match the details provided in the clients.\r\n     */\r\n    function isTokenStillValid(pushSubscription, publicVapidKey, tokenDetails) {\r\n        if (!tokenDetails.vapidKey ||\r\n            !isArrayBufferEqual(publicVapidKey.buffer, tokenDetails.vapidKey.buffer)) {\r\n            return false;\r\n        }\r\n        var isEndpointEqual = pushSubscription.endpoint === tokenDetails.endpoint;\r\n        var isAuthEqual = isArrayBufferEqual(pushSubscription.getKey('auth'), tokenDetails.auth);\r\n        var isP256dhEqual = isArrayBufferEqual(pushSubscription.getKey('p256dh'), tokenDetails.p256dh);\r\n        return isEndpointEqual && isAuthEqual && isP256dhEqual;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var FCM_MSG = 'FCM_MSG';\r\n    var SwController = /** @class */ (function (_super) {\r\n        __extends(SwController, _super);\r\n        function SwController(app) {\r\n            var _this = _super.call(this, app) || this;\r\n            _this.bgMessageHandler = null;\r\n            self.addEventListener('push', function (e) {\r\n                _this.onPush(e);\r\n            });\r\n            self.addEventListener('pushsubscriptionchange', function (e) {\r\n                _this.onSubChange(e);\r\n            });\r\n            self.addEventListener('notificationclick', function (e) {\r\n                _this.onNotificationClick(e);\r\n            });\r\n            return _this;\r\n        }\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        SwController.prototype.onPush = function (event) {\r\n            event.waitUntil(this.onPush_(event));\r\n        };\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        SwController.prototype.onSubChange = function (event) {\r\n            event.waitUntil(this.onSubChange_(event));\r\n        };\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        SwController.prototype.onNotificationClick = function (event) {\r\n            event.waitUntil(this.onNotificationClick_(event));\r\n        };\r\n        /**\r\n         * A handler for push events that shows notifications based on the content of\r\n         * the payload.\r\n         *\r\n         * The payload must be a JSON-encoded Object with a `notification` key. The\r\n         * value of the `notification` property will be used as the NotificationOptions\r\n         * object passed to showNotification. Additionally, the `title` property of the\r\n         * notification object will be used as the title.\r\n         *\r\n         * If there is no notification data in the payload then no notification will be\r\n         * shown.\r\n         */\r\n        SwController.prototype.onPush_ = function (event) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var msgPayload, hasVisibleClients, notificationDetails, notificationTitle, reg, actions, maxActions;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            if (!event.data) {\r\n                                return [2 /*return*/];\r\n                            }\r\n                            try {\r\n                                msgPayload = event.data.json();\r\n                            }\r\n                            catch (err) {\r\n                                // Not JSON so not an FCM message\r\n                                return [2 /*return*/];\r\n                            }\r\n                            return [4 /*yield*/, this.hasVisibleClients_()];\r\n                        case 1:\r\n                            hasVisibleClients = _a.sent();\r\n                            if (hasVisibleClients) {\r\n                                // App in foreground. Send to page.\r\n                                return [2 /*return*/, this.sendMessageToWindowClients_(msgPayload)];\r\n                            }\r\n                            notificationDetails = this.getNotificationData_(msgPayload);\r\n                            if (!notificationDetails) return [3 /*break*/, 3];\r\n                            notificationTitle = notificationDetails.title || '';\r\n                            return [4 /*yield*/, this.getSWRegistration_()];\r\n                        case 2:\r\n                            reg = _a.sent();\r\n                            actions = notificationDetails.actions;\r\n                            maxActions = Notification.maxActions;\r\n                            if (actions && maxActions && actions.length > maxActions) {\r\n                                console.warn(\"This browser only supports \" + maxActions + \" actions.\" +\r\n                                    \"The remaining actions will not be displayed.\");\r\n                            }\r\n                            return [2 /*return*/, reg.showNotification(notificationTitle, notificationDetails)];\r\n                        case 3:\r\n                            if (!this.bgMessageHandler) return [3 /*break*/, 5];\r\n                            return [4 /*yield*/, this.bgMessageHandler(msgPayload)];\r\n                        case 4:\r\n                            _a.sent();\r\n                            return [2 /*return*/];\r\n                        case 5: return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        SwController.prototype.onSubChange_ = function (_event) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var registration, err_1, err_2, tokenDetailsModel, tokenDetails;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            _a.trys.push([0, 2, , 3]);\r\n                            return [4 /*yield*/, this.getSWRegistration_()];\r\n                        case 1:\r\n                            registration = _a.sent();\r\n                            return [3 /*break*/, 3];\r\n                        case 2:\r\n                            err_1 = _a.sent();\r\n                            throw errorFactory.create(\"unable-to-resubscribe\" /* UNABLE_TO_RESUBSCRIBE */, {\r\n                                errorInfo: err_1\r\n                            });\r\n                        case 3:\r\n                            _a.trys.push([3, 5, , 8]);\r\n                            return [4 /*yield*/, registration.pushManager.getSubscription()];\r\n                        case 4:\r\n                            _a.sent();\r\n                            return [3 /*break*/, 8];\r\n                        case 5:\r\n                            err_2 = _a.sent();\r\n                            tokenDetailsModel = this.getTokenDetailsModel();\r\n                            return [4 /*yield*/, tokenDetailsModel.getTokenDetailsFromSWScope(registration.scope)];\r\n                        case 6:\r\n                            tokenDetails = _a.sent();\r\n                            if (!tokenDetails) {\r\n                                // This should rarely occure, but could if indexedDB\r\n                                // is corrupted or wiped\r\n                                throw err_2;\r\n                            }\r\n                            // Attempt to delete the token if we know it's bad\r\n                            return [4 /*yield*/, this.deleteToken(tokenDetails.fcmToken)];\r\n                        case 7:\r\n                            // Attempt to delete the token if we know it's bad\r\n                            _a.sent();\r\n                            throw err_2;\r\n                        case 8: return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        SwController.prototype.onNotificationClick_ = function (event) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var msgPayload, link, windowClient, internalMsg;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            if (!event.notification ||\r\n                                !event.notification.data ||\r\n                                !event.notification.data[FCM_MSG]) {\r\n                                // Not an FCM notification, do nothing.\r\n                                return [2 /*return*/];\r\n                            }\r\n                            else if (event.action) {\r\n                                // User clicked on an action button.\r\n                                // This will allow devs to act on action button clicks by using a custom\r\n                                // onNotificationClick listener that they define.\r\n                                return [2 /*return*/];\r\n                            }\r\n                            // Prevent other listeners from receiving the event\r\n                            event.stopImmediatePropagation();\r\n                            event.notification.close();\r\n                            msgPayload = event.notification.data[FCM_MSG];\r\n                            if (!msgPayload.notification) {\r\n                                // Nothing to do.\r\n                                return [2 /*return*/];\r\n                            }\r\n                            link = (msgPayload.fcmOptions && msgPayload.fcmOptions.link) ||\r\n                                msgPayload.notification.click_action;\r\n                            if (!link) {\r\n                                if (msgPayload.data && FN_CAMPAIGN_ID in msgPayload.data) {\r\n                                    link = self.location.origin;\r\n                                }\r\n                                else {\r\n                                    // Nothing to do.\r\n                                    return [2 /*return*/];\r\n                                }\r\n                            }\r\n                            return [4 /*yield*/, this.getWindowClient_(link)];\r\n                        case 1:\r\n                            windowClient = _a.sent();\r\n                            if (!!windowClient) return [3 /*break*/, 4];\r\n                            return [4 /*yield*/, self.clients.openWindow(link)];\r\n                        case 2:\r\n                            // Unable to find window client so need to open one.\r\n                            windowClient = _a.sent();\r\n                            // Wait three seconds for the client to initialize and set up the message\r\n                            // handler so that it can receive the message.\r\n                            return [4 /*yield*/, sleep$1(3000)];\r\n                        case 3:\r\n                            // Wait three seconds for the client to initialize and set up the message\r\n                            // handler so that it can receive the message.\r\n                            _a.sent();\r\n                            return [3 /*break*/, 6];\r\n                        case 4: return [4 /*yield*/, windowClient.focus()];\r\n                        case 5:\r\n                            windowClient = _a.sent();\r\n                            _a.label = 6;\r\n                        case 6:\r\n                            if (!windowClient) {\r\n                                // Window Client will not be returned if it's for a third party origin.\r\n                                return [2 /*return*/];\r\n                            }\r\n                            // Delete notification and fcmOptions data from payload before sending to\r\n                            // the page.\r\n                            delete msgPayload.notification;\r\n                            delete msgPayload.fcmOptions;\r\n                            internalMsg = createNewMsg(MessageType.NOTIFICATION_CLICKED, msgPayload);\r\n                            // Attempt to send a message to the client to handle the data\r\n                            // Is affected by: https://github.com/slightlyoff/ServiceWorker/issues/728\r\n                            return [2 /*return*/, this.attemptToMessageClient_(windowClient, internalMsg)];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        SwController.prototype.getNotificationData_ = function (msgPayload) {\r\n            var _a;\r\n            if (!msgPayload) {\r\n                return;\r\n            }\r\n            if (typeof msgPayload.notification !== 'object') {\r\n                return;\r\n            }\r\n            var notificationInformation = __assign({}, msgPayload.notification);\r\n            // Put the message payload under FCM_MSG name so we can identify the\r\n            // notification as being an FCM notification vs a notification from\r\n            // somewhere else (i.e. normal web push or developer generated\r\n            // notification).\r\n            notificationInformation.data = __assign({}, msgPayload.notification.data, (_a = {}, _a[FCM_MSG] = msgPayload, _a));\r\n            return notificationInformation;\r\n        };\r\n        /**\r\n         * Calling setBackgroundMessageHandler will opt in to some specific\r\n         * behaviours.\r\n         * 1.) If a notification doesn't need to be shown due to a window already\r\n         * being visible, then push messages will be sent to the page.\r\n         * 2.) If a notification needs to be shown, and the message contains no\r\n         * notification data this method will be called\r\n         * and the promise it returns will be passed to event.waitUntil.\r\n         * If you do not set this callback then all push messages will let and the\r\n         * developer can handle them in a their own 'push' event callback\r\n         *\r\n         * @param callback The callback to be called when a push message is received\r\n         * and a notification must be shown. The callback will be given the data from\r\n         * the push message.\r\n         */\r\n        SwController.prototype.setBackgroundMessageHandler = function (callback) {\r\n            if (!callback || typeof callback !== 'function') {\r\n                throw errorFactory.create(\"bg-handler-function-expected\" /* BG_HANDLER_FUNCTION_EXPECTED */);\r\n            }\r\n            this.bgMessageHandler = callback;\r\n        };\r\n        /**\r\n         * @param url The URL to look for when focusing a client.\r\n         * @return Returns an existing window client or a newly opened WindowClient.\r\n         */\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        SwController.prototype.getWindowClient_ = function (url) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var parsedURL, clientList, suitableClient, i, parsedClientUrl;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            parsedURL = new URL(url, self.location.href).href;\r\n                            return [4 /*yield*/, getClientList()];\r\n                        case 1:\r\n                            clientList = _a.sent();\r\n                            suitableClient = null;\r\n                            for (i = 0; i < clientList.length; i++) {\r\n                                parsedClientUrl = new URL(clientList[i].url, self.location.href)\r\n                                    .href;\r\n                                if (parsedClientUrl === parsedURL) {\r\n                                    suitableClient = clientList[i];\r\n                                    break;\r\n                                }\r\n                            }\r\n                            return [2 /*return*/, suitableClient];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This message will attempt to send the message to a window client.\r\n         * @param client The WindowClient to send the message to.\r\n         * @param message The message to send to the client.\r\n         * @returns Returns a promise that resolves after sending the message. This\r\n         * does not guarantee that the message was successfully received.\r\n         */\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        SwController.prototype.attemptToMessageClient_ = function (client, message) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    // NOTE: This returns a promise in case this API is abstracted later on to\r\n                    // do additional work\r\n                    if (!client) {\r\n                        throw errorFactory.create(\"no-window-client-to-msg\" /* NO_WINDOW_CLIENT_TO_MSG */);\r\n                    }\r\n                    client.postMessage(message);\r\n                    return [2 /*return*/];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * @returns If there is currently a visible WindowClient, this method will\r\n         * resolve to true, otherwise false.\r\n         */\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        SwController.prototype.hasVisibleClients_ = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var clientList;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, getClientList()];\r\n                        case 1:\r\n                            clientList = _a.sent();\r\n                            return [2 /*return*/, clientList.some(function (client) {\r\n                                    return client.visibilityState === 'visible' &&\r\n                                        // Ignore chrome-extension clients as that matches the background pages\r\n                                        // of extensions, which are always considered visible.\r\n                                        !client.url.startsWith('chrome-extension://');\r\n                                })];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * @param msgPayload The data from the push event that should be sent to all\r\n         * available pages.\r\n         * @returns Returns a promise that resolves once the message has been sent to\r\n         * all WindowClients.\r\n         */\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        SwController.prototype.sendMessageToWindowClients_ = function (msgPayload) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var clientList, internalMsg;\r\n                var _this = this;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, getClientList()];\r\n                        case 1:\r\n                            clientList = _a.sent();\r\n                            internalMsg = createNewMsg(MessageType.PUSH_MSG_RECEIVED, msgPayload);\r\n                            return [4 /*yield*/, Promise.all(clientList.map(function (client) {\r\n                                    return _this.attemptToMessageClient_(client, internalMsg);\r\n                                }))];\r\n                        case 2:\r\n                            _a.sent();\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This will register the default service worker and return the registration.\r\n         * @return he service worker registration to be used for the push service.\r\n         */\r\n        SwController.prototype.getSWRegistration_ = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, self.registration];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This will return the default VAPID key or the uint8array version of the\r\n         * public VAPID key provided by the developer.\r\n         */\r\n        SwController.prototype.getPublicVapidKey_ = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var swReg, vapidKeyFromDatabase;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.getSWRegistration_()];\r\n                        case 1:\r\n                            swReg = _a.sent();\r\n                            if (!swReg) {\r\n                                throw errorFactory.create(\"sw-registration-expected\" /* SW_REGISTRATION_EXPECTED */);\r\n                            }\r\n                            return [4 /*yield*/, this.getVapidDetailsModel().getVapidFromSWScope(swReg.scope)];\r\n                        case 2:\r\n                            vapidKeyFromDatabase = _a.sent();\r\n                            if (vapidKeyFromDatabase == null) {\r\n                                return [2 /*return*/, DEFAULT_PUBLIC_VAPID_KEY];\r\n                            }\r\n                            return [2 /*return*/, vapidKeyFromDatabase];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        return SwController;\r\n    }(BaseController));\r\n    function getClientList() {\r\n        return self.clients.matchAll({\r\n            type: 'window',\r\n            includeUncontrolled: true\r\n            // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\r\n        });\r\n    }\r\n    function createNewMsg(msgType, msgData) {\r\n        return {\r\n            firebaseMessagingType: msgType,\r\n            firebaseMessagingData: msgData\r\n        };\r\n    }\r\n    function sleep$1(ms) {\r\n        return new Promise(function (resolve) {\r\n            setTimeout(resolve, ms);\r\n        });\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\r\n    var DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var WindowController = /** @class */ (function (_super) {\r\n        __extends(WindowController, _super);\r\n        /**\r\n         * A service that provides a MessagingService instance.\r\n         */\r\n        function WindowController(app) {\r\n            var _this = _super.call(this, app) || this;\r\n            _this.registrationToUse = null;\r\n            _this.publicVapidKeyToUse = null;\r\n            _this.messageObserver = null;\r\n            // @ts-ignore: Unused variable error, this is not implemented yet.\r\n            _this.tokenRefreshObserver = null;\r\n            _this.onMessageInternal = createSubscribe(function (observer) {\r\n                _this.messageObserver = observer;\r\n            });\r\n            _this.onTokenRefreshInternal = createSubscribe(function (observer) {\r\n                _this.tokenRefreshObserver = observer;\r\n            });\r\n            _this.setupSWMessageListener_();\r\n            return _this;\r\n        }\r\n        /**\r\n         * Request permission if it is not currently granted\r\n         *\r\n         * @return Resolves if the permission was granted, otherwise rejects\r\n         *\r\n         * @deprecated Use Notification.requestPermission() instead.\r\n         * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\r\n         */\r\n        WindowController.prototype.requestPermission = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var permissionResult;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            if (this.getNotificationPermission_() === 'granted') {\r\n                                return [2 /*return*/];\r\n                            }\r\n                            return [4 /*yield*/, Notification.requestPermission()];\r\n                        case 1:\r\n                            permissionResult = _a.sent();\r\n                            if (permissionResult === 'granted') {\r\n                                return [2 /*return*/];\r\n                            }\r\n                            else if (permissionResult === 'denied') {\r\n                                throw errorFactory.create(\"permission-blocked\" /* PERMISSION_BLOCKED */);\r\n                            }\r\n                            else {\r\n                                throw errorFactory.create(\"permission-default\" /* PERMISSION_DEFAULT */);\r\n                            }\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This method allows a developer to override the default service worker and\r\n         * instead use a custom service worker.\r\n         *\r\n         * @param registration The service worker registration that should be used to\r\n         * receive the push messages.\r\n         */\r\n        WindowController.prototype.useServiceWorker = function (registration) {\r\n            if (!(registration instanceof ServiceWorkerRegistration)) {\r\n                throw errorFactory.create(\"sw-registration-expected\" /* SW_REGISTRATION_EXPECTED */);\r\n            }\r\n            if (this.registrationToUse != null) {\r\n                throw errorFactory.create(\"use-sw-before-get-token\" /* USE_SW_BEFORE_GET_TOKEN */);\r\n            }\r\n            this.registrationToUse = registration;\r\n        };\r\n        /**\r\n         * This method allows a developer to override the default vapid key\r\n         * and instead use a custom VAPID public key.\r\n         *\r\n         * @param publicKey A URL safe base64 encoded string.\r\n         */\r\n        WindowController.prototype.usePublicVapidKey = function (publicKey) {\r\n            if (typeof publicKey !== 'string') {\r\n                throw errorFactory.create(\"invalid-public-vapid-key\" /* INVALID_PUBLIC_VAPID_KEY */);\r\n            }\r\n            if (this.publicVapidKeyToUse != null) {\r\n                throw errorFactory.create(\"use-public-key-before-get-token\" /* USE_PUBLIC_KEY_BEFORE_GET_TOKEN */);\r\n            }\r\n            var parsedKey = base64ToArrayBuffer(publicKey);\r\n            if (parsedKey.length !== 65) {\r\n                throw errorFactory.create(\"public-vapid-key-decryption-failed\" /* PUBLIC_KEY_DECRYPTION_FAILED */);\r\n            }\r\n            this.publicVapidKeyToUse = parsedKey;\r\n        };\r\n        /**\r\n         * @export\r\n         * @param nextOrObserver An observer object or a function triggered on\r\n         * message.\r\n         * @param error A function triggered on message error.\r\n         * @param completed function triggered when the observer is removed.\r\n         * @return The unsubscribe function for the observer.\r\n         */\r\n        WindowController.prototype.onMessage = function (nextOrObserver, error, completed) {\r\n            if (typeof nextOrObserver === 'function') {\r\n                return this.onMessageInternal(nextOrObserver, error, completed);\r\n            }\r\n            else {\r\n                return this.onMessageInternal(nextOrObserver);\r\n            }\r\n        };\r\n        /**\r\n         * @param nextOrObserver An observer object or a function triggered on token\r\n         * refresh.\r\n         * @param error A function triggered on token refresh error.\r\n         * @param completed function triggered when the observer is removed.\r\n         * @return The unsubscribe function for the observer.\r\n         */\r\n        WindowController.prototype.onTokenRefresh = function (nextOrObserver, error, completed) {\r\n            if (typeof nextOrObserver === 'function') {\r\n                return this.onTokenRefreshInternal(nextOrObserver, error, completed);\r\n            }\r\n            else {\r\n                return this.onTokenRefreshInternal(nextOrObserver);\r\n            }\r\n        };\r\n        /**\r\n         * Given a registration, wait for the service worker it relates to\r\n         * become activer\r\n         * @param registration Registration to wait for service worker to become active\r\n         * @return Wait for service worker registration to become active\r\n         */\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        WindowController.prototype.waitForRegistrationToActivate_ = function (registration) {\r\n            var serviceWorker = registration.installing || registration.waiting || registration.active;\r\n            return new Promise(function (resolve, reject) {\r\n                if (!serviceWorker) {\r\n                    // This is a rare scenario but has occured in firefox\r\n                    reject(errorFactory.create(\"no-sw-in-reg\" /* NO_SW_IN_REG */));\r\n                    return;\r\n                }\r\n                // Because the Promise function is called on next tick there is a\r\n                // small chance that the worker became active or redundant already.\r\n                if (serviceWorker.state === 'activated') {\r\n                    resolve(registration);\r\n                    return;\r\n                }\r\n                if (serviceWorker.state === 'redundant') {\r\n                    reject(errorFactory.create(\"sw-reg-redundant\" /* SW_REG_REDUNDANT */));\r\n                    return;\r\n                }\r\n                var stateChangeListener = function () {\r\n                    if (serviceWorker.state === 'activated') {\r\n                        resolve(registration);\r\n                    }\r\n                    else if (serviceWorker.state === 'redundant') {\r\n                        reject(errorFactory.create(\"sw-reg-redundant\" /* SW_REG_REDUNDANT */));\r\n                    }\r\n                    else {\r\n                        // Return early and wait to next state change\r\n                        return;\r\n                    }\r\n                    serviceWorker.removeEventListener('statechange', stateChangeListener);\r\n                };\r\n                serviceWorker.addEventListener('statechange', stateChangeListener);\r\n            });\r\n        };\r\n        /**\r\n         * This will register the default service worker and return the registration\r\n         * @return The service worker registration to be used for the push service.\r\n         */\r\n        WindowController.prototype.getSWRegistration_ = function () {\r\n            var _this = this;\r\n            if (this.registrationToUse) {\r\n                return this.waitForRegistrationToActivate_(this.registrationToUse);\r\n            }\r\n            // Make the registration null so we know useServiceWorker will not\r\n            // use a new service worker as registrationToUse is no longer undefined\r\n            this.registrationToUse = null;\r\n            return navigator.serviceWorker\r\n                .register(DEFAULT_SW_PATH, {\r\n                scope: DEFAULT_SW_SCOPE\r\n            })\r\n                .catch(function (err) {\r\n                throw errorFactory.create(\"failed-serviceworker-registration\" /* FAILED_DEFAULT_REGISTRATION */, {\r\n                    browserErrorMessage: err.message\r\n                });\r\n            })\r\n                .then(function (registration) {\r\n                return _this.waitForRegistrationToActivate_(registration).then(function () {\r\n                    _this.registrationToUse = registration;\r\n                    // We update after activation due to an issue with Firefox v49 where\r\n                    // a race condition occassionally causes the service worker to not\r\n                    // install\r\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                    registration.update();\r\n                    return registration;\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This will return the default VAPID key or the uint8array version of the\r\n         * public VAPID key provided by the developer.\r\n         */\r\n        WindowController.prototype.getPublicVapidKey_ = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    if (this.publicVapidKeyToUse) {\r\n                        return [2 /*return*/, this.publicVapidKeyToUse];\r\n                    }\r\n                    return [2 /*return*/, DEFAULT_PUBLIC_VAPID_KEY];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This method will set up a message listener to handle\r\n         * events from the service worker that should trigger\r\n         * events in the page.\r\n         */\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        WindowController.prototype.setupSWMessageListener_ = function () {\r\n            var _this = this;\r\n            navigator.serviceWorker.addEventListener('message', function (event) {\r\n                if (!event.data ||\r\n                    !event.data.firebaseMessagingType ||\r\n                    !event.data.firebaseMessagingData) {\r\n                    // Not a message from FCM\r\n                    return;\r\n                }\r\n                var _a = event.data, firebaseMessagingType = _a.firebaseMessagingType, firebaseMessagingData = _a.firebaseMessagingData;\r\n                if (_this.messageObserver) {\r\n                    _this.messageObserver.next(firebaseMessagingData);\r\n                }\r\n                var data = firebaseMessagingData.data;\r\n                if (data &&\r\n                    FN_CAMPAIGN_ID in data &&\r\n                    data[FN_CAMPAIGN_ANALYTICS_ENABLED] === '1') {\r\n                    // This message has a campaign id, meaning it was sent using the FN Console.\r\n                    // Analytics is enabled on this message, so we should log it.\r\n                    var eventType = getEventType(firebaseMessagingType);\r\n                    _this.app.INTERNAL.analytics.logEvent(eventType, \r\n                    /* eslint-disable camelcase */\r\n                    {\r\n                        message_name: data[FN_CAMPAIGN_NAME],\r\n                        message_id: data[FN_CAMPAIGN_ID],\r\n                        message_time: data[FN_CAMPAIGN_TIME],\r\n                        message_device_time: Math.floor(Date.now() / 1000)\r\n                    }\r\n                    /* eslint-enable camelcase */\r\n                    );\r\n                }\r\n            }, false);\r\n        };\r\n        return WindowController;\r\n    }(BaseController));\r\n    function getEventType(messageType) {\r\n        switch (messageType) {\r\n            case MessageType.NOTIFICATION_CLICKED:\r\n                return 'notification_open';\r\n            case MessageType.PUSH_MSG_RECEIVED:\r\n                return 'notification_foreground';\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function registerMessaging(instance) {\r\n        var messagingName = 'messaging';\r\n        var factoryMethod = function (app) {\r\n            if (!isSupported()) {\r\n                throw errorFactory.create(\"unsupported-browser\" /* UNSUPPORTED_BROWSER */);\r\n            }\r\n            if (self && 'ServiceWorkerGlobalScope' in self) {\r\n                // Running in ServiceWorker context\r\n                return new SwController(app);\r\n            }\r\n            else {\r\n                // Assume we are in the window context.\r\n                return new WindowController(app);\r\n            }\r\n        };\r\n        var namespaceExports = {\r\n            isSupported: isSupported\r\n        };\r\n        instance.INTERNAL.registerService(messagingName, factoryMethod, namespaceExports);\r\n    }\r\n    registerMessaging(firebase);\r\n    function isSupported() {\r\n        if (self && 'ServiceWorkerGlobalScope' in self) {\r\n            // Running in ServiceWorker context\r\n            return isSWControllerSupported();\r\n        }\r\n        else {\r\n            // Assume we are in the window context.\r\n            return isWindowControllerSupported();\r\n        }\r\n    }\r\n    /**\r\n     * Checks to see if the required APIs exist.\r\n     */\r\n    function isWindowControllerSupported() {\r\n        return (navigator.cookieEnabled &&\r\n            'serviceWorker' in navigator &&\r\n            'PushManager' in window &&\r\n            'Notification' in window &&\r\n            'fetch' in window &&\r\n            ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\r\n            PushSubscription.prototype.hasOwnProperty('getKey'));\r\n    }\r\n    /**\r\n     * Checks to see if the required APIs exist within SW Context.\r\n     */\r\n    function isSWControllerSupported() {\r\n        return ('PushManager' in self &&\r\n            'Notification' in self &&\r\n            ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\r\n            PushSubscription.prototype.hasOwnProperty('getKey'));\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * Standard error codes for different ways a request can fail, as defined by:\r\n     * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n     *\r\n     * This map is used primarily to convert from a backend error code string to\r\n     * a client SDK error code string, and make sure it's in the supported set.\r\n     */\r\n    var errorCodeMap = {\r\n        OK: 'ok',\r\n        CANCELLED: 'cancelled',\r\n        UNKNOWN: 'unknown',\r\n        INVALID_ARGUMENT: 'invalid-argument',\r\n        DEADLINE_EXCEEDED: 'deadline-exceeded',\r\n        NOT_FOUND: 'not-found',\r\n        ALREADY_EXISTS: 'already-exists',\r\n        PERMISSION_DENIED: 'permission-denied',\r\n        UNAUTHENTICATED: 'unauthenticated',\r\n        RESOURCE_EXHAUSTED: 'resource-exhausted',\r\n        FAILED_PRECONDITION: 'failed-precondition',\r\n        ABORTED: 'aborted',\r\n        OUT_OF_RANGE: 'out-of-range',\r\n        UNIMPLEMENTED: 'unimplemented',\r\n        INTERNAL: 'internal',\r\n        UNAVAILABLE: 'unavailable',\r\n        DATA_LOSS: 'data-loss'\r\n    };\r\n    /**\r\n     * An explicit error that can be thrown from a handler to send an error to the\r\n     * client that called the function.\r\n     */\r\n    var HttpsErrorImpl = /** @class */ (function (_super) {\r\n        __extends(HttpsErrorImpl, _super);\r\n        function HttpsErrorImpl(code, message, details) {\r\n            var _this = _super.call(this, message) || this;\r\n            // This is a workaround for a bug in TypeScript when extending Error:\r\n            // tslint:disable-next-line\r\n            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n            Object.setPrototypeOf(_this, HttpsErrorImpl.prototype);\r\n            _this.code = code;\r\n            _this.details = details;\r\n            return _this;\r\n        }\r\n        return HttpsErrorImpl;\r\n    }(Error));\r\n    /**\r\n     * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n     * This is the standard HTTP status code -> error mapping defined in:\r\n     * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n     *\r\n     * @param status An HTTP status code.\r\n     * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n     */\r\n    function codeForHTTPStatus(status) {\r\n        // Make sure any successful status is OK.\r\n        if (status >= 200 && status < 300) {\r\n            return 'ok';\r\n        }\r\n        switch (status) {\r\n            case 0:\r\n                // This can happen if the server returns 500.\r\n                return 'internal';\r\n            case 400:\r\n                return 'invalid-argument';\r\n            case 401:\r\n                return 'unauthenticated';\r\n            case 403:\r\n                return 'permission-denied';\r\n            case 404:\r\n                return 'not-found';\r\n            case 409:\r\n                return 'aborted';\r\n            case 429:\r\n                return 'resource-exhausted';\r\n            case 499:\r\n                return 'cancelled';\r\n            case 500:\r\n                return 'internal';\r\n            case 501:\r\n                return 'unimplemented';\r\n            case 503:\r\n                return 'unavailable';\r\n            case 504:\r\n                return 'deadline-exceeded';\r\n            default: // ignore\r\n        }\r\n        return 'unknown';\r\n    }\r\n    /**\r\n     * Takes an HTTP response and returns the corresponding Error, if any.\r\n     */\r\n    function _errorForResponse(status, bodyJSON, serializer) {\r\n        var code = codeForHTTPStatus(status);\r\n        // Start with reasonable defaults from the status code.\r\n        var description = code;\r\n        var details = undefined;\r\n        // Then look through the body for explicit details.\r\n        try {\r\n            var errorJSON = bodyJSON && bodyJSON.error;\r\n            if (errorJSON) {\r\n                var status_1 = errorJSON.status;\r\n                if (typeof status_1 === 'string') {\r\n                    if (!errorCodeMap[status_1]) {\r\n                        // They must've included an unknown error code in the body.\r\n                        return new HttpsErrorImpl('internal', 'internal');\r\n                    }\r\n                    code = errorCodeMap[status_1];\r\n                    // TODO(klimt): Add better default descriptions for error enums.\r\n                    // The default description needs to be updated for the new code.\r\n                    description = status_1;\r\n                }\r\n                var message = errorJSON.message;\r\n                if (typeof message === 'string') {\r\n                    description = message;\r\n                }\r\n                details = errorJSON.details;\r\n                if (details !== undefined) {\r\n                    details = serializer.decode(details);\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            // If we couldn't parse explicit error data, that's fine.\r\n        }\r\n        if (code === 'ok') {\r\n            // Technically, there's an edge case where a developer could explicitly\r\n            // return an error code of OK, and we will treat it as success, but that\r\n            // seems reasonable.\r\n            return null;\r\n        }\r\n        return new HttpsErrorImpl(code, description, details);\r\n    }\n\n    /**\r\n     * Helper class to get metadata that should be included with a function call.\r\n     */\r\n    var ContextProvider = /** @class */ (function () {\r\n        function ContextProvider(app) {\r\n            this.app = app;\r\n        }\r\n        ContextProvider.prototype.getAuthToken = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var token, e_1;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            _a.trys.push([0, 2, , 3]);\r\n                            return [4 /*yield*/, this.app.INTERNAL.getToken()];\r\n                        case 1:\r\n                            token = _a.sent();\r\n                            if (!token) {\r\n                                return [2 /*return*/, undefined];\r\n                            }\r\n                            return [2 /*return*/, token.accessToken];\r\n                        case 2:\r\n                            e_1 = _a.sent();\r\n                            // If there's any error when trying to get the auth token, leave it off.\r\n                            return [2 /*return*/, undefined];\r\n                        case 3: return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        ContextProvider.prototype.getInstanceIdToken = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var messaging, token, e_2;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            _a.trys.push([0, 2, , 3]);\r\n                            // HACK: Until we have a separate instanceId package, this is a quick way\r\n                            // to load in the messaging instance for this app.\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            if (!this.app.messaging) {\r\n                                return [2 /*return*/, undefined];\r\n                            }\r\n                            messaging = this.app.messaging();\r\n                            return [4 /*yield*/, messaging.getToken()];\r\n                        case 1:\r\n                            token = _a.sent();\r\n                            if (!token) {\r\n                                return [2 /*return*/, undefined];\r\n                            }\r\n                            return [2 /*return*/, token];\r\n                        case 2:\r\n                            e_2 = _a.sent();\r\n                            // We don't warn on this, because it usually means messaging isn't set up.\r\n                            // console.warn('Failed to retrieve instance id token.', e);\r\n                            // If there's any error when trying to get the token, leave it off.\r\n                            return [2 /*return*/, undefined];\r\n                        case 3: return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        ContextProvider.prototype.getContext = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var authToken, instanceIdToken;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.getAuthToken()];\r\n                        case 1:\r\n                            authToken = _a.sent();\r\n                            return [4 /*yield*/, this.getInstanceIdToken()];\r\n                        case 2:\r\n                            instanceIdToken = _a.sent();\r\n                            return [2 /*return*/, { authToken: authToken, instanceIdToken: instanceIdToken }];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        return ContextProvider;\r\n    }());\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\r\n    var UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\r\n    function mapValues(\r\n    // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    o, f) {\r\n        var result = {};\r\n        for (var key in o) {\r\n            if (o.hasOwnProperty(key)) {\r\n                result[key] = f(o[key]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    var Serializer = /** @class */ (function () {\r\n        function Serializer() {\r\n        }\r\n        // Takes data and encodes it in a JSON-friendly way, such that types such as\r\n        // Date are preserved.\r\n        Serializer.prototype.encode = function (data) {\r\n            var _this = this;\r\n            if (data == null) {\r\n                return null;\r\n            }\r\n            if (data instanceof Number) {\r\n                data = data.valueOf();\r\n            }\r\n            if (typeof data === 'number' && isFinite(data)) {\r\n                // Any number in JS is safe to put directly in JSON and parse as a double\r\n                // without any loss of precision.\r\n                return data;\r\n            }\r\n            if (data === true || data === false) {\r\n                return data;\r\n            }\r\n            if (Object.prototype.toString.call(data) === '[object String]') {\r\n                return data;\r\n            }\r\n            if (Array.isArray(data)) {\r\n                return data.map(function (x) { return _this.encode(x); });\r\n            }\r\n            if (typeof data === 'function' || typeof data === 'object') {\r\n                return mapValues(data, function (x) { return _this.encode(x); });\r\n            }\r\n            // If we got this far, the data is not encodable.\r\n            throw new Error('Data cannot be encoded in JSON: ' + data);\r\n        };\r\n        // Takes data that's been encoded in a JSON-friendly form and returns a form\r\n        // with richer datatypes, such as Dates, etc.\r\n        Serializer.prototype.decode = function (json) {\r\n            var _this = this;\r\n            if (json == null) {\r\n                return json;\r\n            }\r\n            if (json['@type']) {\r\n                switch (json['@type']) {\r\n                    case LONG_TYPE:\r\n                    // Fall through and handle this the same as unsigned.\r\n                    case UNSIGNED_LONG_TYPE: {\r\n                        // Technically, this could work return a valid number for malformed\r\n                        // data if there was a number followed by garbage. But it's just not\r\n                        // worth all the extra code to detect that case.\r\n                        var value = Number(json['value']);\r\n                        if (isNaN(value)) {\r\n                            throw new Error('Data cannot be decoded from JSON: ' + json);\r\n                        }\r\n                        return value;\r\n                    }\r\n                    default: {\r\n                        throw new Error('Data cannot be decoded from JSON: ' + json);\r\n                    }\r\n                }\r\n            }\r\n            if (Array.isArray(json)) {\r\n                return json.map(function (x) { return _this.decode(x); });\r\n            }\r\n            if (typeof json === 'function' || typeof json === 'object') {\r\n                return mapValues(json, function (x) { return _this.decode(x); });\r\n            }\r\n            // Anything else is safe to return.\r\n            return json;\r\n        };\r\n        return Serializer;\r\n    }());\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * Returns a Promise that will be rejected after the given duration.\r\n     * The error will be of type HttpsErrorImpl.\r\n     *\r\n     * @param millis Number of milliseconds to wait before rejecting.\r\n     */\r\n    function failAfter(millis) {\r\n        return new Promise(function (_, reject) {\r\n            setTimeout(function () {\r\n                reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\r\n            }, millis);\r\n        });\r\n    }\r\n    /**\r\n     * The main class for the Firebase Functions SDK.\r\n     */\r\n    var Service = /** @class */ (function () {\r\n        /**\r\n         * Creates a new Functions service for the given app and (optional) region.\r\n         * @param app_ The FirebaseApp to use.\r\n         * @param region_ The region to call functions in.\r\n         */\r\n        function Service(app_, region_) {\r\n            var _this = this;\r\n            if (region_ === void 0) { region_ = 'us-central1'; }\r\n            this.app_ = app_;\r\n            this.region_ = region_;\r\n            this.serializer = new Serializer();\r\n            this.emulatorOrigin = null;\r\n            this.INTERNAL = {\r\n                delete: function () {\r\n                    return _this.deleteService();\r\n                }\r\n            };\r\n            this.contextProvider = new ContextProvider(app_);\r\n            // Cancels all ongoing requests when resolved.\r\n            this.cancelAllRequests = new Promise(function (resolve) {\r\n                _this.deleteService = function () {\r\n                    return resolve();\r\n                };\r\n            });\r\n        }\r\n        Object.defineProperty(Service.prototype, \"app\", {\r\n            get: function () {\r\n                return this.app_;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * Returns the URL for a callable with the given name.\r\n         * @param name The name of the callable.\r\n         */\r\n        Service.prototype._url = function (name) {\r\n            var projectId = this.app_.options.projectId;\r\n            var region = this.region_;\r\n            if (this.emulatorOrigin !== null) {\r\n                var origin_1 = this.emulatorOrigin;\r\n                return origin_1 + \"/\" + projectId + \"/\" + region + \"/\" + name;\r\n            }\r\n            return \"https://\" + region + \"-\" + projectId + \".cloudfunctions.net/\" + name;\r\n        };\r\n        /**\r\n         * Changes this instance to point to a Cloud Functions emulator running\r\n         * locally. See https://firebase.google.com/docs/functions/local-emulator\r\n         *\r\n         * @param origin The origin of the local emulator, such as\r\n         * \"http://localhost:5005\".\r\n         */\r\n        Service.prototype.useFunctionsEmulator = function (origin) {\r\n            this.emulatorOrigin = origin;\r\n        };\r\n        /**\r\n         * Returns a reference to the callable https trigger with the given name.\r\n         * @param name The name of the trigger.\r\n         */\r\n        Service.prototype.httpsCallable = function (name, options) {\r\n            var _this = this;\r\n            return function (data) {\r\n                return _this.call(name, data, options || {});\r\n            };\r\n        };\r\n        /**\r\n         * Does an HTTP POST and returns the completed response.\r\n         * @param url The url to post to.\r\n         * @param body The JSON body of the post.\r\n         * @param headers The HTTP headers to include in the request.\r\n         * @return A Promise that will succeed when the request finishes.\r\n         */\r\n        Service.prototype.postJSON = function (url, body, headers) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var response, e_1, json, e_2;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            headers.append('Content-Type', 'application/json');\r\n                            _a.label = 1;\r\n                        case 1:\r\n                            _a.trys.push([1, 3, , 4]);\r\n                            return [4 /*yield*/, fetch(url, {\r\n                                    method: 'POST',\r\n                                    body: JSON.stringify(body),\r\n                                    headers: headers\r\n                                })];\r\n                        case 2:\r\n                            response = _a.sent();\r\n                            return [3 /*break*/, 4];\r\n                        case 3:\r\n                            e_1 = _a.sent();\r\n                            // This could be an unhandled error on the backend, or it could be a\r\n                            // network error. There's no way to know, since an unhandled error on the\r\n                            // backend will fail to set the proper CORS header, and thus will be\r\n                            // treated as a network error by fetch.\r\n                            return [2 /*return*/, {\r\n                                    status: 0,\r\n                                    json: null\r\n                                }];\r\n                        case 4:\r\n                            json = null;\r\n                            _a.label = 5;\r\n                        case 5:\r\n                            _a.trys.push([5, 7, , 8]);\r\n                            return [4 /*yield*/, response.json()];\r\n                        case 6:\r\n                            json = _a.sent();\r\n                            return [3 /*break*/, 8];\r\n                        case 7:\r\n                            e_2 = _a.sent();\r\n                            return [3 /*break*/, 8];\r\n                        case 8: return [2 /*return*/, {\r\n                                status: response.status,\r\n                                json: json\r\n                            }];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Calls a callable function asynchronously and returns the result.\r\n         * @param name The name of the callable trigger.\r\n         * @param data The data to pass as params to the function.s\r\n         */\r\n        Service.prototype.call = function (name, data, options) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var url, body, headers, context, timeout, response, error, responseData, decodedData;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            url = this._url(name);\r\n                            // Encode any special types, such as dates, in the input data.\r\n                            data = this.serializer.encode(data);\r\n                            body = { data: data };\r\n                            headers = new Headers();\r\n                            return [4 /*yield*/, this.contextProvider.getContext()];\r\n                        case 1:\r\n                            context = _a.sent();\r\n                            if (context.authToken) {\r\n                                headers.append('Authorization', 'Bearer ' + context.authToken);\r\n                            }\r\n                            if (context.instanceIdToken) {\r\n                                headers.append('Firebase-Instance-ID-Token', context.instanceIdToken);\r\n                            }\r\n                            timeout = options.timeout || 70000;\r\n                            return [4 /*yield*/, Promise.race([\r\n                                    this.postJSON(url, body, headers),\r\n                                    failAfter(timeout),\r\n                                    this.cancelAllRequests\r\n                                ])];\r\n                        case 2:\r\n                            response = _a.sent();\r\n                            // If service was deleted, interrupted response throws an error.\r\n                            if (!response) {\r\n                                throw new HttpsErrorImpl('cancelled', 'Firebase Functions instance was deleted.');\r\n                            }\r\n                            error = _errorForResponse(response.status, response.json, this.serializer);\r\n                            if (error) {\r\n                                throw error;\r\n                            }\r\n                            if (!response.json) {\r\n                                throw new HttpsErrorImpl('internal', 'Response is not valid JSON object.');\r\n                            }\r\n                            responseData = response.json.data;\r\n                            // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\r\n                            // backwards compatibility.\r\n                            if (typeof responseData === 'undefined') {\r\n                                responseData = response.json.result;\r\n                            }\r\n                            if (typeof responseData === 'undefined') {\r\n                                // Consider the response malformed.\r\n                                throw new HttpsErrorImpl('internal', 'Response is missing data field.');\r\n                            }\r\n                            decodedData = this.serializer.decode(responseData);\r\n                            return [2 /*return*/, { data: decodedData }];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        return Service;\r\n    }());\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * Type constant for Firebase Functions.\r\n     */\r\n    var FUNCTIONS_TYPE = 'functions';\r\n    function factory(app, _unused, region) {\r\n        return new Service(app, region);\r\n    }\r\n    function registerFunctions(instance) {\r\n        var namespaceExports = {\r\n            // no-inline\r\n            Functions: Service\r\n        };\r\n        instance.INTERNAL.registerService(FUNCTIONS_TYPE, factory, namespaceExports, \r\n        // We don't need to wait on any AppHooks.\r\n        undefined, \r\n        // Allow multiple functions instances per app.\r\n        true);\r\n    }\r\n    registerFunctions(firebase);\n\n    const messagingSenderId = '444790084672';\n\n    const config = {\n      apiKey: 'AIzaSyAS9LYKPeLGOjeSYfgRyYrUYqwfPGbJS4A',\n      authDomain: 'rpce-reloader.firebaseapp.com',\n      databaseURL: 'https://rpce-reloader.firebaseio.com',\n      projectId: 'rpce-reloader',\n      storageBucket: '',\n      messagingSenderId,\n      appId: '1:444790084672:web:01c370a8f180e498',\n    };\n\n    const publicVapidKey =\n      'BBnbRXsQa5zu5JXxlUT2fHFtNjiW8pFOX5PFSMWpJzKz7JkZl2-1mlu25MYZLM2AQ7YvS1p8TgEhCUn8oCbrlNw';\n\n    /* eslint-env browser */\n\n    // Initialize full web app on import\n    const app = firebase.initializeApp(config, 'reloader');\n\n    const setupMessaging = async ({\n      serviceWorkerPath,\n      onMessage,\n    } = {}) => {\n      const messaging = app.messaging();\n\n      const registration = await navigator.serviceWorker.register(\n        serviceWorkerPath,\n      );\n\n      messaging.useServiceWorker(registration);\n      messaging.usePublicVapidKey(publicVapidKey);\n\n      if (typeof onMessage === 'function') {\n        navigator.serviceWorker.addEventListener(\n          'message',\n          onMessage,\n        );\n      } else {\n        throw new TypeError('onMessage must be a function')\n      }\n\n      return { messaging, registration }\n    };\n\n    const registerToken = app\n      .functions()\n      .httpsCallable('registerToken');\n\n    const loadMessage = `\nDEVELOPMENT build with non-persistent auto-reloader.\nLoaded on ${new Date().toTimeString()}.\n`.trim();\n\n    /* eslint-env browser */\n\n    const reload = () => chrome.runtime.reload();\n\n    const onMessage = async (event) => {\n      const { message } = event.data;\n\n      if (message === 'client-load') {\n        console.log('Reloader ready and waiting...');\n      } else if (message === 'client-reload') {\n        console.log('Will reload now...');\n\n        setTimeout(reload, 500);\n      } else {\n        console.log('Reloader received unknown message', message);\n      }\n    };\n\n    const onLoad = async ({ messaging, registration }) => {\n      const token = await messaging.getToken();\n      const notifications = await registration.getNotifications();\n\n      notifications.forEach((n) => n.close());\n\n      console.log(loadMessage);\n\n      return registerToken({ uid: '%UID%', token })\n    };\n\n    setupMessaging({\n      serviceWorkerPath: '%SW_PATH%',\n      onMessage,\n    })\n      .then(onLoad)\n      .catch((error) => {\n        console.log('AUTO-RELOADER ERROR:');\n        console.error(error);\n      });\n\n}());\n";

var ctClientCode = "(function () {\n  'use strict';\n\n  /* eslint-env browser */\n  /* globals chrome */\n\n  // eslint-disable-next-line quotes\n  const loadMessage = `%LOAD_MESSAGE%`;\n\n  // Log load message to browser dev console\n  console.log(loadMessage);\n\n  const { name } = chrome.runtime.getManifest();\n\n  const reload = () => {\n    console.log(`${name} has reloaded...`);\n\n    setTimeout(() => {\n      location.reload();\n    }, 500);\n  };\n\n  setInterval(() => {\n    try {\n      chrome.runtime.getManifest();\n    } catch (error) {\n      if (error.message === 'Extension context invalidated.') {\n        reload();\n      }\n    }\n  }, 1000);\n\n}());\n";

var serviceWorkerCode = "(function () {\n    'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n     */\r\n    function deepCopy(value) {\r\n        return deepExtend(undefined, value);\r\n    }\r\n    /**\r\n     * Copy properties from source to target (recursively allows extension\r\n     * of Objects and Arrays).  Scalar values in the target are over-written.\r\n     * If target is undefined, an object of the appropriate type will be created\r\n     * (and returned).\r\n     *\r\n     * We recursively copy all child properties of plain Objects in the source- so\r\n     * that namespace- like dictionaries are merged.\r\n     *\r\n     * Note that the target can be a function, in which case the properties in\r\n     * the source Object are copied onto it as static properties of the Function.\r\n     */\r\n    function deepExtend(target, source) {\r\n        if (!(source instanceof Object)) {\r\n            return source;\r\n        }\r\n        switch (source.constructor) {\r\n            case Date:\r\n                // Treat Dates like scalars; if the target date object had any child\r\n                // properties - they will be lost!\r\n                var dateValue = source;\r\n                return new Date(dateValue.getTime());\r\n            case Object:\r\n                if (target === undefined) {\r\n                    target = {};\r\n                }\r\n                break;\r\n            case Array:\r\n                // Always copy the array source and overwrite the target.\r\n                target = [];\r\n                break;\r\n            default:\r\n                // Not a plain Object - treat it as a scalar.\r\n                return source;\r\n        }\r\n        for (var prop in source) {\r\n            if (!source.hasOwnProperty(prop)) {\r\n                continue;\r\n            }\r\n            target[prop] = deepExtend(target[prop], source[prop]);\r\n        }\r\n        return target;\r\n    }\n    /**\r\n     * Detect Node.js.\r\n     *\r\n     * @return true if Node.js environment is detected.\r\n     */\r\n    // Node detection logic from: https://github.com/iliakan/detect-node/\r\n    function isNode() {\r\n        try {\r\n            return (Object.prototype.toString.call(global.process) === '[object process]');\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Detect Browser Environment\r\n     */\r\n    function isBrowser() {\r\n        return typeof self === 'object' && self.self === self;\r\n    }\r\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var ERROR_NAME = 'FirebaseError';\r\n    // Based on code from:\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\n    var FirebaseError = /** @class */ (function (_super) {\r\n        __extends(FirebaseError, _super);\r\n        function FirebaseError(code, message) {\r\n            var _this = _super.call(this, message) || this;\r\n            _this.code = code;\r\n            _this.name = ERROR_NAME;\r\n            // Fix For ES5\r\n            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n            Object.setPrototypeOf(_this, FirebaseError.prototype);\r\n            // Maintains proper stack trace for where our error was thrown.\r\n            // Only available on V8.\r\n            if (Error.captureStackTrace) {\r\n                Error.captureStackTrace(_this, ErrorFactory.prototype.create);\r\n            }\r\n            return _this;\r\n        }\r\n        return FirebaseError;\r\n    }(Error));\r\n    var ErrorFactory = /** @class */ (function () {\r\n        function ErrorFactory(service, serviceName, errors) {\r\n            this.service = service;\r\n            this.serviceName = serviceName;\r\n            this.errors = errors;\r\n        }\r\n        ErrorFactory.prototype.create = function (code) {\r\n            var data = [];\r\n            for (var _i = 1; _i < arguments.length; _i++) {\r\n                data[_i - 1] = arguments[_i];\r\n            }\r\n            var customData = data[0] || {};\r\n            var fullCode = this.service + \"/\" + code;\r\n            var template = this.errors[code];\r\n            var message = template ? replaceTemplate(template, customData) : 'Error';\r\n            // Service Name: Error message (service/code).\r\n            var fullMessage = this.serviceName + \": \" + message + \" (\" + fullCode + \").\";\r\n            var error = new FirebaseError(fullCode, fullMessage);\r\n            // Keys with an underscore at the end of their name are not included in\r\n            // error.data for some reason.\r\n            // TODO: Replace with Object.entries when lib is updated to es2017.\r\n            for (var _a = 0, _b = Object.keys(customData); _a < _b.length; _a++) {\r\n                var key = _b[_a];\r\n                if (key.slice(-1) !== '_') {\r\n                    if (key in error) {\r\n                        console.warn(\"Overwriting FirebaseError base field \\\"\" + key + \"\\\" can cause unexpected behavior.\");\r\n                    }\r\n                    error[key] = customData[key];\r\n                }\r\n            }\r\n            return error;\r\n        };\r\n        return ErrorFactory;\r\n    }());\r\n    function replaceTemplate(template, data) {\r\n        return template.replace(PATTERN, function (_, key) {\r\n            var value = data[key];\r\n            return value != null ? value.toString() : \"<\" + key + \"?>\";\r\n        });\r\n    }\r\n    var PATTERN = /\\{\\$([^}]+)}/g;\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function contains(obj, key) {\r\n        return Object.prototype.hasOwnProperty.call(obj, key);\r\n    }\r\n\n    /**\r\n     * Helper to make a Subscribe function (just like Promise helps make a\r\n     * Thenable).\r\n     *\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    function createSubscribe(executor, onNoObservers) {\r\n        var proxy = new ObserverProxy(executor, onNoObservers);\r\n        return proxy.subscribe.bind(proxy);\r\n    }\r\n    /**\r\n     * Implement fan-out for any number of Observers attached via a subscribe\r\n     * function.\r\n     */\r\n    var ObserverProxy = /** @class */ (function () {\r\n        /**\r\n         * @param executor Function which can make calls to a single Observer\r\n         *     as a proxy.\r\n         * @param onNoObservers Callback when count of Observers goes to zero.\r\n         */\r\n        function ObserverProxy(executor, onNoObservers) {\r\n            var _this = this;\r\n            this.observers = [];\r\n            this.unsubscribes = [];\r\n            this.observerCount = 0;\r\n            // Micro-task scheduling by calling task.then().\r\n            this.task = Promise.resolve();\r\n            this.finalized = false;\r\n            this.onNoObservers = onNoObservers;\r\n            // Call the executor asynchronously so subscribers that are called\r\n            // synchronously after the creation of the subscribe function\r\n            // can still receive the very first value generated in the executor.\r\n            this.task\r\n                .then(function () {\r\n                executor(_this);\r\n            })\r\n                .catch(function (e) {\r\n                _this.error(e);\r\n            });\r\n        }\r\n        ObserverProxy.prototype.next = function (value) {\r\n            this.forEachObserver(function (observer) {\r\n                observer.next(value);\r\n            });\r\n        };\r\n        ObserverProxy.prototype.error = function (error) {\r\n            this.forEachObserver(function (observer) {\r\n                observer.error(error);\r\n            });\r\n            this.close(error);\r\n        };\r\n        ObserverProxy.prototype.complete = function () {\r\n            this.forEachObserver(function (observer) {\r\n                observer.complete();\r\n            });\r\n            this.close();\r\n        };\r\n        /**\r\n         * Subscribe function that can be used to add an Observer to the fan-out list.\r\n         *\r\n         * - We require that no event is sent to a subscriber sychronously to their\r\n         *   call to subscribe().\r\n         */\r\n        ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {\r\n            var _this = this;\r\n            var observer;\r\n            if (nextOrObserver === undefined &&\r\n                error === undefined &&\r\n                complete === undefined) {\r\n                throw new Error('Missing Observer.');\r\n            }\r\n            // Assemble an Observer object when passed as callback functions.\r\n            if (implementsAnyMethods(nextOrObserver, [\r\n                'next',\r\n                'error',\r\n                'complete'\r\n            ])) {\r\n                observer = nextOrObserver;\r\n            }\r\n            else {\r\n                observer = {\r\n                    next: nextOrObserver,\r\n                    error: error,\r\n                    complete: complete\r\n                };\r\n            }\r\n            if (observer.next === undefined) {\r\n                observer.next = noop;\r\n            }\r\n            if (observer.error === undefined) {\r\n                observer.error = noop;\r\n            }\r\n            if (observer.complete === undefined) {\r\n                observer.complete = noop;\r\n            }\r\n            var unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n            // Attempt to subscribe to a terminated Observable - we\r\n            // just respond to the Observer with the final error or complete\r\n            // event.\r\n            if (this.finalized) {\r\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                this.task.then(function () {\r\n                    try {\r\n                        if (_this.finalError) {\r\n                            observer.error(_this.finalError);\r\n                        }\r\n                        else {\r\n                            observer.complete();\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        // nothing\r\n                    }\r\n                    return;\r\n                });\r\n            }\r\n            this.observers.push(observer);\r\n            return unsub;\r\n        };\r\n        // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n        // any unsubscribed Observer.\r\n        ObserverProxy.prototype.unsubscribeOne = function (i) {\r\n            if (this.observers === undefined || this.observers[i] === undefined) {\r\n                return;\r\n            }\r\n            delete this.observers[i];\r\n            this.observerCount -= 1;\r\n            if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n                this.onNoObservers(this);\r\n            }\r\n        };\r\n        ObserverProxy.prototype.forEachObserver = function (fn) {\r\n            if (this.finalized) {\r\n                // Already closed by previous event....just eat the additional values.\r\n                return;\r\n            }\r\n            // Since sendOne calls asynchronously - there is no chance that\r\n            // this.observers will become undefined.\r\n            for (var i = 0; i < this.observers.length; i++) {\r\n                this.sendOne(i, fn);\r\n            }\r\n        };\r\n        // Call the Observer via one of it's callback function. We are careful to\r\n        // confirm that the observe has not been unsubscribed since this asynchronous\r\n        // function had been queued.\r\n        ObserverProxy.prototype.sendOne = function (i, fn) {\r\n            var _this = this;\r\n            // Execute the callback asynchronously\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(function () {\r\n                if (_this.observers !== undefined && _this.observers[i] !== undefined) {\r\n                    try {\r\n                        fn(_this.observers[i]);\r\n                    }\r\n                    catch (e) {\r\n                        // Ignore exceptions raised in Observers or missing methods of an\r\n                        // Observer.\r\n                        // Log error to console. b/31404806\r\n                        if (typeof console !== 'undefined' && console.error) {\r\n                            console.error(e);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        ObserverProxy.prototype.close = function (err) {\r\n            var _this = this;\r\n            if (this.finalized) {\r\n                return;\r\n            }\r\n            this.finalized = true;\r\n            if (err !== undefined) {\r\n                this.finalError = err;\r\n            }\r\n            // Proxy is no longer needed - garbage collect references\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(function () {\r\n                _this.observers = undefined;\r\n                _this.onNoObservers = undefined;\r\n            });\r\n        };\r\n        return ObserverProxy;\r\n    }());\r\n    /**\r\n     * Return true if the object passed in implements any of the named methods.\r\n     */\r\n    function implementsAnyMethods(obj, methods) {\r\n        if (typeof obj !== 'object' || obj === null) {\r\n            return false;\r\n        }\r\n        for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\r\n            var method = methods_1[_i];\r\n            if (method in obj && typeof obj[method] === 'function') {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function noop() {\r\n        // do nothing\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * The JS SDK supports 5 log levels and also allows a user the ability to\r\n     * silence the logs altogether.\r\n     *\r\n     * The order is a follows:\r\n     * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n     *\r\n     * All of the log types above the current log level will be captured (i.e. if\r\n     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n     * `VERBOSE` logs will not)\r\n     */\r\n    var LogLevel;\r\n    (function (LogLevel) {\r\n        LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n        LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n        LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n        LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n        LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n        LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n    })(LogLevel || (LogLevel = {}));\r\n    /**\r\n     * The default log level\r\n     */\r\n    var defaultLogLevel = LogLevel.INFO;\r\n    /**\r\n     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n     * messages on to their corresponding console counterparts (if the log method\r\n     * is supported by the current log level)\r\n     */\r\n    var defaultLogHandler = function (instance, logType) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        if (logType < instance.logLevel) {\r\n            return;\r\n        }\r\n        var now = new Date().toISOString();\r\n        switch (logType) {\r\n            /**\r\n             * By default, `console.debug` is not displayed in the developer console (in\r\n             * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n             * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n             * logs to the `console.log` function.\r\n             */\r\n            case LogLevel.DEBUG:\r\n                console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n                break;\r\n            case LogLevel.VERBOSE:\r\n                console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n                break;\r\n            case LogLevel.INFO:\r\n                console.info.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n                break;\r\n            case LogLevel.WARN:\r\n                console.warn.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n                break;\r\n            case LogLevel.ERROR:\r\n                console.error.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n                break;\r\n            default:\r\n                throw new Error(\"Attempted to log a message with an invalid logType (value: \" + logType + \")\");\r\n        }\r\n    };\r\n    var Logger = /** @class */ (function () {\r\n        /**\r\n         * Gives you an instance of a Logger to capture messages according to\r\n         * Firebase's logging scheme.\r\n         *\r\n         * @param name The name that the logs will be associated with\r\n         */\r\n        function Logger(name) {\r\n            this.name = name;\r\n            /**\r\n             * The log level of the given Logger instance.\r\n             */\r\n            this._logLevel = defaultLogLevel;\r\n            /**\r\n             * The log handler for the Logger instance.\r\n             */\r\n            this._logHandler = defaultLogHandler;\r\n        }\r\n        Object.defineProperty(Logger.prototype, \"logLevel\", {\r\n            get: function () {\r\n                return this._logLevel;\r\n            },\r\n            set: function (val) {\r\n                if (!(val in LogLevel)) {\r\n                    throw new TypeError('Invalid value assigned to `logLevel`');\r\n                }\r\n                this._logLevel = val;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Logger.prototype, \"logHandler\", {\r\n            get: function () {\r\n                return this._logHandler;\r\n            },\r\n            set: function (val) {\r\n                if (typeof val !== 'function') {\r\n                    throw new TypeError('Value assigned to `logHandler` must be a function');\r\n                }\r\n                this._logHandler = val;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * The functions below are all based on the `console` interface\r\n         */\r\n        Logger.prototype.debug = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\r\n        };\r\n        Logger.prototype.log = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\r\n        };\r\n        Logger.prototype.info = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));\r\n        };\r\n        Logger.prototype.warn = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));\r\n        };\r\n        Logger.prototype.error = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));\r\n        };\r\n        return Logger;\r\n    }());\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var _a;\r\n    var ERRORS = (_a = {},\r\n        _a[\"no-app\" /* NO_APP */] = \"No Firebase App '{$appName}' has been created - \" +\r\n            'call Firebase App.initializeApp()',\r\n        _a[\"bad-app-name\" /* BAD_APP_NAME */] = \"Illegal App name: '{$appName}\",\r\n        _a[\"duplicate-app\" /* DUPLICATE_APP */] = \"Firebase App named '{$appName}' already exists\",\r\n        _a[\"app-deleted\" /* APP_DELETED */] = \"Firebase App named '{$appName}' already deleted\",\r\n        _a[\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */] = 'firebase.{$appName}() takes either no argument or a ' +\r\n            'Firebase App instance.',\r\n        _a);\r\n    var ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * Global context object for a collection of services using\r\n     * a shared authentication state.\r\n     */\r\n    var FirebaseAppImpl = /** @class */ (function () {\r\n        function FirebaseAppImpl(options, config, firebase_) {\r\n            var _this = this;\r\n            this.firebase_ = firebase_;\r\n            this.isDeleted_ = false;\r\n            this.services_ = {};\r\n            // An array to capture listeners before the true auth functions\r\n            // exist\r\n            this.tokenListeners_ = [];\r\n            // An array to capture requests to send events before analytics component loads.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any, use any here to make using function.apply easier\r\n            this.analyticsEventRequests_ = [];\r\n            this.name_ = config.name;\r\n            this.automaticDataCollectionEnabled_ =\r\n                config.automaticDataCollectionEnabled || false;\r\n            this.options_ = deepCopy(options);\r\n            var self = this;\r\n            this.INTERNAL = {\r\n                getUid: function () { return null; },\r\n                getToken: function () { return Promise.resolve(null); },\r\n                addAuthTokenListener: function (callback) {\r\n                    _this.tokenListeners_.push(callback);\r\n                    // Make sure callback is called, asynchronously, in the absence of the auth module\r\n                    setTimeout(function () { return callback(null); }, 0);\r\n                },\r\n                removeAuthTokenListener: function (callback) {\r\n                    _this.tokenListeners_ = _this.tokenListeners_.filter(function (listener) { return listener !== callback; });\r\n                },\r\n                analytics: {\r\n                    logEvent: function () {\r\n                        self.analyticsEventRequests_.push(arguments);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        Object.defineProperty(FirebaseAppImpl.prototype, \"automaticDataCollectionEnabled\", {\r\n            get: function () {\r\n                this.checkDestroyed_();\r\n                return this.automaticDataCollectionEnabled_;\r\n            },\r\n            set: function (val) {\r\n                this.checkDestroyed_();\r\n                this.automaticDataCollectionEnabled_ = val;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(FirebaseAppImpl.prototype, \"name\", {\r\n            get: function () {\r\n                this.checkDestroyed_();\r\n                return this.name_;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(FirebaseAppImpl.prototype, \"options\", {\r\n            get: function () {\r\n                this.checkDestroyed_();\r\n                return this.options_;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        FirebaseAppImpl.prototype.delete = function () {\r\n            var _this = this;\r\n            return new Promise(function (resolve) {\r\n                _this.checkDestroyed_();\r\n                resolve();\r\n            })\r\n                .then(function () {\r\n                _this.firebase_.INTERNAL.removeApp(_this.name_);\r\n                var services = [];\r\n                for (var _i = 0, _a = Object.keys(_this.services_); _i < _a.length; _i++) {\r\n                    var serviceKey = _a[_i];\r\n                    for (var _b = 0, _c = Object.keys(_this.services_[serviceKey]); _b < _c.length; _b++) {\r\n                        var instanceKey = _c[_b];\r\n                        services.push(_this.services_[serviceKey][instanceKey]);\r\n                    }\r\n                }\r\n                return Promise.all(services\r\n                    .filter(function (service) { return 'INTERNAL' in service; })\r\n                    .map(function (service) { return service.INTERNAL.delete(); }));\r\n            })\r\n                .then(function () {\r\n                _this.isDeleted_ = true;\r\n                _this.services_ = {};\r\n            });\r\n        };\r\n        /**\r\n         * Return a service instance associated with this app (creating it\r\n         * on demand), identified by the passed instanceIdentifier.\r\n         *\r\n         * NOTE: Currently storage and functions are the only ones that are leveraging this\r\n         * functionality. They invoke it by calling:\r\n         *\r\n         * ```javascript\r\n         * firebase.app().storage('STORAGE BUCKET ID')\r\n         * ```\r\n         *\r\n         * The service name is passed to this already\r\n         * @internal\r\n         */\r\n        FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {\r\n            if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }\r\n            this.checkDestroyed_();\r\n            if (!this.services_[name]) {\r\n                this.services_[name] = {};\r\n            }\r\n            if (!this.services_[name][instanceIdentifier]) {\r\n                /**\r\n                 * If a custom instance has been defined (i.e. not '[DEFAULT]')\r\n                 * then we will pass that instance on, otherwise we pass `null`\r\n                 */\r\n                var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME\r\n                    ? instanceIdentifier\r\n                    : undefined;\r\n                var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);\r\n                this.services_[name][instanceIdentifier] = service;\r\n            }\r\n            return this.services_[name][instanceIdentifier];\r\n        };\r\n        /**\r\n         * Remove a service instance from the cache, so we will create a new instance for this service\r\n         * when people try to get this service again.\r\n         *\r\n         * NOTE: currently only firestore is using this functionality to support firestore shutdown.\r\n         *\r\n         * @param name The service name\r\n         * @param instanceIdentifier instance identifier in case multiple instances are allowed\r\n         * @internal\r\n         */\r\n        FirebaseAppImpl.prototype._removeServiceInstance = function (name, instanceIdentifier) {\r\n            if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }\r\n            if (this.services_[name] && this.services_[name][instanceIdentifier]) {\r\n                delete this.services_[name][instanceIdentifier];\r\n            }\r\n        };\r\n        /**\r\n         * Callback function used to extend an App instance at the time\r\n         * of service instance creation.\r\n         */\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        FirebaseAppImpl.prototype.extendApp = function (props) {\r\n            // Copy the object onto the FirebaseAppImpl prototype\r\n            deepExtend(this, props);\r\n            if (props.INTERNAL) {\r\n                /**\r\n                 * If the app has overwritten the addAuthTokenListener stub, forward\r\n                 * the active token listeners on to the true fxn.\r\n                 *\r\n                 * TODO: This function is required due to our current module\r\n                 * structure. Once we are able to rely strictly upon a single module\r\n                 * implementation, this code should be refactored and Auth should\r\n                 * provide these stubs and the upgrade logic\r\n                 */\r\n                if (props.INTERNAL.addAuthTokenListener) {\r\n                    for (var _i = 0, _a = this.tokenListeners_; _i < _a.length; _i++) {\r\n                        var listener = _a[_i];\r\n                        this.INTERNAL.addAuthTokenListener(listener);\r\n                    }\r\n                    this.tokenListeners_ = [];\r\n                }\r\n                if (props.INTERNAL.analytics) {\r\n                    for (var _b = 0, _c = this.analyticsEventRequests_; _b < _c.length; _b++) {\r\n                        var request = _c[_b];\r\n                        // logEvent is the actual implementation at this point.\r\n                        // We forward the queued events to it.\r\n                        this.INTERNAL.analytics.logEvent.apply(undefined, request);\r\n                    }\r\n                    this.analyticsEventRequests_ = [];\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * This function will throw an Error if the App has already been deleted -\r\n         * use before performing API actions on the App.\r\n         */\r\n        FirebaseAppImpl.prototype.checkDestroyed_ = function () {\r\n            if (this.isDeleted_) {\r\n                throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this.name_ });\r\n            }\r\n        };\r\n        return FirebaseAppImpl;\r\n    }());\r\n    // Prevent dead-code elimination of these methods w/o invalid property\r\n    // copying.\r\n    (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||\r\n        FirebaseAppImpl.prototype.delete ||\r\n        console.log('dc');\n\n    var version = \"7.0.0\";\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var logger = new Logger('@firebase/app');\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * Because auth can't share code with other components, we attach the utility functions\r\n     * in an internal namespace to share code.\r\n     * This function return a firebase namespace object without\r\n     * any utility functions, so it can be shared between the regular firebaseNamespace and\r\n     * the lite version.\r\n     */\r\n    function createFirebaseNamespaceCore(firebaseAppImpl) {\r\n        var apps = {};\r\n        var factories = {};\r\n        var appHooks = {};\r\n        // A namespace is a plain JavaScript Object.\r\n        var namespace = {\r\n            // Hack to prevent Babel from modifying the object returned\r\n            // as the firebase namespace.\r\n            // @ts-ignore\r\n            __esModule: true,\r\n            initializeApp: initializeApp,\r\n            // @ts-ignore\r\n            app: app,\r\n            // @ts-ignore\r\n            apps: null,\r\n            SDK_VERSION: version,\r\n            INTERNAL: {\r\n                registerService: registerService,\r\n                removeApp: removeApp,\r\n                factories: factories,\r\n                useAsService: useAsService\r\n            }\r\n        };\r\n        // Inject a circular default export to allow Babel users who were previously\r\n        // using:\r\n        //\r\n        //   import firebase from 'firebase';\r\n        //   which becomes: var firebase = require('firebase').default;\r\n        //\r\n        // instead of\r\n        //\r\n        //   import * as firebase from 'firebase';\r\n        //   which becomes: var firebase = require('firebase');\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        namespace['default'] = namespace;\r\n        // firebase.apps is a read-only getter.\r\n        Object.defineProperty(namespace, 'apps', {\r\n            get: getApps\r\n        });\r\n        /**\r\n         * Called by App.delete() - but before any services associated with the App\r\n         * are deleted.\r\n         */\r\n        function removeApp(name) {\r\n            var app = apps[name];\r\n            callAppHooks(app, 'delete');\r\n            delete apps[name];\r\n        }\r\n        /**\r\n         * Get the App object for a given name (or DEFAULT).\r\n         */\r\n        function app(name) {\r\n            name = name || DEFAULT_ENTRY_NAME;\r\n            if (!contains(apps, name)) {\r\n                throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n            }\r\n            return apps[name];\r\n        }\r\n        // @ts-ignore\r\n        app['App'] = firebaseAppImpl;\r\n        function initializeApp(options, rawConfig) {\r\n            if (rawConfig === void 0) { rawConfig = {}; }\r\n            if (typeof rawConfig !== 'object' || rawConfig === null) {\r\n                var name_1 = rawConfig;\r\n                rawConfig = { name: name_1 };\r\n            }\r\n            var config = rawConfig;\r\n            if (config.name === undefined) {\r\n                config.name = DEFAULT_ENTRY_NAME;\r\n            }\r\n            var name = config.name;\r\n            if (typeof name !== 'string' || !name) {\r\n                throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n                    appName: String(name)\r\n                });\r\n            }\r\n            if (contains(apps, name)) {\r\n                throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n            }\r\n            var app = new firebaseAppImpl(options, config, namespace);\r\n            apps[name] = app;\r\n            callAppHooks(app, 'create');\r\n            return app;\r\n        }\r\n        /*\r\n         * Return an array of all the non-deleted FirebaseApps.\r\n         */\r\n        function getApps() {\r\n            // Make a copy so caller cannot mutate the apps list.\r\n            return Object.keys(apps).map(function (name) { return apps[name]; });\r\n        }\r\n        /*\r\n         * Register a Firebase Service.\r\n         *\r\n         * firebase.INTERNAL.registerService()\r\n         *\r\n         * TODO: Implement serviceProperties.\r\n         */\r\n        function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {\r\n            if (allowMultipleInstances === void 0) { allowMultipleInstances = false; }\r\n            // If re-registering a service that already exists, return existing service\r\n            if (factories[name]) {\r\n                logger.debug(\"There were multiple attempts to register service \" + name + \".\");\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                return namespace[name];\r\n            }\r\n            // Capture the service factory for later service instantiation\r\n            factories[name] = createService;\r\n            // Capture the appHook, if passed\r\n            if (appHook) {\r\n                appHooks[name] = appHook;\r\n                // Run the **new** app hook on all existing apps\r\n                getApps().forEach(function (app) {\r\n                    appHook('create', app);\r\n                });\r\n            }\r\n            // The Service namespace is an accessor function ...\r\n            function serviceNamespace(appArg) {\r\n                if (appArg === void 0) { appArg = app(); }\r\n                // @ts-ignore\r\n                if (typeof appArg[name] !== 'function') {\r\n                    // Invalid argument.\r\n                    // This happens in the following case: firebase.storage('gs:/')\r\n                    throw ERROR_FACTORY.create(\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */, {\r\n                        appName: name\r\n                    });\r\n                }\r\n                // Forward service instance lookup to the FirebaseApp.\r\n                // @ts-ignore\r\n                return appArg[name]();\r\n            }\r\n            // ... and a container for service-level properties.\r\n            if (serviceProperties !== undefined) {\r\n                deepExtend(serviceNamespace, serviceProperties);\r\n            }\r\n            // Monkey-patch the serviceNamespace onto the firebase namespace\r\n            // @ts-ignore\r\n            namespace[name] = serviceNamespace;\r\n            // Patch the FirebaseAppImpl prototype\r\n            // @ts-ignore\r\n            firebaseAppImpl.prototype[name] =\r\n                // TODO: The eslint disable can be removed and the 'ignoreRestArgs'\r\n                // option added to the no-explicit-any rule when ESlint releases it.\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                function () {\r\n                    var args = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        args[_i] = arguments[_i];\r\n                    }\r\n                    var serviceFxn = this._getService.bind(this, name);\r\n                    return serviceFxn.apply(this, allowMultipleInstances ? args : []);\r\n                };\r\n            return serviceNamespace;\r\n        }\r\n        function callAppHooks(app, eventName) {\r\n            for (var _i = 0, _a = Object.keys(factories); _i < _a.length; _i++) {\r\n                var serviceName = _a[_i];\r\n                // Ignore virtual services\r\n                var factoryName = useAsService(app, serviceName);\r\n                if (factoryName === null) {\r\n                    return;\r\n                }\r\n                if (appHooks[factoryName]) {\r\n                    appHooks[factoryName](eventName, app);\r\n                }\r\n            }\r\n        }\r\n        // Map the requested service to a registered service name\r\n        // (used to map auth to serverAuth service when needed).\r\n        function useAsService(app, name) {\r\n            if (name === 'serverAuth') {\r\n                return null;\r\n            }\r\n            var useService = name;\r\n            return useService;\r\n        }\r\n        return namespace;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * Return a firebase namespace object.\r\n     *\r\n     * In production, this will be called exactly once and the result\r\n     * assigned to the 'firebase' global.  It may be called multiple times\r\n     * in unit tests.\r\n     */\r\n    function createFirebaseNamespace() {\r\n        var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);\r\n        namespace.INTERNAL = __assign({}, namespace.INTERNAL, { createFirebaseNamespace: createFirebaseNamespace,\r\n            extendNamespace: extendNamespace,\r\n            createSubscribe: createSubscribe,\r\n            ErrorFactory: ErrorFactory,\r\n            deepExtend: deepExtend });\r\n        /**\r\n         * Patch the top-level firebase namespace with additional properties.\r\n         *\r\n         * firebase.INTERNAL.extendNamespace()\r\n         */\r\n        function extendNamespace(props) {\r\n            deepExtend(namespace, props);\r\n        }\r\n        return namespace;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    // Firebase Lite detection\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (isBrowser() && self.firebase !== undefined) {\r\n        logger.warn(\"\\n    Warning: Firebase is already defined in the global scope. Please make sure\\n    Firebase library is only loaded once.\\n  \");\r\n        // eslint-disable-next-line\r\n        var sdkVersion = self.firebase.SDK_VERSION;\r\n        if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {\r\n            logger.warn(\"\\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\\n    \");\r\n        }\r\n    }\r\n    var firebaseNamespace = createFirebaseNamespace();\r\n    var initializeApp = firebaseNamespace.initializeApp;\r\n    // TODO: This disable can be removed and the 'ignoreRestArgs' option added to\r\n    // the no-explicit-any rule when ESlint releases it.\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    firebaseNamespace.initializeApp = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        // Environment check before initializing app\r\n        // Do the check in initializeApp, so people have a chance to disable it by setting logLevel\r\n        // in @firebase/logger\r\n        if (isNode()) {\r\n            logger.warn(\"\\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\\n      run in a Node environment.  If running in a Node environment, make sure you\\n      are using the bundle specified by the \\\"main\\\" field in package.json.\\n      \\n      If you are using Webpack, you can specify \\\"main\\\" as the first item in\\n      \\\"resolve.mainFields\\\":\\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\\n      \\n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify \\\"main\\\"\\n      as the first item in \\\"mainFields\\\", e.g. ['main', 'module'].\\n      https://github.com/rollup/rollup-plugin-node-resolve\\n      \");\r\n        }\r\n        return initializeApp.apply(undefined, args);\r\n    };\r\n    var firebase = firebaseNamespace;\n\n    function toArray(arr) {\n      return Array.prototype.slice.call(arr);\n    }\n\n    function promisifyRequest(request) {\n      return new Promise(function(resolve, reject) {\n        request.onsuccess = function() {\n          resolve(request.result);\n        };\n\n        request.onerror = function() {\n          reject(request.error);\n        };\n      });\n    }\n\n    function promisifyRequestCall(obj, method, args) {\n      var request;\n      var p = new Promise(function(resolve, reject) {\n        request = obj[method].apply(obj, args);\n        promisifyRequest(request).then(resolve, reject);\n      });\n\n      p.request = request;\n      return p;\n    }\n\n    function promisifyCursorRequestCall(obj, method, args) {\n      var p = promisifyRequestCall(obj, method, args);\n      return p.then(function(value) {\n        if (!value) return;\n        return new Cursor(value, p.request);\n      });\n    }\n\n    function proxyProperties(ProxyClass, targetProp, properties) {\n      properties.forEach(function(prop) {\n        Object.defineProperty(ProxyClass.prototype, prop, {\n          get: function() {\n            return this[targetProp][prop];\n          },\n          set: function(val) {\n            this[targetProp][prop] = val;\n          }\n        });\n      });\n    }\n\n    function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n      properties.forEach(function(prop) {\n        if (!(prop in Constructor.prototype)) return;\n        ProxyClass.prototype[prop] = function() {\n          return promisifyRequestCall(this[targetProp], prop, arguments);\n        };\n      });\n    }\n\n    function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n      properties.forEach(function(prop) {\n        if (!(prop in Constructor.prototype)) return;\n        ProxyClass.prototype[prop] = function() {\n          return this[targetProp][prop].apply(this[targetProp], arguments);\n        };\n      });\n    }\n\n    function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n      properties.forEach(function(prop) {\n        if (!(prop in Constructor.prototype)) return;\n        ProxyClass.prototype[prop] = function() {\n          return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n        };\n      });\n    }\n\n    function Index(index) {\n      this._index = index;\n    }\n\n    proxyProperties(Index, '_index', [\n      'name',\n      'keyPath',\n      'multiEntry',\n      'unique'\n    ]);\n\n    proxyRequestMethods(Index, '_index', IDBIndex, [\n      'get',\n      'getKey',\n      'getAll',\n      'getAllKeys',\n      'count'\n    ]);\n\n    proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n      'openCursor',\n      'openKeyCursor'\n    ]);\n\n    function Cursor(cursor, request) {\n      this._cursor = cursor;\n      this._request = request;\n    }\n\n    proxyProperties(Cursor, '_cursor', [\n      'direction',\n      'key',\n      'primaryKey',\n      'value'\n    ]);\n\n    proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n      'update',\n      'delete'\n    ]);\n\n    // proxy 'next' methods\n    ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n      if (!(methodName in IDBCursor.prototype)) return;\n      Cursor.prototype[methodName] = function() {\n        var cursor = this;\n        var args = arguments;\n        return Promise.resolve().then(function() {\n          cursor._cursor[methodName].apply(cursor._cursor, args);\n          return promisifyRequest(cursor._request).then(function(value) {\n            if (!value) return;\n            return new Cursor(value, cursor._request);\n          });\n        });\n      };\n    });\n\n    function ObjectStore(store) {\n      this._store = store;\n    }\n\n    ObjectStore.prototype.createIndex = function() {\n      return new Index(this._store.createIndex.apply(this._store, arguments));\n    };\n\n    ObjectStore.prototype.index = function() {\n      return new Index(this._store.index.apply(this._store, arguments));\n    };\n\n    proxyProperties(ObjectStore, '_store', [\n      'name',\n      'keyPath',\n      'indexNames',\n      'autoIncrement'\n    ]);\n\n    proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n      'put',\n      'add',\n      'delete',\n      'clear',\n      'get',\n      'getAll',\n      'getKey',\n      'getAllKeys',\n      'count'\n    ]);\n\n    proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n      'openCursor',\n      'openKeyCursor'\n    ]);\n\n    proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n      'deleteIndex'\n    ]);\n\n    function Transaction(idbTransaction) {\n      this._tx = idbTransaction;\n      this.complete = new Promise(function(resolve, reject) {\n        idbTransaction.oncomplete = function() {\n          resolve();\n        };\n        idbTransaction.onerror = function() {\n          reject(idbTransaction.error);\n        };\n        idbTransaction.onabort = function() {\n          reject(idbTransaction.error);\n        };\n      });\n    }\n\n    Transaction.prototype.objectStore = function() {\n      return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n    };\n\n    proxyProperties(Transaction, '_tx', [\n      'objectStoreNames',\n      'mode'\n    ]);\n\n    proxyMethods(Transaction, '_tx', IDBTransaction, [\n      'abort'\n    ]);\n\n    function UpgradeDB(db, oldVersion, transaction) {\n      this._db = db;\n      this.oldVersion = oldVersion;\n      this.transaction = new Transaction(transaction);\n    }\n\n    UpgradeDB.prototype.createObjectStore = function() {\n      return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n    };\n\n    proxyProperties(UpgradeDB, '_db', [\n      'name',\n      'version',\n      'objectStoreNames'\n    ]);\n\n    proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n      'deleteObjectStore',\n      'close'\n    ]);\n\n    function DB(db) {\n      this._db = db;\n    }\n\n    DB.prototype.transaction = function() {\n      return new Transaction(this._db.transaction.apply(this._db, arguments));\n    };\n\n    proxyProperties(DB, '_db', [\n      'name',\n      'version',\n      'objectStoreNames'\n    ]);\n\n    proxyMethods(DB, '_db', IDBDatabase, [\n      'close'\n    ]);\n\n    // Add cursor iterators\n    // TODO: remove this once browsers do the right thing with promises\n    ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n      [ObjectStore, Index].forEach(function(Constructor) {\n        // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n        if (!(funcName in Constructor.prototype)) return;\n\n        Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n          var args = toArray(arguments);\n          var callback = args[args.length - 1];\n          var nativeObject = this._store || this._index;\n          var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n          request.onsuccess = function() {\n            callback(request.result);\n          };\n        };\n      });\n    });\n\n    // polyfill getAll\n    [Index, ObjectStore].forEach(function(Constructor) {\n      if (Constructor.prototype.getAll) return;\n      Constructor.prototype.getAll = function(query, count) {\n        var instance = this;\n        var items = [];\n\n        return new Promise(function(resolve) {\n          instance.iterateCursor(query, function(cursor) {\n            if (!cursor) {\n              resolve(items);\n              return;\n            }\n            items.push(cursor.value);\n\n            if (count !== undefined && items.length == count) {\n              resolve(items);\n              return;\n            }\n            cursor.continue();\n          });\n        });\n      };\n    });\n\n    function openDb(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    }\n\n    var version$1 = \"0.2.7\";\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var PENDING_TIMEOUT_MS = 10000;\r\n    var PACKAGE_VERSION = \"w:\" + version$1;\r\n    var INTERNAL_AUTH_VERSION = 'FIS_v2';\r\n    var INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\r\n    var TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\r\n    var SERVICE = 'installations';\r\n    var SERVICE_NAME = 'Installations';\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var _a$1;\r\n    var ERROR_DESCRIPTION_MAP = (_a$1 = {},\r\n        _a$1[\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */] = 'Missing App configuration values.',\r\n        _a$1[\"create-installation-failed\" /* CREATE_INSTALLATION_FAILED */] = 'Could not register Firebase Installation.',\r\n        _a$1[\"generate-token-failed\" /* GENERATE_TOKEN_FAILED */] = 'Could not generate Auth Token.',\r\n        _a$1[\"not-registered\" /* NOT_REGISTERED */] = 'Firebase Installation is not registered.',\r\n        _a$1[\"installation-not-found\" /* INSTALLATION_NOT_FOUND */] = 'Firebase Installation not found.',\r\n        _a$1[\"request-failed\" /* REQUEST_FAILED */] = '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\r\n        _a$1[\"app-offline\" /* APP_OFFLINE */] = 'Could not process request. Application offline.',\r\n        _a$1[\"delete-pending-registration\" /* DELETE_PENDING_REGISTRATION */] = \"Can't delete installation while there is a pending registration request.\",\r\n        _a$1);\r\n    var ERROR_FACTORY$1 = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\r\n    /** Returns true if error is a FirebaseError that is based on an error from the server. */\r\n    function isServerError(error) {\r\n        return (error instanceof FirebaseError &&\r\n            error.code.includes(\"request-failed\" /* REQUEST_FAILED */));\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function extractAppConfig(app) {\r\n        if (!app || !app.options) {\r\n            throw ERROR_FACTORY$1.create(\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */);\r\n        }\r\n        var appName = app.name;\r\n        var _a = app.options, projectId = _a.projectId, apiKey = _a.apiKey, appId = _a.appId;\r\n        if (!appName || !projectId || !apiKey || !appId) {\r\n            throw ERROR_FACTORY$1.create(\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */);\r\n        }\r\n        return { appName: appName, projectId: projectId, apiKey: apiKey, appId: appId };\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function getInstallationsEndpoint(_a) {\r\n        var projectId = _a.projectId;\r\n        return INSTALLATIONS_API_URL + \"/projects/\" + projectId + \"/installations\";\r\n    }\r\n    function extractAuthTokenInfoFromResponse(response) {\r\n        return {\r\n            token: response.token,\r\n            requestStatus: 2 /* COMPLETED */,\r\n            expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\r\n            creationTime: Date.now()\r\n        };\r\n    }\r\n    function getErrorFromResponse(requestName, response) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var responseJson, errorData;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, response.json()];\r\n                    case 1:\r\n                        responseJson = _a.sent();\r\n                        errorData = responseJson.error;\r\n                        return [2 /*return*/, ERROR_FACTORY$1.create(\"request-failed\" /* REQUEST_FAILED */, {\r\n                                requestName: requestName,\r\n                                serverCode: errorData.code,\r\n                                serverMessage: errorData.message,\r\n                                serverStatus: errorData.status\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function getHeaders(_a) {\r\n        var apiKey = _a.apiKey;\r\n        return new Headers({\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json',\r\n            'x-goog-api-key': apiKey\r\n        });\r\n    }\r\n    function getHeadersWithAuth(appConfig, _a) {\r\n        var refreshToken = _a.refreshToken;\r\n        var headers = getHeaders(appConfig);\r\n        headers.append('Authorization', getAuthorizationHeader(refreshToken));\r\n        return headers;\r\n    }\r\n    /**\r\n     * Calls the passed in fetch wrapper and returns the response.\r\n     * If the returned response has a status of 5xx, re-runs the function once and\r\n     * returns the response.\r\n     */\r\n    function retryIfServerError(fn) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, fn()];\r\n                    case 1:\r\n                        result = _a.sent();\r\n                        if (result.status >= 500 && result.status < 600) {\r\n                            // Internal Server Error. Retry request.\r\n                            return [2 /*return*/, fn()];\r\n                        }\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function getExpiresInFromResponseExpiresIn(responseExpiresIn) {\r\n        // This works because the server will never respond with fractions of a second.\r\n        return Number(responseExpiresIn.replace('s', '000'));\r\n    }\r\n    function getAuthorizationHeader(refreshToken) {\r\n        return INTERNAL_AUTH_VERSION + \" \" + refreshToken;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function createInstallation(appConfig, _a) {\r\n        var fid = _a.fid;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        endpoint = getInstallationsEndpoint(appConfig);\r\n                        headers = getHeaders(appConfig);\r\n                        body = {\r\n                            fid: fid,\r\n                            authVersion: INTERNAL_AUTH_VERSION,\r\n                            appId: appConfig.appId,\r\n                            sdkVersion: PACKAGE_VERSION\r\n                        };\r\n                        request = {\r\n                            method: 'POST',\r\n                            headers: headers,\r\n                            body: JSON.stringify(body)\r\n                        };\r\n                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];\r\n                    case 1:\r\n                        response = _b.sent();\r\n                        if (!response.ok) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, response.json()];\r\n                    case 2:\r\n                        responseValue = _b.sent();\r\n                        registeredInstallationEntry = {\r\n                            fid: responseValue.fid || fid,\r\n                            registrationStatus: 2 /* COMPLETED */,\r\n                            refreshToken: responseValue.refreshToken,\r\n                            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\r\n                        };\r\n                        return [2 /*return*/, registeredInstallationEntry];\r\n                    case 3: return [4 /*yield*/, getErrorFromResponse('Create Installation', response)];\r\n                    case 4: throw _b.sent();\r\n                }\r\n            });\r\n        });\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /** Returns a promise that resolves after given time passes. */\r\n    function sleep(ms) {\r\n        return new Promise(function (resolve) {\r\n            setTimeout(resolve, ms);\r\n        });\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function bufferToBase64UrlSafe(array) {\r\n        var b64 = btoa(String.fromCharCode.apply(String, __spread(array)));\r\n        return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\r\n    var INVALID_FID = '';\r\n    /**\r\n     * Generates a new FID using random values from Web Crypto API.\r\n     * Returns an empty string if FID generation fails for any reason.\r\n     */\r\n    function generateFid() {\r\n        try {\r\n            // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\r\n            // bytes. our implementation generates a 17 byte array instead.\r\n            var fidByteArray = new Uint8Array(17);\r\n            var crypto_1 = self.crypto || self.msCrypto;\r\n            crypto_1.getRandomValues(fidByteArray);\r\n            // Replace the first 4 random bits with the constant FID header of 0b0111.\r\n            fidByteArray[0] = 112 + (fidByteArray[0] % 16);\r\n            var fid = encode(fidByteArray);\r\n            return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\r\n        }\r\n        catch (_a) {\r\n            // FID generation errored\r\n            return INVALID_FID;\r\n        }\r\n    }\r\n    /** Converts a FID Uint8Array to a base64 string representation. */\r\n    function encode(fidByteArray) {\r\n        var b64String = bufferToBase64UrlSafe(fidByteArray);\r\n        // Remove the 23rd character that was added because of the extra 4 bits at the\r\n        // end of our 17 byte array, and the '=' padding.\r\n        return b64String.substr(0, 22);\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var DATABASE_NAME = 'firebase-installations-database';\r\n    var DATABASE_VERSION = 1;\r\n    var OBJECT_STORE_NAME = 'firebase-installations-store';\r\n    var dbPromise = null;\r\n    function getDbPromise() {\r\n        if (!dbPromise) {\r\n            dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDB) {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (upgradeDB.oldVersion) {\r\n                    case 0:\r\n                        upgradeDB.createObjectStore(OBJECT_STORE_NAME);\r\n                }\r\n            });\r\n        }\r\n        return dbPromise;\r\n    }\r\n    /** Assigns or overwrites the record for the given key with the given value. */\r\n    function set(appConfig, value) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var key, db, tx;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        key = getKey(appConfig);\r\n                        return [4 /*yield*/, getDbPromise()];\r\n                    case 1:\r\n                        db = _a.sent();\r\n                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n                        return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME).put(value, key)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, tx.complete];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2 /*return*/, value];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /** Removes record(s) from the objectStore that match the given key. */\r\n    function remove(appConfig) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var key, db, tx;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        key = getKey(appConfig);\r\n                        return [4 /*yield*/, getDbPromise()];\r\n                    case 1:\r\n                        db = _a.sent();\r\n                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n                        return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME).delete(key)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, tx.complete];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Atomically updates a record with the result of updateFn, which gets\r\n     * called with the current value. If newValue is undefined, the record is\r\n     * deleted instead.\r\n     * @return Updated value\r\n     */\r\n    function update(appConfig, updateFn) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var key, db, tx, store, oldValue, newValue;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        key = getKey(appConfig);\r\n                        return [4 /*yield*/, getDbPromise()];\r\n                    case 1:\r\n                        db = _a.sent();\r\n                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\r\n                        store = tx.objectStore(OBJECT_STORE_NAME);\r\n                        return [4 /*yield*/, store.get(key)];\r\n                    case 2:\r\n                        oldValue = _a.sent();\r\n                        newValue = updateFn(oldValue);\r\n                        if (newValue === oldValue) {\r\n                            return [2 /*return*/, newValue];\r\n                        }\r\n                        if (!(newValue === undefined)) return [3 /*break*/, 4];\r\n                        return [4 /*yield*/, store.delete(key)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 6];\r\n                    case 4: return [4 /*yield*/, store.put(newValue, key)];\r\n                    case 5:\r\n                        _a.sent();\r\n                        _a.label = 6;\r\n                    case 6: return [4 /*yield*/, tx.complete];\r\n                    case 7:\r\n                        _a.sent();\r\n                        return [2 /*return*/, newValue];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function getKey(appConfig) {\r\n        return appConfig.appName + \"!\" + appConfig.appId;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * Updates and returns the InstallationEntry from the database.\r\n     * Also triggers a registration request if it is necessary and possible.\r\n     */\r\n    function getInstallationEntry(appConfig) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var registrationPromise, installationEntry, _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, update(appConfig, function (oldEntry) {\r\n                            var installationEntry = updateOrCreateInstallationEntry(oldEntry);\r\n                            var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);\r\n                            registrationPromise = entryWithPromise.registrationPromise;\r\n                            return entryWithPromise.installationEntry;\r\n                        })];\r\n                    case 1:\r\n                        installationEntry = _b.sent();\r\n                        if (!(installationEntry.fid === INVALID_FID)) return [3 /*break*/, 3];\r\n                        _a = {};\r\n                        return [4 /*yield*/, registrationPromise];\r\n                    case 2: \r\n                    // FID generation failed. Waiting for the FID from the server.\r\n                    return [2 /*return*/, (_a.installationEntry = _b.sent(), _a)];\r\n                    case 3: return [2 /*return*/, {\r\n                            installationEntry: installationEntry,\r\n                            registrationPromise: registrationPromise\r\n                        }];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function updateOrCreateInstallationEntry(oldEntry) {\r\n        var entry = oldEntry || {\r\n            fid: generateFid(),\r\n            registrationStatus: 0 /* NOT_STARTED */\r\n        };\r\n        if (hasInstallationRequestTimedOut(entry)) {\r\n            return {\r\n                fid: entry.fid,\r\n                registrationStatus: 0 /* NOT_STARTED */\r\n            };\r\n        }\r\n        return entry;\r\n    }\r\n    /**\r\n     * If the Firebase Installation is not registered yet, this will trigger the registration\r\n     * and return an InProgressInstallationEntry.\r\n     */\r\n    function triggerRegistrationIfNecessary(appConfig, installationEntry) {\r\n        if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {\r\n            if (!navigator.onLine) {\r\n                // Registration required but app is offline.\r\n                var registrationPromiseWithError = Promise.reject(ERROR_FACTORY$1.create(\"app-offline\" /* APP_OFFLINE */));\r\n                return {\r\n                    installationEntry: installationEntry,\r\n                    registrationPromise: registrationPromiseWithError\r\n                };\r\n            }\r\n            // Try registering. Change status to IN_PROGRESS.\r\n            var inProgressEntry = {\r\n                fid: installationEntry.fid,\r\n                registrationStatus: 1 /* IN_PROGRESS */,\r\n                registrationTime: Date.now()\r\n            };\r\n            var registrationPromise = registerInstallation(appConfig, inProgressEntry);\r\n            return { installationEntry: inProgressEntry, registrationPromise: registrationPromise };\r\n        }\r\n        else if (installationEntry.registrationStatus === 1 /* IN_PROGRESS */) {\r\n            return {\r\n                installationEntry: installationEntry,\r\n                registrationPromise: waitUntilFidRegistration(appConfig)\r\n            };\r\n        }\r\n        else {\r\n            return { installationEntry: installationEntry };\r\n        }\r\n    }\r\n    /** This will be executed only once for each new Firebase Installation. */\r\n    function registerInstallation(appConfig, installationEntry) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var registeredInstallationEntry, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 7]);\r\n                        return [4 /*yield*/, createInstallation(appConfig, installationEntry)];\r\n                    case 1:\r\n                        registeredInstallationEntry = _a.sent();\r\n                        return [2 /*return*/, set(appConfig, registeredInstallationEntry)];\r\n                    case 2:\r\n                        e_1 = _a.sent();\r\n                        if (!(isServerError(e_1) && e_1.serverCode === 409)) return [3 /*break*/, 4];\r\n                        // Server returned a \"FID can not be used\" error.\r\n                        // Generate a new ID next time.\r\n                        return [4 /*yield*/, remove(appConfig)];\r\n                    case 3:\r\n                        // Server returned a \"FID can not be used\" error.\r\n                        // Generate a new ID next time.\r\n                        _a.sent();\r\n                        return [3 /*break*/, 6];\r\n                    case 4: \r\n                    // Registration failed. Set FID as not registered.\r\n                    return [4 /*yield*/, set(appConfig, {\r\n                            fid: installationEntry.fid,\r\n                            registrationStatus: 0 /* NOT_STARTED */\r\n                        })];\r\n                    case 5:\r\n                        // Registration failed. Set FID as not registered.\r\n                        _a.sent();\r\n                        _a.label = 6;\r\n                    case 6: throw e_1;\r\n                    case 7: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /** Call if FID registration is pending. */\r\n    function waitUntilFidRegistration(appConfig) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var entry;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, updateInstallationRequest(appConfig)];\r\n                    case 1:\r\n                        entry = _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];\r\n                        // createInstallation request still in progress.\r\n                        return [4 /*yield*/, sleep(100)];\r\n                    case 3:\r\n                        // createInstallation request still in progress.\r\n                        _a.sent();\r\n                        return [4 /*yield*/, updateInstallationRequest(appConfig)];\r\n                    case 4:\r\n                        entry = _a.sent();\r\n                        return [3 /*break*/, 2];\r\n                    case 5:\r\n                        if (entry.registrationStatus === 0 /* NOT_STARTED */) {\r\n                            throw ERROR_FACTORY$1.create(\"create-installation-failed\" /* CREATE_INSTALLATION_FAILED */);\r\n                        }\r\n                        return [2 /*return*/, entry];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Called only if there is a CreateInstallation request in progress.\r\n     *\r\n     * Updates the InstallationEntry in the DB based on the status of the\r\n     * CreateInstallation request.\r\n     *\r\n     * Returns the updated InstallationEntry.\r\n     */\r\n    function updateInstallationRequest(appConfig) {\r\n        return update(appConfig, function (oldEntry) {\r\n            if (!oldEntry) {\r\n                throw ERROR_FACTORY$1.create(\"installation-not-found\" /* INSTALLATION_NOT_FOUND */);\r\n            }\r\n            if (hasInstallationRequestTimedOut(oldEntry)) {\r\n                return {\r\n                    fid: oldEntry.fid,\r\n                    registrationStatus: 0 /* NOT_STARTED */\r\n                };\r\n            }\r\n            return oldEntry;\r\n        });\r\n    }\r\n    function hasInstallationRequestTimedOut(installationEntry) {\r\n        return (installationEntry.registrationStatus === 1 /* IN_PROGRESS */ &&\r\n            installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function generateAuthToken(appConfig, installationEntry) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var endpoint, headers, body, request, response, responseValue, completedAuthToken;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\r\n                        headers = getHeadersWithAuth(appConfig, installationEntry);\r\n                        body = {\r\n                            installation: {\r\n                                sdkVersion: PACKAGE_VERSION\r\n                            }\r\n                        };\r\n                        request = {\r\n                            method: 'POST',\r\n                            headers: headers,\r\n                            body: JSON.stringify(body)\r\n                        };\r\n                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (!response.ok) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, response.json()];\r\n                    case 2:\r\n                        responseValue = _a.sent();\r\n                        completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\r\n                        return [2 /*return*/, completedAuthToken];\r\n                    case 3: return [4 /*yield*/, getErrorFromResponse('Generate Auth Token', response)];\r\n                    case 4: throw _a.sent();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function getGenerateAuthTokenEndpoint(appConfig, _a) {\r\n        var fid = _a.fid;\r\n        return getInstallationsEndpoint(appConfig) + \"/\" + fid + \"/authTokens:generate\";\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    /**\r\n     * Returns a valid authentication token for the installation. Generates a new\r\n     * token if one doesn't exist, is expired or about to expire.\r\n     *\r\n     * Should only be called if the Firebase Installation is registered.\r\n     */\r\n    function refreshAuthToken(appConfig) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var tokenPromise, entry, authToken, _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, update(appConfig, function (oldEntry) {\r\n                            if (!isEntryRegistered(oldEntry)) {\r\n                                throw ERROR_FACTORY$1.create(\"not-registered\" /* NOT_REGISTERED */);\r\n                            }\r\n                            var oldAuthToken = oldEntry.authToken;\r\n                            if (isAuthTokenValid(oldAuthToken)) {\r\n                                // There is a valid token in the DB.\r\n                                return oldEntry;\r\n                            }\r\n                            else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {\r\n                                // There already is a token request in progress.\r\n                                tokenPromise = waitUntilAuthTokenRequest(appConfig);\r\n                                return oldEntry;\r\n                            }\r\n                            else {\r\n                                // No token or token expired.\r\n                                if (!navigator.onLine) {\r\n                                    throw ERROR_FACTORY$1.create(\"app-offline\" /* APP_OFFLINE */);\r\n                                }\r\n                                var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\r\n                                tokenPromise = fetchAuthTokenFromServer(appConfig, inProgressEntry);\r\n                                return inProgressEntry;\r\n                            }\r\n                        })];\r\n                    case 1:\r\n                        entry = _b.sent();\r\n                        if (!tokenPromise) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, tokenPromise];\r\n                    case 2:\r\n                        _a = _b.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        _a = entry.authToken;\r\n                        _b.label = 4;\r\n                    case 4:\r\n                        authToken = _a;\r\n                        return [2 /*return*/, authToken.token];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call only if FID is registered and Auth Token request is in progress.\r\n     */\r\n    function waitUntilAuthTokenRequest(appConfig) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var entry, authToken;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, updateAuthTokenRequest(appConfig)];\r\n                    case 1:\r\n                        entry = _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        if (!(entry.authToken.requestStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];\r\n                        // generateAuthToken still in progress.\r\n                        return [4 /*yield*/, sleep(100)];\r\n                    case 3:\r\n                        // generateAuthToken still in progress.\r\n                        _a.sent();\r\n                        return [4 /*yield*/, updateAuthTokenRequest(appConfig)];\r\n                    case 4:\r\n                        entry = _a.sent();\r\n                        return [3 /*break*/, 2];\r\n                    case 5:\r\n                        authToken = entry.authToken;\r\n                        if (authToken.requestStatus === 0 /* NOT_STARTED */) {\r\n                            throw ERROR_FACTORY$1.create(\"generate-token-failed\" /* GENERATE_TOKEN_FAILED */);\r\n                        }\r\n                        else {\r\n                            return [2 /*return*/, authToken];\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Called only if there is a GenerateAuthToken request in progress.\r\n     *\r\n     * Updates the InstallationEntry in the DB based on the status of the\r\n     * GenerateAuthToken request.\r\n     *\r\n     * Returns the updated InstallationEntry.\r\n     */\r\n    function updateAuthTokenRequest(appConfig) {\r\n        return update(appConfig, function (oldEntry) {\r\n            if (!isEntryRegistered(oldEntry)) {\r\n                throw ERROR_FACTORY$1.create(\"not-registered\" /* NOT_REGISTERED */);\r\n            }\r\n            var oldAuthToken = oldEntry.authToken;\r\n            if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\r\n                return __assign({}, oldEntry, { authToken: { requestStatus: 0 /* NOT_STARTED */ } });\r\n            }\r\n            return oldEntry;\r\n        });\r\n    }\r\n    function fetchAuthTokenFromServer(appConfig, installationEntry) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 3, , 8]);\r\n                        return [4 /*yield*/, generateAuthToken(appConfig, installationEntry)];\r\n                    case 1:\r\n                        authToken = _a.sent();\r\n                        updatedInstallationEntry = __assign({}, installationEntry, { authToken: authToken });\r\n                        return [4 /*yield*/, set(appConfig, updatedInstallationEntry)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, authToken];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        if (!(isServerError(e_1) && (e_1.serverCode === 401 || e_1.serverCode === 404))) return [3 /*break*/, 5];\r\n                        // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\r\n                        // Generate a new ID next time.\r\n                        return [4 /*yield*/, remove(appConfig)];\r\n                    case 4:\r\n                        // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\r\n                        // Generate a new ID next time.\r\n                        _a.sent();\r\n                        return [3 /*break*/, 7];\r\n                    case 5:\r\n                        updatedInstallationEntry = __assign({}, installationEntry, { authToken: { requestStatus: 0 /* NOT_STARTED */ } });\r\n                        return [4 /*yield*/, set(appConfig, updatedInstallationEntry)];\r\n                    case 6:\r\n                        _a.sent();\r\n                        _a.label = 7;\r\n                    case 7: throw e_1;\r\n                    case 8: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function isEntryRegistered(installationEntry) {\r\n        return (installationEntry !== undefined &&\r\n            installationEntry.registrationStatus === 2 /* COMPLETED */);\r\n    }\r\n    function isAuthTokenValid(authToken) {\r\n        return (authToken.requestStatus === 2 /* COMPLETED */ &&\r\n            !isAuthTokenExpired(authToken));\r\n    }\r\n    function isAuthTokenExpired(authToken) {\r\n        var now = Date.now();\r\n        return (now < authToken.creationTime ||\r\n            authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);\r\n    }\r\n    /** Returns an updated InstallationEntry with an InProgressAuthToken. */\r\n    function makeAuthTokenRequestInProgressEntry(oldEntry) {\r\n        var inProgressAuthToken = {\r\n            requestStatus: 1 /* IN_PROGRESS */,\r\n            requestTime: Date.now()\r\n        };\r\n        return __assign({}, oldEntry, { authToken: inProgressAuthToken });\r\n    }\r\n    function hasAuthTokenRequestTimedOut(authToken) {\r\n        return (authToken.requestStatus === 1 /* IN_PROGRESS */ &&\r\n            authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function getId(app) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var appConfig, _a, installationEntry, registrationPromise;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        appConfig = extractAppConfig(app);\r\n                        return [4 /*yield*/, getInstallationEntry(appConfig)];\r\n                    case 1:\r\n                        _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;\r\n                        if (registrationPromise) {\r\n                            // Suppress registration errors as they are not a problem for getId.\r\n                            registrationPromise.catch(function () { });\r\n                        }\r\n                        if (installationEntry.registrationStatus === 2 /* COMPLETED */) {\r\n                            // If the installation is already registered, update the authentication\r\n                            // token if needed. Suppress errors as they are not relevant to getId.\r\n                            refreshAuthToken(appConfig).catch(function () { });\r\n                        }\r\n                        return [2 /*return*/, installationEntry.fid];\r\n                }\r\n            });\r\n        });\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function getToken(app) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var appConfig;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        appConfig = extractAppConfig(app);\r\n                        return [4 /*yield*/, completeInstallationRegistration(appConfig)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        // At this point we either have a Registered Installation in the DB, or we've\r\n                        // already thrown an error.\r\n                        return [2 /*return*/, refreshAuthToken(appConfig)];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function completeInstallationRegistration(appConfig) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, installationEntry, registrationPromise;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, getInstallationEntry(appConfig)];\r\n                    case 1:\r\n                        _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;\r\n                        if (!registrationPromise) return [3 /*break*/, 3];\r\n                        // A createInstallation request is in progress. Wait until it finishes.\r\n                        return [4 /*yield*/, registrationPromise];\r\n                    case 2:\r\n                        // A createInstallation request is in progress. Wait until it finishes.\r\n                        _b.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        if (installationEntry.registrationStatus !== 2 /* COMPLETED */) {\r\n                            // Installation ID can't be registered.\r\n                            throw ERROR_FACTORY$1.create(\"create-installation-failed\" /* CREATE_INSTALLATION_FAILED */);\r\n                        }\r\n                        _b.label = 4;\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function deleteInstallation(appConfig, installationEntry) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var endpoint, headers, request, response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        endpoint = getDeleteEndpoint(appConfig, installationEntry);\r\n                        headers = getHeadersWithAuth(appConfig, installationEntry);\r\n                        request = {\r\n                            method: 'DELETE',\r\n                            headers: headers\r\n                        };\r\n                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (!!response.ok) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, getErrorFromResponse('Delete Installation', response)];\r\n                    case 2: throw _a.sent();\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function getDeleteEndpoint(appConfig, _a) {\r\n        var fid = _a.fid;\r\n        return getInstallationsEndpoint(appConfig) + \"/\" + fid;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function deleteInstallation$1(app) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var appConfig, entry;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        appConfig = extractAppConfig(app);\r\n                        return [4 /*yield*/, update(appConfig, function (oldEntry) {\r\n                                if (oldEntry && oldEntry.registrationStatus === 0 /* NOT_STARTED */) {\r\n                                    // Delete the unregistered entry without sending a deleteInstallation request.\r\n                                    return undefined;\r\n                                }\r\n                                return oldEntry;\r\n                            })];\r\n                    case 1:\r\n                        entry = _a.sent();\r\n                        if (!entry) return [3 /*break*/, 6];\r\n                        if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 2];\r\n                        // Can't delete while trying to register.\r\n                        throw ERROR_FACTORY$1.create(\"delete-pending-registration\" /* DELETE_PENDING_REGISTRATION */);\r\n                    case 2:\r\n                        if (!(entry.registrationStatus === 2 /* COMPLETED */)) return [3 /*break*/, 6];\r\n                        if (!!navigator.onLine) return [3 /*break*/, 3];\r\n                        throw ERROR_FACTORY$1.create(\"app-offline\" /* APP_OFFLINE */);\r\n                    case 3: return [4 /*yield*/, deleteInstallation(appConfig, entry)];\r\n                    case 4:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, remove(appConfig)];\r\n                    case 5:\r\n                        _a.sent();\r\n                        _a.label = 6;\r\n                    case 6: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2019 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function registerInstallations(instance) {\r\n        var installationsName = 'installations';\r\n        var factoryMethod = function (app) {\r\n            // Throws if app isn't configured properly.\r\n            extractAppConfig(app);\r\n            return {\r\n                app: app,\r\n                getId: function () { return getId(app); },\r\n                getToken: function () { return getToken(app); },\r\n                delete: function () { return deleteInstallation$1(app); }\r\n            };\r\n        };\r\n        instance.INTERNAL.registerService(installationsName, factoryMethod);\r\n    }\r\n    registerInstallations(firebase);\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var _a$2;\r\n    var ERROR_MAP = (_a$2 = {},\r\n        _a$2[\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */] = 'This method is available in a Window context.',\r\n        _a$2[\"only-available-in-sw\" /* AVAILABLE_IN_SW */] = 'This method is available in a service worker context.',\r\n        _a$2[\"should-be-overriden\" /* SHOULD_BE_INHERITED */] = 'This method should be overriden by extended classes.',\r\n        _a$2[\"bad-sender-id\" /* BAD_SENDER_ID */] = \"Please ensure that 'messagingSenderId' is set \" +\r\n            'correctly in the options passed into firebase.initializeApp().',\r\n        _a$2[\"permission-default\" /* PERMISSION_DEFAULT */] = 'The required permissions were not granted and dismissed instead.',\r\n        _a$2[\"permission-blocked\" /* PERMISSION_BLOCKED */] = 'The required permissions were not granted and blocked instead.',\r\n        _a$2[\"unsupported-browser\" /* UNSUPPORTED_BROWSER */] = \"This browser doesn't support the API's \" +\r\n            'required to use the firebase SDK.',\r\n        _a$2[\"notifications-blocked\" /* NOTIFICATIONS_BLOCKED */] = 'Notifications have been blocked.',\r\n        _a$2[\"failed-serviceworker-registration\" /* FAILED_DEFAULT_REGISTRATION */] = 'We are unable to register the ' +\r\n            'default service worker. {$browserErrorMessage}',\r\n        _a$2[\"sw-registration-expected\" /* SW_REGISTRATION_EXPECTED */] = 'A service worker registration was the expected input.',\r\n        _a$2[\"get-subscription-failed\" /* GET_SUBSCRIPTION_FAILED */] = 'There was an error when trying to get ' +\r\n            'any existing Push Subscriptions.',\r\n        _a$2[\"invalid-saved-token\" /* INVALID_SAVED_TOKEN */] = 'Unable to access details of the saved token.',\r\n        _a$2[\"sw-reg-redundant\" /* SW_REG_REDUNDANT */] = 'The service worker being used for push was made redundant.',\r\n        _a$2[\"token-subscribe-failed\" /* TOKEN_SUBSCRIBE_FAILED */] = 'A problem occured while subscribing the user to FCM: {$errorInfo}',\r\n        _a$2[\"token-subscribe-no-token\" /* TOKEN_SUBSCRIBE_NO_TOKEN */] = 'FCM returned no token when subscribing the user to push.',\r\n        _a$2[\"token-unsubscribe-failed\" /* TOKEN_UNSUBSCRIBE_FAILED */] = 'A problem occured while unsubscribing the ' +\r\n            'user from FCM: {$errorInfo}',\r\n        _a$2[\"token-update-failed\" /* TOKEN_UPDATE_FAILED */] = 'A problem occured while updating the user from FCM: {$errorInfo}',\r\n        _a$2[\"token-update-no-token\" /* TOKEN_UPDATE_NO_TOKEN */] = 'FCM returned no token when updating the user to push.',\r\n        _a$2[\"use-sw-before-get-token\" /* USE_SW_BEFORE_GET_TOKEN */] = 'The useServiceWorker() method may only be called once and must be ' +\r\n            'called before calling getToken() to ensure your service worker is used.',\r\n        _a$2[\"invalid-delete-token\" /* INVALID_DELETE_TOKEN */] = 'You must pass a valid token into ' +\r\n            'deleteToken(), i.e. the token from getToken().',\r\n        _a$2[\"delete-token-not-found\" /* DELETE_TOKEN_NOT_FOUND */] = 'The deletion attempt for token could not ' +\r\n            'be performed as the token was not found.',\r\n        _a$2[\"delete-scope-not-found\" /* DELETE_SCOPE_NOT_FOUND */] = 'The deletion attempt for service worker ' +\r\n            'scope could not be performed as the scope was not found.',\r\n        _a$2[\"bg-handler-function-expected\" /* BG_HANDLER_FUNCTION_EXPECTED */] = 'The input to setBackgroundMessageHandler() must be a function.',\r\n        _a$2[\"no-window-client-to-msg\" /* NO_WINDOW_CLIENT_TO_MSG */] = 'An attempt was made to message a non-existant window client.',\r\n        _a$2[\"unable-to-resubscribe\" /* UNABLE_TO_RESUBSCRIBE */] = 'There was an error while re-subscribing ' +\r\n            'the FCM token for push messaging. Will have to resubscribe the ' +\r\n            'user on next visit. {$errorInfo}',\r\n        _a$2[\"no-fcm-token-for-resubscribe\" /* NO_FCM_TOKEN_FOR_RESUBSCRIBE */] = 'Could not find an FCM token ' +\r\n            'and as a result, unable to resubscribe. Will have to resubscribe the ' +\r\n            'user on next visit.',\r\n        _a$2[\"failed-to-delete-token\" /* FAILED_TO_DELETE_TOKEN */] = 'Unable to delete the currently saved token.',\r\n        _a$2[\"no-sw-in-reg\" /* NO_SW_IN_REG */] = 'Even though the service worker registration was ' +\r\n            'successful, there was a problem accessing the service worker itself.',\r\n        _a$2[\"bad-scope\" /* BAD_SCOPE */] = 'The service worker scope must be a string with at ' +\r\n            'least one character.',\r\n        _a$2[\"bad-vapid-key\" /* BAD_VAPID_KEY */] = 'The public VAPID key is not a Uint8Array with 65 bytes.',\r\n        _a$2[\"bad-subscription\" /* BAD_SUBSCRIPTION */] = 'The subscription must be a valid PushSubscription.',\r\n        _a$2[\"bad-token\" /* BAD_TOKEN */] = 'The FCM Token used for storage / lookup was not ' +\r\n            'a valid token string.',\r\n        _a$2[\"failed-delete-vapid-key\" /* FAILED_DELETE_VAPID_KEY */] = 'The VAPID key could not be deleted.',\r\n        _a$2[\"invalid-public-vapid-key\" /* INVALID_PUBLIC_VAPID_KEY */] = 'The public VAPID key must be a string.',\r\n        _a$2[\"use-public-key-before-get-token\" /* USE_PUBLIC_KEY_BEFORE_GET_TOKEN */] = 'The usePublicVapidKey() method may only be called once and must be ' +\r\n            'called before calling getToken() to ensure your VAPID key is used.',\r\n        _a$2[\"public-vapid-key-decryption-failed\" /* PUBLIC_KEY_DECRYPTION_FAILED */] = 'The public VAPID key did not equal 65 bytes when decrypted.',\r\n        _a$2);\r\n    var errorFactory = new ErrorFactory('messaging', 'Messaging', ERROR_MAP);\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var DEFAULT_PUBLIC_VAPID_KEY = new Uint8Array([\r\n        0x04,\r\n        0x33,\r\n        0x94,\r\n        0xf7,\r\n        0xdf,\r\n        0xa1,\r\n        0xeb,\r\n        0xb1,\r\n        0xdc,\r\n        0x03,\r\n        0xa2,\r\n        0x5e,\r\n        0x15,\r\n        0x71,\r\n        0xdb,\r\n        0x48,\r\n        0xd3,\r\n        0x2e,\r\n        0xed,\r\n        0xed,\r\n        0xb2,\r\n        0x34,\r\n        0xdb,\r\n        0xb7,\r\n        0x47,\r\n        0x3a,\r\n        0x0c,\r\n        0x8f,\r\n        0xc4,\r\n        0xcc,\r\n        0xe1,\r\n        0x6f,\r\n        0x3c,\r\n        0x8c,\r\n        0x84,\r\n        0xdf,\r\n        0xab,\r\n        0xb6,\r\n        0x66,\r\n        0x3e,\r\n        0xf2,\r\n        0x0c,\r\n        0xd4,\r\n        0x8b,\r\n        0xfe,\r\n        0xe3,\r\n        0xf9,\r\n        0x76,\r\n        0x2f,\r\n        0x14,\r\n        0x1c,\r\n        0x63,\r\n        0x08,\r\n        0x6a,\r\n        0x6f,\r\n        0x2d,\r\n        0xb1,\r\n        0x1a,\r\n        0x95,\r\n        0xb0,\r\n        0xce,\r\n        0x37,\r\n        0xc0,\r\n        0x9c,\r\n        0x6e\r\n    ]);\r\n    var ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\r\n    var FN_CAMPAIGN_ID = 'google.c.a.c_id';\r\n    var FN_CAMPAIGN_NAME = 'google.c.a.c_l';\r\n    var FN_CAMPAIGN_TIME = 'google.c.a.ts';\r\n    /** Set to '1' if Analytics is enabled for the campaign */\r\n    var FN_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var MessageType;\r\n    (function (MessageType) {\r\n        MessageType[\"PUSH_MSG_RECEIVED\"] = \"push-msg-received\";\r\n        MessageType[\"NOTIFICATION_CLICKED\"] = \"notification-clicked\";\r\n    })(MessageType || (MessageType = {}));\n\n    /**\r\n     * @license\r\n     * Copyright 2018 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function isArrayBufferEqual(a, b) {\r\n        if (a == null || b == null) {\r\n            return false;\r\n        }\r\n        if (a === b) {\r\n            return true;\r\n        }\r\n        if (a.byteLength !== b.byteLength) {\r\n            return false;\r\n        }\r\n        var viewA = new DataView(a);\r\n        var viewB = new DataView(b);\r\n        for (var i = 0; i < a.byteLength; i++) {\r\n            if (viewA.getUint8(i) !== viewB.getUint8(i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function toBase64(arrayBuffer) {\r\n        var uint8Version = new Uint8Array(arrayBuffer);\r\n        return btoa(String.fromCharCode.apply(String, __spread(uint8Version)));\r\n    }\r\n    function arrayBufferToBase64(arrayBuffer) {\r\n        var base64String = toBase64(arrayBuffer);\r\n        return base64String\r\n            .replace(/=/g, '')\r\n            .replace(/\\+/g, '-')\r\n            .replace(/\\//g, '_');\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var SubscriptionManager = /** @class */ (function () {\r\n        function SubscriptionManager() {\r\n        }\r\n        SubscriptionManager.prototype.getToken = function (app, subscription, vapidKey) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var headers, body, subscribeOptions, responseData, response, err_1, message;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, getHeaders$1(app)];\r\n                        case 1:\r\n                            headers = _a.sent();\r\n                            body = getBody(subscription, vapidKey);\r\n                            subscribeOptions = {\r\n                                method: 'POST',\r\n                                headers: headers,\r\n                                body: JSON.stringify(body)\r\n                            };\r\n                            _a.label = 2;\r\n                        case 2:\r\n                            _a.trys.push([2, 5, , 6]);\r\n                            return [4 /*yield*/, fetch(getEndpoint(app), subscribeOptions)];\r\n                        case 3:\r\n                            response = _a.sent();\r\n                            return [4 /*yield*/, response.json()];\r\n                        case 4:\r\n                            responseData = _a.sent();\r\n                            return [3 /*break*/, 6];\r\n                        case 5:\r\n                            err_1 = _a.sent();\r\n                            throw errorFactory.create(\"token-subscribe-failed\" /* TOKEN_SUBSCRIBE_FAILED */, {\r\n                                errorInfo: err_1\r\n                            });\r\n                        case 6:\r\n                            if (responseData.error) {\r\n                                message = responseData.error.message;\r\n                                throw errorFactory.create(\"token-subscribe-failed\" /* TOKEN_SUBSCRIBE_FAILED */, {\r\n                                    errorInfo: message\r\n                                });\r\n                            }\r\n                            if (!responseData.token) {\r\n                                throw errorFactory.create(\"token-subscribe-no-token\" /* TOKEN_SUBSCRIBE_NO_TOKEN */);\r\n                            }\r\n                            return [2 /*return*/, responseData.token];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Update the underlying token details for fcmToken.\r\n         */\r\n        SubscriptionManager.prototype.updateToken = function (tokenDetails, app, subscription, vapidKey) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var headers, body, updateOptions, responseData, response, err_2, message;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, getHeaders$1(app)];\r\n                        case 1:\r\n                            headers = _a.sent();\r\n                            body = getBody(subscription, vapidKey);\r\n                            updateOptions = {\r\n                                method: 'PATCH',\r\n                                headers: headers,\r\n                                body: JSON.stringify(body)\r\n                            };\r\n                            _a.label = 2;\r\n                        case 2:\r\n                            _a.trys.push([2, 5, , 6]);\r\n                            return [4 /*yield*/, fetch(getEndpoint(app) + \"/\" + tokenDetails.fcmToken, updateOptions)];\r\n                        case 3:\r\n                            response = _a.sent();\r\n                            return [4 /*yield*/, response.json()];\r\n                        case 4:\r\n                            responseData = _a.sent();\r\n                            return [3 /*break*/, 6];\r\n                        case 5:\r\n                            err_2 = _a.sent();\r\n                            throw errorFactory.create(\"token-update-failed\" /* TOKEN_UPDATE_FAILED */, {\r\n                                errorInfo: err_2\r\n                            });\r\n                        case 6:\r\n                            if (responseData.error) {\r\n                                message = responseData.error.message;\r\n                                throw errorFactory.create(\"token-update-failed\" /* TOKEN_UPDATE_FAILED */, {\r\n                                    errorInfo: message\r\n                                });\r\n                            }\r\n                            if (!responseData.token) {\r\n                                throw errorFactory.create(\"token-update-no-token\" /* TOKEN_UPDATE_NO_TOKEN */);\r\n                            }\r\n                            return [2 /*return*/, responseData.token];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        SubscriptionManager.prototype.deleteToken = function (app, tokenDetails) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var headers, unsubscribeOptions, response, responseData, message, err_3;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, getHeaders$1(app)];\r\n                        case 1:\r\n                            headers = _a.sent();\r\n                            unsubscribeOptions = {\r\n                                method: 'DELETE',\r\n                                headers: headers\r\n                            };\r\n                            _a.label = 2;\r\n                        case 2:\r\n                            _a.trys.push([2, 5, , 6]);\r\n                            return [4 /*yield*/, fetch(getEndpoint(app) + \"/\" + tokenDetails.fcmToken, unsubscribeOptions)];\r\n                        case 3:\r\n                            response = _a.sent();\r\n                            return [4 /*yield*/, response.json()];\r\n                        case 4:\r\n                            responseData = _a.sent();\r\n                            if (responseData.error) {\r\n                                message = responseData.error.message;\r\n                                throw errorFactory.create(\"token-unsubscribe-failed\" /* TOKEN_UNSUBSCRIBE_FAILED */, {\r\n                                    errorInfo: message\r\n                                });\r\n                            }\r\n                            return [3 /*break*/, 6];\r\n                        case 5:\r\n                            err_3 = _a.sent();\r\n                            throw errorFactory.create(\"token-unsubscribe-failed\" /* TOKEN_UNSUBSCRIBE_FAILED */, {\r\n                                errorInfo: err_3\r\n                            });\r\n                        case 6: return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        return SubscriptionManager;\r\n    }());\r\n    function getEndpoint(app) {\r\n        return ENDPOINT + \"/projects/\" + app.options.projectId + \"/registrations\";\r\n    }\r\n    function getHeaders$1(app) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var installations, authToken;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        installations = app.installations();\r\n                        return [4 /*yield*/, installations.getToken()];\r\n                    case 1:\r\n                        authToken = _a.sent();\r\n                        return [2 /*return*/, new Headers({\r\n                                'Content-Type': 'application/json',\r\n                                Accept: 'application/json',\r\n                                'x-goog-api-key': app.options.apiKey,\r\n                                'x-goog-firebase-installations-auth': \"FIS \" + authToken\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function getBody(subscription, vapidKey) {\r\n        var p256dh = arrayBufferToBase64(subscription.getKey('p256dh'));\r\n        var auth = arrayBufferToBase64(subscription.getKey('auth'));\r\n        var body = {\r\n            web: {\r\n                endpoint: subscription.endpoint,\r\n                p256dh: p256dh,\r\n                auth: auth\r\n            }\r\n        };\r\n        if (!isArrayBufferEqual(vapidKey.buffer, DEFAULT_PUBLIC_VAPID_KEY.buffer)) {\r\n            body.web.applicationPubKey = arrayBufferToBase64(vapidKey);\r\n        }\r\n        return body;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function base64ToArrayBuffer(base64String) {\r\n        var padding = '='.repeat((4 - (base64String.length % 4)) % 4);\r\n        var base64 = (base64String + padding)\r\n            .replace(/\\-/g, '+')\r\n            .replace(/_/g, '/');\r\n        var rawData = atob(base64);\r\n        var outputArray = new Uint8Array(rawData.length);\r\n        for (var i = 0; i < rawData.length; ++i) {\r\n            outputArray[i] = rawData.charCodeAt(i);\r\n        }\r\n        return outputArray;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var OLD_DB_NAME = 'undefined';\r\n    var OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\r\n    function handleDb(db, app) {\r\n        if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\r\n            // We found a database with the name 'undefined', but our expected object\r\n            // store isn't defined.\r\n            return;\r\n        }\r\n        var transaction = db.transaction(OLD_OBJECT_STORE_NAME);\r\n        var objectStore = transaction.objectStore(OLD_OBJECT_STORE_NAME);\r\n        var subscriptionManager = new SubscriptionManager();\r\n        var openCursorRequest = objectStore.openCursor();\r\n        openCursorRequest.onerror = function (event) {\r\n            // NOOP - Nothing we can do.\r\n            console.warn('Unable to cleanup old IDB.', event);\r\n        };\r\n        openCursorRequest.onsuccess = function () {\r\n            var cursor = openCursorRequest.result;\r\n            if (cursor) {\r\n                // cursor.value contains the current record being iterated through\r\n                // this is where you'd do something with the result\r\n                var tokenDetails = cursor.value;\r\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                subscriptionManager.deleteToken(app, tokenDetails);\r\n                cursor.continue();\r\n            }\r\n            else {\r\n                db.close();\r\n                indexedDB.deleteDatabase(OLD_DB_NAME);\r\n            }\r\n        };\r\n    }\r\n    function cleanV1(app) {\r\n        var request = indexedDB.open(OLD_DB_NAME);\r\n        request.onerror = function (_event) {\r\n            // NOOP - Nothing we can do.\r\n        };\r\n        request.onsuccess = function (_event) {\r\n            var db = request.result;\r\n            handleDb(db, app);\r\n        };\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var DbInterface = /** @class */ (function () {\r\n        function DbInterface() {\r\n            this.dbPromise = null;\r\n        }\r\n        /** Gets record(s) from the objectStore that match the given key. */\r\n        DbInterface.prototype.get = function (key) {\r\n            return this.createTransaction(function (objectStore) { return objectStore.get(key); });\r\n        };\r\n        /** Gets record(s) from the objectStore that match the given index. */\r\n        DbInterface.prototype.getIndex = function (index, key) {\r\n            function runRequest(objectStore) {\r\n                var idbIndex = objectStore.index(index);\r\n                return idbIndex.get(key);\r\n            }\r\n            return this.createTransaction(runRequest);\r\n        };\r\n        /** Assigns or overwrites the record for the given value. */\r\n        // IndexedDB values are of type \"any\"\r\n        DbInterface.prototype.put = function (value) {\r\n            return this.createTransaction(function (objectStore) { return objectStore.put(value); }, 'readwrite');\r\n        };\r\n        /** Deletes record(s) from the objectStore that match the given key. */\r\n        DbInterface.prototype.delete = function (key) {\r\n            return this.createTransaction(function (objectStore) { return objectStore.delete(key); }, 'readwrite');\r\n        };\r\n        /**\r\n         * Close the currently open database.\r\n         */\r\n        DbInterface.prototype.closeDatabase = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var db;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            if (!this.dbPromise) return [3 /*break*/, 2];\r\n                            return [4 /*yield*/, this.dbPromise];\r\n                        case 1:\r\n                            db = _a.sent();\r\n                            db.close();\r\n                            this.dbPromise = null;\r\n                            _a.label = 2;\r\n                        case 2: return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Creates an IndexedDB Transaction and passes its objectStore to the\r\n         * runRequest function, which runs the database request.\r\n         *\r\n         * @return Promise that resolves with the result of the runRequest function\r\n         */\r\n        DbInterface.prototype.createTransaction = function (runRequest, mode) {\r\n            if (mode === void 0) { mode = 'readonly'; }\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var db, transaction, request, result;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.getDb()];\r\n                        case 1:\r\n                            db = _a.sent();\r\n                            transaction = db.transaction(this.objectStoreName, mode);\r\n                            request = transaction.objectStore(this.objectStoreName);\r\n                            return [4 /*yield*/, promisify(runRequest(request))];\r\n                        case 2:\r\n                            result = _a.sent();\r\n                            return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                                    transaction.oncomplete = function () {\r\n                                        resolve(result);\r\n                                    };\r\n                                    transaction.onerror = function () {\r\n                                        reject(transaction.error);\r\n                                    };\r\n                                })];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /** Gets the cached db connection or opens a new one. */\r\n        DbInterface.prototype.getDb = function () {\r\n            var _this = this;\r\n            if (!this.dbPromise) {\r\n                this.dbPromise = new Promise(function (resolve, reject) {\r\n                    var request = indexedDB.open(_this.dbName, _this.dbVersion);\r\n                    request.onsuccess = function () {\r\n                        resolve(request.result);\r\n                    };\r\n                    request.onerror = function () {\r\n                        _this.dbPromise = null;\r\n                        reject(request.error);\r\n                    };\r\n                    request.onupgradeneeded = function (event) { return _this.onDbUpgrade(request, event); };\r\n                });\r\n            }\r\n            return this.dbPromise;\r\n        };\r\n        return DbInterface;\r\n    }());\r\n    /** Promisifies an IDBRequest. Resolves with the IDBRequest's result. */\r\n    function promisify(request) {\r\n        return new Promise(function (resolve, reject) {\r\n            request.onsuccess = function () {\r\n                resolve(request.result);\r\n            };\r\n            request.onerror = function () {\r\n                reject(request.error);\r\n            };\r\n        });\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var TokenDetailsModel = /** @class */ (function (_super) {\r\n        __extends(TokenDetailsModel, _super);\r\n        function TokenDetailsModel(app) {\r\n            var _this = _super.call(this) || this;\r\n            _this.app = app;\r\n            _this.dbName = 'fcm_token_details_db';\r\n            _this.dbVersion = 4;\r\n            _this.objectStoreName = 'fcm_token_object_Store';\r\n            return _this;\r\n        }\r\n        TokenDetailsModel.prototype.onDbUpgrade = function (request, event) {\r\n            var db = request.result;\r\n            // Lack of 'break' statements is intentional.\r\n            switch (event.oldVersion) {\r\n                case 0: {\r\n                    // New IDB instance\r\n                    var objectStore = db.createObjectStore(this.objectStoreName, {\r\n                        keyPath: 'swScope'\r\n                    });\r\n                    // Make sure the sender ID can be searched\r\n                    objectStore.createIndex('fcmSenderId', 'fcmSenderId', {\r\n                        unique: false\r\n                    });\r\n                    objectStore.createIndex('fcmToken', 'fcmToken', { unique: true });\r\n                }\r\n                case 1: {\r\n                    // Prior to version 2, we were using either 'fcm_token_details_db'\r\n                    // or 'undefined' as the database name due to bug in the SDK\r\n                    // So remove the old tokens and databases.\r\n                    cleanV1(this.app);\r\n                }\r\n                case 2: {\r\n                    // Update from v2 to v4 directly in a single openCursor request.\r\n                    // We need to do this because for some reason, doing a subsequent update on the same data\r\n                    // in the same transaction drops the first update.\r\n                    var objectStore = request.transaction.objectStore(this.objectStoreName);\r\n                    var cursorRequest_1 = objectStore.openCursor();\r\n                    cursorRequest_1.onsuccess = function () {\r\n                        var cursor = cursorRequest_1.result;\r\n                        if (cursor) {\r\n                            var value = cursor.value;\r\n                            var newValue = __assign({}, value);\r\n                            if (!value.createTime) {\r\n                                newValue.createTime = Date.now();\r\n                            }\r\n                            if (typeof value.vapidKey === 'string') {\r\n                                newValue.vapidKey = base64ToArrayBuffer(value.vapidKey);\r\n                            }\r\n                            if (typeof value.auth === 'string') {\r\n                                newValue.auth = base64ToArrayBuffer(value.auth).buffer;\r\n                            }\r\n                            if (typeof value.auth === 'string') {\r\n                                newValue.p256dh = base64ToArrayBuffer(value.p256dh).buffer;\r\n                            }\r\n                            if (typeof value.fcmPushSet === 'string') {\r\n                                delete newValue.fcmPushSet;\r\n                            }\r\n                            cursor.update(newValue);\r\n                            cursor.continue();\r\n                        }\r\n                    };\r\n                    // Break here as we've already updated to v4.\r\n                    break;\r\n                }\r\n                case 3: {\r\n                    // Update from V3 to V4.\r\n                    var objectStore = request.transaction.objectStore(this.objectStoreName);\r\n                    var cursorRequest_2 = objectStore.openCursor();\r\n                    cursorRequest_2.onsuccess = function () {\r\n                        var cursor = cursorRequest_2.result;\r\n                        if (cursor) {\r\n                            var value = cursor.value;\r\n                            var newValue = __assign({}, value);\r\n                            if (typeof value.fcmPushSet === 'string') {\r\n                                delete newValue.fcmPushSet;\r\n                            }\r\n                            cursor.update(newValue);\r\n                            cursor.continue();\r\n                        }\r\n                    };\r\n                }\r\n                default: // ignore\r\n            }\r\n        };\r\n        /**\r\n         * Given a token, this method will look up the details in indexedDB.\r\n         */\r\n        TokenDetailsModel.prototype.getTokenDetailsFromToken = function (fcmToken) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    if (!fcmToken) {\r\n                        throw errorFactory.create(\"bad-token\" /* BAD_TOKEN */);\r\n                    }\r\n                    validateInputs({ fcmToken: fcmToken });\r\n                    return [2 /*return*/, this.getIndex('fcmToken', fcmToken)];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Given a service worker scope, this method will look up the details in\r\n         * indexedDB.\r\n         * @return The details associated with that token.\r\n         */\r\n        TokenDetailsModel.prototype.getTokenDetailsFromSWScope = function (swScope) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    if (!swScope) {\r\n                        throw errorFactory.create(\"bad-scope\" /* BAD_SCOPE */);\r\n                    }\r\n                    validateInputs({ swScope: swScope });\r\n                    return [2 /*return*/, this.get(swScope)];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Save the details for the fcm token for re-use at a later date.\r\n         * @param input A plain js object containing args to save.\r\n         */\r\n        TokenDetailsModel.prototype.saveTokenDetails = function (tokenDetails) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    if (!tokenDetails.swScope) {\r\n                        throw errorFactory.create(\"bad-scope\" /* BAD_SCOPE */);\r\n                    }\r\n                    if (!tokenDetails.vapidKey) {\r\n                        throw errorFactory.create(\"bad-vapid-key\" /* BAD_VAPID_KEY */);\r\n                    }\r\n                    if (!tokenDetails.endpoint || !tokenDetails.auth || !tokenDetails.p256dh) {\r\n                        throw errorFactory.create(\"bad-subscription\" /* BAD_SUBSCRIPTION */);\r\n                    }\r\n                    if (!tokenDetails.fcmSenderId) {\r\n                        throw errorFactory.create(\"bad-sender-id\" /* BAD_SENDER_ID */);\r\n                    }\r\n                    if (!tokenDetails.fcmToken) {\r\n                        throw errorFactory.create(\"bad-token\" /* BAD_TOKEN */);\r\n                    }\r\n                    validateInputs(tokenDetails);\r\n                    return [2 /*return*/, this.put(tokenDetails)];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This method deletes details of the current FCM token.\r\n         * It's returning a promise in case we need to move to an async\r\n         * method for deleting at a later date.\r\n         *\r\n         * @return Resolves once the FCM token details have been deleted and returns\r\n         * the deleted details.\r\n         */\r\n        TokenDetailsModel.prototype.deleteToken = function (token) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var details;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            if (typeof token !== 'string' || token.length === 0) {\r\n                                return [2 /*return*/, Promise.reject(errorFactory.create(\"invalid-delete-token\" /* INVALID_DELETE_TOKEN */))];\r\n                            }\r\n                            return [4 /*yield*/, this.getTokenDetailsFromToken(token)];\r\n                        case 1:\r\n                            details = _a.sent();\r\n                            if (!details) {\r\n                                throw errorFactory.create(\"delete-token-not-found\" /* DELETE_TOKEN_NOT_FOUND */);\r\n                            }\r\n                            return [4 /*yield*/, this.delete(details.swScope)];\r\n                        case 2:\r\n                            _a.sent();\r\n                            return [2 /*return*/, details];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        return TokenDetailsModel;\r\n    }(DbInterface));\r\n    /**\r\n     * This method takes an object and will check for known arguments and\r\n     * validate the input.\r\n     * @return Promise that resolves if input is valid, rejects otherwise.\r\n     */\r\n    function validateInputs(input) {\r\n        if (input.fcmToken) {\r\n            if (typeof input.fcmToken !== 'string' || input.fcmToken.length === 0) {\r\n                throw errorFactory.create(\"bad-token\" /* BAD_TOKEN */);\r\n            }\r\n        }\r\n        if (input.swScope) {\r\n            if (typeof input.swScope !== 'string' || input.swScope.length === 0) {\r\n                throw errorFactory.create(\"bad-scope\" /* BAD_SCOPE */);\r\n            }\r\n        }\r\n        if (input.vapidKey) {\r\n            if (!(input.vapidKey instanceof Uint8Array) ||\r\n                input.vapidKey.length !== 65) {\r\n                throw errorFactory.create(\"bad-vapid-key\" /* BAD_VAPID_KEY */);\r\n            }\r\n        }\r\n        if (input.endpoint) {\r\n            if (typeof input.endpoint !== 'string' || input.endpoint.length === 0) {\r\n                throw errorFactory.create(\"bad-subscription\" /* BAD_SUBSCRIPTION */);\r\n            }\r\n        }\r\n        if (input.auth) {\r\n            if (!(input.auth instanceof ArrayBuffer)) {\r\n                throw errorFactory.create(\"bad-subscription\" /* BAD_SUBSCRIPTION */);\r\n            }\r\n        }\r\n        if (input.p256dh) {\r\n            if (!(input.p256dh instanceof ArrayBuffer)) {\r\n                throw errorFactory.create(\"bad-subscription\" /* BAD_SUBSCRIPTION */);\r\n            }\r\n        }\r\n        if (input.fcmSenderId) {\r\n            if (typeof input.fcmSenderId !== 'string' ||\r\n                input.fcmSenderId.length === 0) {\r\n                throw errorFactory.create(\"bad-sender-id\" /* BAD_SENDER_ID */);\r\n            }\r\n        }\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var UNCOMPRESSED_PUBLIC_KEY_SIZE = 65;\r\n    var VapidDetailsModel = /** @class */ (function (_super) {\r\n        __extends(VapidDetailsModel, _super);\r\n        function VapidDetailsModel() {\r\n            var _this = _super !== null && _super.apply(this, arguments) || this;\r\n            _this.dbName = 'fcm_vapid_details_db';\r\n            _this.dbVersion = 1;\r\n            _this.objectStoreName = 'fcm_vapid_object_Store';\r\n            return _this;\r\n        }\r\n        VapidDetailsModel.prototype.onDbUpgrade = function (request) {\r\n            var db = request.result;\r\n            db.createObjectStore(this.objectStoreName, { keyPath: 'swScope' });\r\n        };\r\n        /**\r\n         * Given a service worker scope, this method will look up the vapid key\r\n         * in indexedDB.\r\n         */\r\n        VapidDetailsModel.prototype.getVapidFromSWScope = function (swScope) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var result;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            if (typeof swScope !== 'string' || swScope.length === 0) {\r\n                                throw errorFactory.create(\"bad-scope\" /* BAD_SCOPE */);\r\n                            }\r\n                            return [4 /*yield*/, this.get(swScope)];\r\n                        case 1:\r\n                            result = _a.sent();\r\n                            return [2 /*return*/, result ? result.vapidKey : undefined];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Save a vapid key against a swScope for later date.\r\n         */\r\n        VapidDetailsModel.prototype.saveVapidDetails = function (swScope, vapidKey) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var details;\r\n                return __generator(this, function (_a) {\r\n                    if (typeof swScope !== 'string' || swScope.length === 0) {\r\n                        throw errorFactory.create(\"bad-scope\" /* BAD_SCOPE */);\r\n                    }\r\n                    if (vapidKey === null || vapidKey.length !== UNCOMPRESSED_PUBLIC_KEY_SIZE) {\r\n                        throw errorFactory.create(\"bad-vapid-key\" /* BAD_VAPID_KEY */);\r\n                    }\r\n                    details = {\r\n                        swScope: swScope,\r\n                        vapidKey: vapidKey\r\n                    };\r\n                    return [2 /*return*/, this.put(details)];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This method deletes details of the current FCM VAPID key for a SW scope.\r\n         * Resolves once the scope/vapid details have been deleted and returns the\r\n         * deleted vapid key.\r\n         */\r\n        VapidDetailsModel.prototype.deleteVapidDetails = function (swScope) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var vapidKey;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.getVapidFromSWScope(swScope)];\r\n                        case 1:\r\n                            vapidKey = _a.sent();\r\n                            if (!vapidKey) {\r\n                                throw errorFactory.create(\"delete-scope-not-found\" /* DELETE_SCOPE_NOT_FOUND */);\r\n                            }\r\n                            return [4 /*yield*/, this.delete(swScope)];\r\n                        case 2:\r\n                            _a.sent();\r\n                            return [2 /*return*/, vapidKey];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        return VapidDetailsModel;\r\n    }(DbInterface));\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    // Token should be refreshed once a week.\r\n    var TOKEN_EXPIRATION_MILLIS = 7 * 24 * 60 * 60 * 1000; // 7 days\r\n    var BaseController = /** @class */ (function () {\r\n        function BaseController(app) {\r\n            var _this = this;\r\n            this.app = app;\r\n            this.vapidDetailsModel = new VapidDetailsModel();\r\n            this.subscriptionManager = new SubscriptionManager();\r\n            if (!app.options.messagingSenderId ||\r\n                typeof app.options.messagingSenderId !== 'string') {\r\n                throw errorFactory.create(\"bad-sender-id\" /* BAD_SENDER_ID */);\r\n            }\r\n            this.INTERNAL = {\r\n                delete: function () { return _this.delete(); }\r\n            };\r\n            this.tokenDetailsModel = new TokenDetailsModel(app);\r\n        }\r\n        BaseController.prototype.getToken = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var currentPermission, swReg, publicVapidKey, pushSubscription, tokenDetails;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            currentPermission = this.getNotificationPermission_();\r\n                            if (currentPermission === 'denied') {\r\n                                throw errorFactory.create(\"notifications-blocked\" /* NOTIFICATIONS_BLOCKED */);\r\n                            }\r\n                            else if (currentPermission !== 'granted') {\r\n                                // We must wait for permission to be granted\r\n                                return [2 /*return*/, null];\r\n                            }\r\n                            return [4 /*yield*/, this.getSWRegistration_()];\r\n                        case 1:\r\n                            swReg = _a.sent();\r\n                            return [4 /*yield*/, this.getPublicVapidKey_()];\r\n                        case 2:\r\n                            publicVapidKey = _a.sent();\r\n                            return [4 /*yield*/, this.getPushSubscription(swReg, publicVapidKey)];\r\n                        case 3:\r\n                            pushSubscription = _a.sent();\r\n                            return [4 /*yield*/, this.tokenDetailsModel.getTokenDetailsFromSWScope(swReg.scope)];\r\n                        case 4:\r\n                            tokenDetails = _a.sent();\r\n                            if (tokenDetails) {\r\n                                return [2 /*return*/, this.manageExistingToken(swReg, pushSubscription, publicVapidKey, tokenDetails)];\r\n                            }\r\n                            return [2 /*return*/, this.getNewToken(swReg, pushSubscription, publicVapidKey)];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * manageExistingToken is triggered if there's an existing FCM token in the\r\n         * database and it can take 3 different actions:\r\n         * 1) Retrieve the existing FCM token from the database.\r\n         * 2) If VAPID details have changed: Delete the existing token and create a\r\n         * new one with the new VAPID key.\r\n         * 3) If the database cache is invalidated: Send a request to FCM to update\r\n         * the token, and to check if the token is still valid on FCM-side.\r\n         */\r\n        BaseController.prototype.manageExistingToken = function (swReg, pushSubscription, publicVapidKey, tokenDetails) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var isTokenValid, now;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            isTokenValid = isTokenStillValid(pushSubscription, publicVapidKey, tokenDetails);\r\n                            if (!isTokenValid) return [3 /*break*/, 1];\r\n                            now = Date.now();\r\n                            if (now < tokenDetails.createTime + TOKEN_EXPIRATION_MILLIS) {\r\n                                return [2 /*return*/, tokenDetails.fcmToken];\r\n                            }\r\n                            else {\r\n                                return [2 /*return*/, this.updateToken(swReg, pushSubscription, publicVapidKey, tokenDetails)];\r\n                            }\r\n                            return [3 /*break*/, 3];\r\n                        case 1: \r\n                        // If the token is no longer valid (for example if the VAPID details\r\n                        // have changed), delete the existing token from the FCM client and server\r\n                        // database. No need to unsubscribe from the Service Worker as we have a\r\n                        // good push subscription that we'd like to use in getNewToken.\r\n                        return [4 /*yield*/, this.deleteTokenFromDB(tokenDetails.fcmToken)];\r\n                        case 2:\r\n                            // If the token is no longer valid (for example if the VAPID details\r\n                            // have changed), delete the existing token from the FCM client and server\r\n                            // database. No need to unsubscribe from the Service Worker as we have a\r\n                            // good push subscription that we'd like to use in getNewToken.\r\n                            _a.sent();\r\n                            return [2 /*return*/, this.getNewToken(swReg, pushSubscription, publicVapidKey)];\r\n                        case 3: return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        BaseController.prototype.updateToken = function (swReg, pushSubscription, publicVapidKey, tokenDetails) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var updatedToken, allDetails, e_1;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            _a.trys.push([0, 4, , 6]);\r\n                            return [4 /*yield*/, this.subscriptionManager.updateToken(tokenDetails, this.app, pushSubscription, publicVapidKey)];\r\n                        case 1:\r\n                            updatedToken = _a.sent();\r\n                            allDetails = {\r\n                                swScope: swReg.scope,\r\n                                vapidKey: publicVapidKey,\r\n                                fcmSenderId: this.app.options.messagingSenderId,\r\n                                fcmToken: updatedToken,\r\n                                createTime: Date.now(),\r\n                                endpoint: pushSubscription.endpoint,\r\n                                auth: pushSubscription.getKey('auth'),\r\n                                p256dh: pushSubscription.getKey('p256dh')\r\n                            };\r\n                            return [4 /*yield*/, this.tokenDetailsModel.saveTokenDetails(allDetails)];\r\n                        case 2:\r\n                            _a.sent();\r\n                            return [4 /*yield*/, this.vapidDetailsModel.saveVapidDetails(swReg.scope, publicVapidKey)];\r\n                        case 3:\r\n                            _a.sent();\r\n                            return [2 /*return*/, updatedToken];\r\n                        case 4:\r\n                            e_1 = _a.sent();\r\n                            return [4 /*yield*/, this.deleteToken(tokenDetails.fcmToken)];\r\n                        case 5:\r\n                            _a.sent();\r\n                            throw e_1;\r\n                        case 6: return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        BaseController.prototype.getNewToken = function (swReg, pushSubscription, publicVapidKey) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var newToken, allDetails;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.subscriptionManager.getToken(this.app, pushSubscription, publicVapidKey)];\r\n                        case 1:\r\n                            newToken = _a.sent();\r\n                            allDetails = {\r\n                                swScope: swReg.scope,\r\n                                vapidKey: publicVapidKey,\r\n                                fcmSenderId: this.app.options.messagingSenderId,\r\n                                fcmToken: newToken,\r\n                                createTime: Date.now(),\r\n                                endpoint: pushSubscription.endpoint,\r\n                                auth: pushSubscription.getKey('auth'),\r\n                                p256dh: pushSubscription.getKey('p256dh')\r\n                            };\r\n                            return [4 /*yield*/, this.tokenDetailsModel.saveTokenDetails(allDetails)];\r\n                        case 2:\r\n                            _a.sent();\r\n                            return [4 /*yield*/, this.vapidDetailsModel.saveVapidDetails(swReg.scope, publicVapidKey)];\r\n                        case 3:\r\n                            _a.sent();\r\n                            return [2 /*return*/, newToken];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This method deletes tokens that the token manager looks after,\r\n         * unsubscribes the token from FCM  and then unregisters the push\r\n         * subscription if it exists. It returns a promise that indicates\r\n         * whether or not the unsubscribe request was processed successfully.\r\n         */\r\n        BaseController.prototype.deleteToken = function (token) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var registration, pushSubscription;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: \r\n                        // Delete the token details from the database.\r\n                        return [4 /*yield*/, this.deleteTokenFromDB(token)];\r\n                        case 1:\r\n                            // Delete the token details from the database.\r\n                            _a.sent();\r\n                            return [4 /*yield*/, this.getSWRegistration_()];\r\n                        case 2:\r\n                            registration = _a.sent();\r\n                            if (!registration) return [3 /*break*/, 4];\r\n                            return [4 /*yield*/, registration.pushManager.getSubscription()];\r\n                        case 3:\r\n                            pushSubscription = _a.sent();\r\n                            if (pushSubscription) {\r\n                                return [2 /*return*/, pushSubscription.unsubscribe()];\r\n                            }\r\n                            _a.label = 4;\r\n                        case 4: \r\n                        // If there's no SW, consider it a success.\r\n                        return [2 /*return*/, true];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This method will delete the token from the client database, and make a\r\n         * call to FCM to remove it from the server DB. Does not temper with the\r\n         * push subscription.\r\n         */\r\n        BaseController.prototype.deleteTokenFromDB = function (token) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var tokenDetails;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.tokenDetailsModel.deleteToken(token)];\r\n                        case 1:\r\n                            tokenDetails = _a.sent();\r\n                            return [4 /*yield*/, this.subscriptionManager.deleteToken(this.app, tokenDetails)];\r\n                        case 2:\r\n                            _a.sent();\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a PushSubscription for the current user.\r\n         */\r\n        BaseController.prototype.getPushSubscription = function (swRegistration, publicVapidKey) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var subscription;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, swRegistration.pushManager.getSubscription()];\r\n                        case 1:\r\n                            subscription = _a.sent();\r\n                            if (subscription) {\r\n                                return [2 /*return*/, subscription];\r\n                            }\r\n                            return [2 /*return*/, swRegistration.pushManager.subscribe({\r\n                                    userVisibleOnly: true,\r\n                                    applicationServerKey: publicVapidKey\r\n                                })];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        //\r\n        // The following methods should only be available in the window.\r\n        //\r\n        /**\r\n         * @deprecated Use Notification.requestPermission() instead.\r\n         * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\r\n         */\r\n        BaseController.prototype.requestPermission = function () {\r\n            throw errorFactory.create(\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */);\r\n        };\r\n        BaseController.prototype.useServiceWorker = function (_registration) {\r\n            throw errorFactory.create(\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */);\r\n        };\r\n        BaseController.prototype.usePublicVapidKey = function (_b64PublicKey) {\r\n            throw errorFactory.create(\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */);\r\n        };\r\n        BaseController.prototype.onMessage = function (_nextOrObserver, _error, _completed) {\r\n            throw errorFactory.create(\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */);\r\n        };\r\n        BaseController.prototype.onTokenRefresh = function (_nextOrObserver, _error, _completed) {\r\n            throw errorFactory.create(\"only-available-in-window\" /* AVAILABLE_IN_WINDOW */);\r\n        };\r\n        //\r\n        // The following methods are used by the service worker only.\r\n        //\r\n        BaseController.prototype.setBackgroundMessageHandler = function (_callback) {\r\n            throw errorFactory.create(\"only-available-in-sw\" /* AVAILABLE_IN_SW */);\r\n        };\r\n        //\r\n        // The following methods are used by the service themselves and not exposed\r\n        // publicly or not expected to be used by developers.\r\n        //\r\n        /**\r\n         * This method is required to adhere to the Firebase interface.\r\n         * It closes any currently open indexdb database connections.\r\n         */\r\n        BaseController.prototype.delete = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, Promise.all([\r\n                                this.tokenDetailsModel.closeDatabase(),\r\n                                this.vapidDetailsModel.closeDatabase()\r\n                            ])];\r\n                        case 1:\r\n                            _a.sent();\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Returns the current Notification Permission state.\r\n         */\r\n        BaseController.prototype.getNotificationPermission_ = function () {\r\n            return Notification.permission;\r\n        };\r\n        BaseController.prototype.getTokenDetailsModel = function () {\r\n            return this.tokenDetailsModel;\r\n        };\r\n        BaseController.prototype.getVapidDetailsModel = function () {\r\n            return this.vapidDetailsModel;\r\n        };\r\n        // Visible for testing\r\n        // TODO: make protected\r\n        BaseController.prototype.getSubscriptionManager = function () {\r\n            return this.subscriptionManager;\r\n        };\r\n        return BaseController;\r\n    }());\r\n    /**\r\n     * Checks if the tokenDetails match the details provided in the clients.\r\n     */\r\n    function isTokenStillValid(pushSubscription, publicVapidKey, tokenDetails) {\r\n        if (!tokenDetails.vapidKey ||\r\n            !isArrayBufferEqual(publicVapidKey.buffer, tokenDetails.vapidKey.buffer)) {\r\n            return false;\r\n        }\r\n        var isEndpointEqual = pushSubscription.endpoint === tokenDetails.endpoint;\r\n        var isAuthEqual = isArrayBufferEqual(pushSubscription.getKey('auth'), tokenDetails.auth);\r\n        var isP256dhEqual = isArrayBufferEqual(pushSubscription.getKey('p256dh'), tokenDetails.p256dh);\r\n        return isEndpointEqual && isAuthEqual && isP256dhEqual;\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var FCM_MSG = 'FCM_MSG';\r\n    var SwController = /** @class */ (function (_super) {\r\n        __extends(SwController, _super);\r\n        function SwController(app) {\r\n            var _this = _super.call(this, app) || this;\r\n            _this.bgMessageHandler = null;\r\n            self.addEventListener('push', function (e) {\r\n                _this.onPush(e);\r\n            });\r\n            self.addEventListener('pushsubscriptionchange', function (e) {\r\n                _this.onSubChange(e);\r\n            });\r\n            self.addEventListener('notificationclick', function (e) {\r\n                _this.onNotificationClick(e);\r\n            });\r\n            return _this;\r\n        }\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        SwController.prototype.onPush = function (event) {\r\n            event.waitUntil(this.onPush_(event));\r\n        };\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        SwController.prototype.onSubChange = function (event) {\r\n            event.waitUntil(this.onSubChange_(event));\r\n        };\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        SwController.prototype.onNotificationClick = function (event) {\r\n            event.waitUntil(this.onNotificationClick_(event));\r\n        };\r\n        /**\r\n         * A handler for push events that shows notifications based on the content of\r\n         * the payload.\r\n         *\r\n         * The payload must be a JSON-encoded Object with a `notification` key. The\r\n         * value of the `notification` property will be used as the NotificationOptions\r\n         * object passed to showNotification. Additionally, the `title` property of the\r\n         * notification object will be used as the title.\r\n         *\r\n         * If there is no notification data in the payload then no notification will be\r\n         * shown.\r\n         */\r\n        SwController.prototype.onPush_ = function (event) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var msgPayload, hasVisibleClients, notificationDetails, notificationTitle, reg, actions, maxActions;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            if (!event.data) {\r\n                                return [2 /*return*/];\r\n                            }\r\n                            try {\r\n                                msgPayload = event.data.json();\r\n                            }\r\n                            catch (err) {\r\n                                // Not JSON so not an FCM message\r\n                                return [2 /*return*/];\r\n                            }\r\n                            return [4 /*yield*/, this.hasVisibleClients_()];\r\n                        case 1:\r\n                            hasVisibleClients = _a.sent();\r\n                            if (hasVisibleClients) {\r\n                                // App in foreground. Send to page.\r\n                                return [2 /*return*/, this.sendMessageToWindowClients_(msgPayload)];\r\n                            }\r\n                            notificationDetails = this.getNotificationData_(msgPayload);\r\n                            if (!notificationDetails) return [3 /*break*/, 3];\r\n                            notificationTitle = notificationDetails.title || '';\r\n                            return [4 /*yield*/, this.getSWRegistration_()];\r\n                        case 2:\r\n                            reg = _a.sent();\r\n                            actions = notificationDetails.actions;\r\n                            maxActions = Notification.maxActions;\r\n                            if (actions && maxActions && actions.length > maxActions) {\r\n                                console.warn(\"This browser only supports \" + maxActions + \" actions.\" +\r\n                                    \"The remaining actions will not be displayed.\");\r\n                            }\r\n                            return [2 /*return*/, reg.showNotification(notificationTitle, notificationDetails)];\r\n                        case 3:\r\n                            if (!this.bgMessageHandler) return [3 /*break*/, 5];\r\n                            return [4 /*yield*/, this.bgMessageHandler(msgPayload)];\r\n                        case 4:\r\n                            _a.sent();\r\n                            return [2 /*return*/];\r\n                        case 5: return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        SwController.prototype.onSubChange_ = function (_event) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var registration, err_1, err_2, tokenDetailsModel, tokenDetails;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            _a.trys.push([0, 2, , 3]);\r\n                            return [4 /*yield*/, this.getSWRegistration_()];\r\n                        case 1:\r\n                            registration = _a.sent();\r\n                            return [3 /*break*/, 3];\r\n                        case 2:\r\n                            err_1 = _a.sent();\r\n                            throw errorFactory.create(\"unable-to-resubscribe\" /* UNABLE_TO_RESUBSCRIBE */, {\r\n                                errorInfo: err_1\r\n                            });\r\n                        case 3:\r\n                            _a.trys.push([3, 5, , 8]);\r\n                            return [4 /*yield*/, registration.pushManager.getSubscription()];\r\n                        case 4:\r\n                            _a.sent();\r\n                            return [3 /*break*/, 8];\r\n                        case 5:\r\n                            err_2 = _a.sent();\r\n                            tokenDetailsModel = this.getTokenDetailsModel();\r\n                            return [4 /*yield*/, tokenDetailsModel.getTokenDetailsFromSWScope(registration.scope)];\r\n                        case 6:\r\n                            tokenDetails = _a.sent();\r\n                            if (!tokenDetails) {\r\n                                // This should rarely occure, but could if indexedDB\r\n                                // is corrupted or wiped\r\n                                throw err_2;\r\n                            }\r\n                            // Attempt to delete the token if we know it's bad\r\n                            return [4 /*yield*/, this.deleteToken(tokenDetails.fcmToken)];\r\n                        case 7:\r\n                            // Attempt to delete the token if we know it's bad\r\n                            _a.sent();\r\n                            throw err_2;\r\n                        case 8: return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        SwController.prototype.onNotificationClick_ = function (event) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var msgPayload, link, windowClient, internalMsg;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            if (!event.notification ||\r\n                                !event.notification.data ||\r\n                                !event.notification.data[FCM_MSG]) {\r\n                                // Not an FCM notification, do nothing.\r\n                                return [2 /*return*/];\r\n                            }\r\n                            else if (event.action) {\r\n                                // User clicked on an action button.\r\n                                // This will allow devs to act on action button clicks by using a custom\r\n                                // onNotificationClick listener that they define.\r\n                                return [2 /*return*/];\r\n                            }\r\n                            // Prevent other listeners from receiving the event\r\n                            event.stopImmediatePropagation();\r\n                            event.notification.close();\r\n                            msgPayload = event.notification.data[FCM_MSG];\r\n                            if (!msgPayload.notification) {\r\n                                // Nothing to do.\r\n                                return [2 /*return*/];\r\n                            }\r\n                            link = (msgPayload.fcmOptions && msgPayload.fcmOptions.link) ||\r\n                                msgPayload.notification.click_action;\r\n                            if (!link) {\r\n                                if (msgPayload.data && FN_CAMPAIGN_ID in msgPayload.data) {\r\n                                    link = self.location.origin;\r\n                                }\r\n                                else {\r\n                                    // Nothing to do.\r\n                                    return [2 /*return*/];\r\n                                }\r\n                            }\r\n                            return [4 /*yield*/, this.getWindowClient_(link)];\r\n                        case 1:\r\n                            windowClient = _a.sent();\r\n                            if (!!windowClient) return [3 /*break*/, 4];\r\n                            return [4 /*yield*/, self.clients.openWindow(link)];\r\n                        case 2:\r\n                            // Unable to find window client so need to open one.\r\n                            windowClient = _a.sent();\r\n                            // Wait three seconds for the client to initialize and set up the message\r\n                            // handler so that it can receive the message.\r\n                            return [4 /*yield*/, sleep$1(3000)];\r\n                        case 3:\r\n                            // Wait three seconds for the client to initialize and set up the message\r\n                            // handler so that it can receive the message.\r\n                            _a.sent();\r\n                            return [3 /*break*/, 6];\r\n                        case 4: return [4 /*yield*/, windowClient.focus()];\r\n                        case 5:\r\n                            windowClient = _a.sent();\r\n                            _a.label = 6;\r\n                        case 6:\r\n                            if (!windowClient) {\r\n                                // Window Client will not be returned if it's for a third party origin.\r\n                                return [2 /*return*/];\r\n                            }\r\n                            // Delete notification and fcmOptions data from payload before sending to\r\n                            // the page.\r\n                            delete msgPayload.notification;\r\n                            delete msgPayload.fcmOptions;\r\n                            internalMsg = createNewMsg(MessageType.NOTIFICATION_CLICKED, msgPayload);\r\n                            // Attempt to send a message to the client to handle the data\r\n                            // Is affected by: https://github.com/slightlyoff/ServiceWorker/issues/728\r\n                            return [2 /*return*/, this.attemptToMessageClient_(windowClient, internalMsg)];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        SwController.prototype.getNotificationData_ = function (msgPayload) {\r\n            var _a;\r\n            if (!msgPayload) {\r\n                return;\r\n            }\r\n            if (typeof msgPayload.notification !== 'object') {\r\n                return;\r\n            }\r\n            var notificationInformation = __assign({}, msgPayload.notification);\r\n            // Put the message payload under FCM_MSG name so we can identify the\r\n            // notification as being an FCM notification vs a notification from\r\n            // somewhere else (i.e. normal web push or developer generated\r\n            // notification).\r\n            notificationInformation.data = __assign({}, msgPayload.notification.data, (_a = {}, _a[FCM_MSG] = msgPayload, _a));\r\n            return notificationInformation;\r\n        };\r\n        /**\r\n         * Calling setBackgroundMessageHandler will opt in to some specific\r\n         * behaviours.\r\n         * 1.) If a notification doesn't need to be shown due to a window already\r\n         * being visible, then push messages will be sent to the page.\r\n         * 2.) If a notification needs to be shown, and the message contains no\r\n         * notification data this method will be called\r\n         * and the promise it returns will be passed to event.waitUntil.\r\n         * If you do not set this callback then all push messages will let and the\r\n         * developer can handle them in a their own 'push' event callback\r\n         *\r\n         * @param callback The callback to be called when a push message is received\r\n         * and a notification must be shown. The callback will be given the data from\r\n         * the push message.\r\n         */\r\n        SwController.prototype.setBackgroundMessageHandler = function (callback) {\r\n            if (!callback || typeof callback !== 'function') {\r\n                throw errorFactory.create(\"bg-handler-function-expected\" /* BG_HANDLER_FUNCTION_EXPECTED */);\r\n            }\r\n            this.bgMessageHandler = callback;\r\n        };\r\n        /**\r\n         * @param url The URL to look for when focusing a client.\r\n         * @return Returns an existing window client or a newly opened WindowClient.\r\n         */\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        SwController.prototype.getWindowClient_ = function (url) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var parsedURL, clientList, suitableClient, i, parsedClientUrl;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            parsedURL = new URL(url, self.location.href).href;\r\n                            return [4 /*yield*/, getClientList()];\r\n                        case 1:\r\n                            clientList = _a.sent();\r\n                            suitableClient = null;\r\n                            for (i = 0; i < clientList.length; i++) {\r\n                                parsedClientUrl = new URL(clientList[i].url, self.location.href)\r\n                                    .href;\r\n                                if (parsedClientUrl === parsedURL) {\r\n                                    suitableClient = clientList[i];\r\n                                    break;\r\n                                }\r\n                            }\r\n                            return [2 /*return*/, suitableClient];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This message will attempt to send the message to a window client.\r\n         * @param client The WindowClient to send the message to.\r\n         * @param message The message to send to the client.\r\n         * @returns Returns a promise that resolves after sending the message. This\r\n         * does not guarantee that the message was successfully received.\r\n         */\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        SwController.prototype.attemptToMessageClient_ = function (client, message) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    // NOTE: This returns a promise in case this API is abstracted later on to\r\n                    // do additional work\r\n                    if (!client) {\r\n                        throw errorFactory.create(\"no-window-client-to-msg\" /* NO_WINDOW_CLIENT_TO_MSG */);\r\n                    }\r\n                    client.postMessage(message);\r\n                    return [2 /*return*/];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * @returns If there is currently a visible WindowClient, this method will\r\n         * resolve to true, otherwise false.\r\n         */\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        SwController.prototype.hasVisibleClients_ = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var clientList;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, getClientList()];\r\n                        case 1:\r\n                            clientList = _a.sent();\r\n                            return [2 /*return*/, clientList.some(function (client) {\r\n                                    return client.visibilityState === 'visible' &&\r\n                                        // Ignore chrome-extension clients as that matches the background pages\r\n                                        // of extensions, which are always considered visible.\r\n                                        !client.url.startsWith('chrome-extension://');\r\n                                })];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * @param msgPayload The data from the push event that should be sent to all\r\n         * available pages.\r\n         * @returns Returns a promise that resolves once the message has been sent to\r\n         * all WindowClients.\r\n         */\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        SwController.prototype.sendMessageToWindowClients_ = function (msgPayload) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var clientList, internalMsg;\r\n                var _this = this;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, getClientList()];\r\n                        case 1:\r\n                            clientList = _a.sent();\r\n                            internalMsg = createNewMsg(MessageType.PUSH_MSG_RECEIVED, msgPayload);\r\n                            return [4 /*yield*/, Promise.all(clientList.map(function (client) {\r\n                                    return _this.attemptToMessageClient_(client, internalMsg);\r\n                                }))];\r\n                        case 2:\r\n                            _a.sent();\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This will register the default service worker and return the registration.\r\n         * @return he service worker registration to be used for the push service.\r\n         */\r\n        SwController.prototype.getSWRegistration_ = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, self.registration];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This will return the default VAPID key or the uint8array version of the\r\n         * public VAPID key provided by the developer.\r\n         */\r\n        SwController.prototype.getPublicVapidKey_ = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var swReg, vapidKeyFromDatabase;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, this.getSWRegistration_()];\r\n                        case 1:\r\n                            swReg = _a.sent();\r\n                            if (!swReg) {\r\n                                throw errorFactory.create(\"sw-registration-expected\" /* SW_REGISTRATION_EXPECTED */);\r\n                            }\r\n                            return [4 /*yield*/, this.getVapidDetailsModel().getVapidFromSWScope(swReg.scope)];\r\n                        case 2:\r\n                            vapidKeyFromDatabase = _a.sent();\r\n                            if (vapidKeyFromDatabase == null) {\r\n                                return [2 /*return*/, DEFAULT_PUBLIC_VAPID_KEY];\r\n                            }\r\n                            return [2 /*return*/, vapidKeyFromDatabase];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        return SwController;\r\n    }(BaseController));\r\n    function getClientList() {\r\n        return self.clients.matchAll({\r\n            type: 'window',\r\n            includeUncontrolled: true\r\n            // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\r\n        });\r\n    }\r\n    function createNewMsg(msgType, msgData) {\r\n        return {\r\n            firebaseMessagingType: msgType,\r\n            firebaseMessagingData: msgData\r\n        };\r\n    }\r\n    function sleep$1(ms) {\r\n        return new Promise(function (resolve) {\r\n            setTimeout(resolve, ms);\r\n        });\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\r\n    var DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    var WindowController = /** @class */ (function (_super) {\r\n        __extends(WindowController, _super);\r\n        /**\r\n         * A service that provides a MessagingService instance.\r\n         */\r\n        function WindowController(app) {\r\n            var _this = _super.call(this, app) || this;\r\n            _this.registrationToUse = null;\r\n            _this.publicVapidKeyToUse = null;\r\n            _this.messageObserver = null;\r\n            // @ts-ignore: Unused variable error, this is not implemented yet.\r\n            _this.tokenRefreshObserver = null;\r\n            _this.onMessageInternal = createSubscribe(function (observer) {\r\n                _this.messageObserver = observer;\r\n            });\r\n            _this.onTokenRefreshInternal = createSubscribe(function (observer) {\r\n                _this.tokenRefreshObserver = observer;\r\n            });\r\n            _this.setupSWMessageListener_();\r\n            return _this;\r\n        }\r\n        /**\r\n         * Request permission if it is not currently granted\r\n         *\r\n         * @return Resolves if the permission was granted, otherwise rejects\r\n         *\r\n         * @deprecated Use Notification.requestPermission() instead.\r\n         * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\r\n         */\r\n        WindowController.prototype.requestPermission = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var permissionResult;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            if (this.getNotificationPermission_() === 'granted') {\r\n                                return [2 /*return*/];\r\n                            }\r\n                            return [4 /*yield*/, Notification.requestPermission()];\r\n                        case 1:\r\n                            permissionResult = _a.sent();\r\n                            if (permissionResult === 'granted') {\r\n                                return [2 /*return*/];\r\n                            }\r\n                            else if (permissionResult === 'denied') {\r\n                                throw errorFactory.create(\"permission-blocked\" /* PERMISSION_BLOCKED */);\r\n                            }\r\n                            else {\r\n                                throw errorFactory.create(\"permission-default\" /* PERMISSION_DEFAULT */);\r\n                            }\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This method allows a developer to override the default service worker and\r\n         * instead use a custom service worker.\r\n         *\r\n         * @param registration The service worker registration that should be used to\r\n         * receive the push messages.\r\n         */\r\n        WindowController.prototype.useServiceWorker = function (registration) {\r\n            if (!(registration instanceof ServiceWorkerRegistration)) {\r\n                throw errorFactory.create(\"sw-registration-expected\" /* SW_REGISTRATION_EXPECTED */);\r\n            }\r\n            if (this.registrationToUse != null) {\r\n                throw errorFactory.create(\"use-sw-before-get-token\" /* USE_SW_BEFORE_GET_TOKEN */);\r\n            }\r\n            this.registrationToUse = registration;\r\n        };\r\n        /**\r\n         * This method allows a developer to override the default vapid key\r\n         * and instead use a custom VAPID public key.\r\n         *\r\n         * @param publicKey A URL safe base64 encoded string.\r\n         */\r\n        WindowController.prototype.usePublicVapidKey = function (publicKey) {\r\n            if (typeof publicKey !== 'string') {\r\n                throw errorFactory.create(\"invalid-public-vapid-key\" /* INVALID_PUBLIC_VAPID_KEY */);\r\n            }\r\n            if (this.publicVapidKeyToUse != null) {\r\n                throw errorFactory.create(\"use-public-key-before-get-token\" /* USE_PUBLIC_KEY_BEFORE_GET_TOKEN */);\r\n            }\r\n            var parsedKey = base64ToArrayBuffer(publicKey);\r\n            if (parsedKey.length !== 65) {\r\n                throw errorFactory.create(\"public-vapid-key-decryption-failed\" /* PUBLIC_KEY_DECRYPTION_FAILED */);\r\n            }\r\n            this.publicVapidKeyToUse = parsedKey;\r\n        };\r\n        /**\r\n         * @export\r\n         * @param nextOrObserver An observer object or a function triggered on\r\n         * message.\r\n         * @param error A function triggered on message error.\r\n         * @param completed function triggered when the observer is removed.\r\n         * @return The unsubscribe function for the observer.\r\n         */\r\n        WindowController.prototype.onMessage = function (nextOrObserver, error, completed) {\r\n            if (typeof nextOrObserver === 'function') {\r\n                return this.onMessageInternal(nextOrObserver, error, completed);\r\n            }\r\n            else {\r\n                return this.onMessageInternal(nextOrObserver);\r\n            }\r\n        };\r\n        /**\r\n         * @param nextOrObserver An observer object or a function triggered on token\r\n         * refresh.\r\n         * @param error A function triggered on token refresh error.\r\n         * @param completed function triggered when the observer is removed.\r\n         * @return The unsubscribe function for the observer.\r\n         */\r\n        WindowController.prototype.onTokenRefresh = function (nextOrObserver, error, completed) {\r\n            if (typeof nextOrObserver === 'function') {\r\n                return this.onTokenRefreshInternal(nextOrObserver, error, completed);\r\n            }\r\n            else {\r\n                return this.onTokenRefreshInternal(nextOrObserver);\r\n            }\r\n        };\r\n        /**\r\n         * Given a registration, wait for the service worker it relates to\r\n         * become activer\r\n         * @param registration Registration to wait for service worker to become active\r\n         * @return Wait for service worker registration to become active\r\n         */\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        WindowController.prototype.waitForRegistrationToActivate_ = function (registration) {\r\n            var serviceWorker = registration.installing || registration.waiting || registration.active;\r\n            return new Promise(function (resolve, reject) {\r\n                if (!serviceWorker) {\r\n                    // This is a rare scenario but has occured in firefox\r\n                    reject(errorFactory.create(\"no-sw-in-reg\" /* NO_SW_IN_REG */));\r\n                    return;\r\n                }\r\n                // Because the Promise function is called on next tick there is a\r\n                // small chance that the worker became active or redundant already.\r\n                if (serviceWorker.state === 'activated') {\r\n                    resolve(registration);\r\n                    return;\r\n                }\r\n                if (serviceWorker.state === 'redundant') {\r\n                    reject(errorFactory.create(\"sw-reg-redundant\" /* SW_REG_REDUNDANT */));\r\n                    return;\r\n                }\r\n                var stateChangeListener = function () {\r\n                    if (serviceWorker.state === 'activated') {\r\n                        resolve(registration);\r\n                    }\r\n                    else if (serviceWorker.state === 'redundant') {\r\n                        reject(errorFactory.create(\"sw-reg-redundant\" /* SW_REG_REDUNDANT */));\r\n                    }\r\n                    else {\r\n                        // Return early and wait to next state change\r\n                        return;\r\n                    }\r\n                    serviceWorker.removeEventListener('statechange', stateChangeListener);\r\n                };\r\n                serviceWorker.addEventListener('statechange', stateChangeListener);\r\n            });\r\n        };\r\n        /**\r\n         * This will register the default service worker and return the registration\r\n         * @return The service worker registration to be used for the push service.\r\n         */\r\n        WindowController.prototype.getSWRegistration_ = function () {\r\n            var _this = this;\r\n            if (this.registrationToUse) {\r\n                return this.waitForRegistrationToActivate_(this.registrationToUse);\r\n            }\r\n            // Make the registration null so we know useServiceWorker will not\r\n            // use a new service worker as registrationToUse is no longer undefined\r\n            this.registrationToUse = null;\r\n            return navigator.serviceWorker\r\n                .register(DEFAULT_SW_PATH, {\r\n                scope: DEFAULT_SW_SCOPE\r\n            })\r\n                .catch(function (err) {\r\n                throw errorFactory.create(\"failed-serviceworker-registration\" /* FAILED_DEFAULT_REGISTRATION */, {\r\n                    browserErrorMessage: err.message\r\n                });\r\n            })\r\n                .then(function (registration) {\r\n                return _this.waitForRegistrationToActivate_(registration).then(function () {\r\n                    _this.registrationToUse = registration;\r\n                    // We update after activation due to an issue with Firefox v49 where\r\n                    // a race condition occassionally causes the service worker to not\r\n                    // install\r\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                    registration.update();\r\n                    return registration;\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This will return the default VAPID key or the uint8array version of the\r\n         * public VAPID key provided by the developer.\r\n         */\r\n        WindowController.prototype.getPublicVapidKey_ = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    if (this.publicVapidKeyToUse) {\r\n                        return [2 /*return*/, this.publicVapidKeyToUse];\r\n                    }\r\n                    return [2 /*return*/, DEFAULT_PUBLIC_VAPID_KEY];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * This method will set up a message listener to handle\r\n         * events from the service worker that should trigger\r\n         * events in the page.\r\n         */\r\n        // Visible for testing\r\n        // TODO: Make private\r\n        WindowController.prototype.setupSWMessageListener_ = function () {\r\n            var _this = this;\r\n            navigator.serviceWorker.addEventListener('message', function (event) {\r\n                if (!event.data ||\r\n                    !event.data.firebaseMessagingType ||\r\n                    !event.data.firebaseMessagingData) {\r\n                    // Not a message from FCM\r\n                    return;\r\n                }\r\n                var _a = event.data, firebaseMessagingType = _a.firebaseMessagingType, firebaseMessagingData = _a.firebaseMessagingData;\r\n                if (_this.messageObserver) {\r\n                    _this.messageObserver.next(firebaseMessagingData);\r\n                }\r\n                var data = firebaseMessagingData.data;\r\n                if (data &&\r\n                    FN_CAMPAIGN_ID in data &&\r\n                    data[FN_CAMPAIGN_ANALYTICS_ENABLED] === '1') {\r\n                    // This message has a campaign id, meaning it was sent using the FN Console.\r\n                    // Analytics is enabled on this message, so we should log it.\r\n                    var eventType = getEventType(firebaseMessagingType);\r\n                    _this.app.INTERNAL.analytics.logEvent(eventType, \r\n                    /* eslint-disable camelcase */\r\n                    {\r\n                        message_name: data[FN_CAMPAIGN_NAME],\r\n                        message_id: data[FN_CAMPAIGN_ID],\r\n                        message_time: data[FN_CAMPAIGN_TIME],\r\n                        message_device_time: Math.floor(Date.now() / 1000)\r\n                    }\r\n                    /* eslint-enable camelcase */\r\n                    );\r\n                }\r\n            }, false);\r\n        };\r\n        return WindowController;\r\n    }(BaseController));\r\n    function getEventType(messageType) {\r\n        switch (messageType) {\r\n            case MessageType.NOTIFICATION_CLICKED:\r\n                return 'notification_open';\r\n            case MessageType.PUSH_MSG_RECEIVED:\r\n                return 'notification_foreground';\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\n\n    /**\r\n     * @license\r\n     * Copyright 2017 Google Inc.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n    function registerMessaging(instance) {\r\n        var messagingName = 'messaging';\r\n        var factoryMethod = function (app) {\r\n            if (!isSupported()) {\r\n                throw errorFactory.create(\"unsupported-browser\" /* UNSUPPORTED_BROWSER */);\r\n            }\r\n            if (self && 'ServiceWorkerGlobalScope' in self) {\r\n                // Running in ServiceWorker context\r\n                return new SwController(app);\r\n            }\r\n            else {\r\n                // Assume we are in the window context.\r\n                return new WindowController(app);\r\n            }\r\n        };\r\n        var namespaceExports = {\r\n            isSupported: isSupported\r\n        };\r\n        instance.INTERNAL.registerService(messagingName, factoryMethod, namespaceExports);\r\n    }\r\n    registerMessaging(firebase);\r\n    function isSupported() {\r\n        if (self && 'ServiceWorkerGlobalScope' in self) {\r\n            // Running in ServiceWorker context\r\n            return isSWControllerSupported();\r\n        }\r\n        else {\r\n            // Assume we are in the window context.\r\n            return isWindowControllerSupported();\r\n        }\r\n    }\r\n    /**\r\n     * Checks to see if the required APIs exist.\r\n     */\r\n    function isWindowControllerSupported() {\r\n        return (navigator.cookieEnabled &&\r\n            'serviceWorker' in navigator &&\r\n            'PushManager' in window &&\r\n            'Notification' in window &&\r\n            'fetch' in window &&\r\n            ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\r\n            PushSubscription.prototype.hasOwnProperty('getKey'));\r\n    }\r\n    /**\r\n     * Checks to see if the required APIs exist within SW Context.\r\n     */\r\n    function isSWControllerSupported() {\r\n        return ('PushManager' in self &&\r\n            'Notification' in self &&\r\n            ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\r\n            PushSubscription.prototype.hasOwnProperty('getKey'));\r\n    }\n\n    const messagingSenderId = '444790084672';\n\n    /* eslint-env browser */\n\n    // Initialize the Firebase app in the service worker\n    // by passing in the messagingSenderId.\n    firebase.initializeApp({ messagingSenderId });\n\n    const setupMessaging = async ({ onPush, onMessage }) => {\n      // Add listeners before firebase.messaging()\n      // in order to intercept PushEvents\n      self.addEventListener('push', (event) => {\n        event.stopImmediatePropagation();\n        event.waitUntil(onPush(event));\n      });\n\n      self.addEventListener('message', (event) => {\n        event.stopImmediatePropagation();\n        event.waitUntil(onMessage(event));\n      });\n\n      // Retrieve an instance of Firebase Messaging\n      // so that it can handle background messages.\n      const messaging = firebase.messaging();\n\n      // Should not fire because we are intercepting the push event.\n      // Not a good fit for Chrome Extensions because the Chrome API\n      // does not provide access to much in the service worker.\n      messaging.setBackgroundMessageHandler(() => {\n        console.error('backgroundMessageHandler should not fire');\n      });\n\n      return messaging\n    };\n\n    /* eslint-env browser */\n\n    // TODO: handle user account deletion?\n\n    // Just return a promise or use an async function\n    // - No need to use event.waitUntil, this is handled in ./config-worker\n    const onPush = async (event) => {\n      const { message } = event.data.json().data;\n\n      const client = await chrome.runtime.getBackgroundClient();\n\n      switch (message) {\n        case 'client-load': {\n          const notifications = await self.registration.getNotifications();\n\n          notifications.forEach((n) => n.close());\n\n          const title = 'Reload done and waiting...';\n\n          await self.registration.showNotification(title);\n\n          return client.postMessage({ message })\n        }\n\n        case 'client-reload': {\n          const title = 'Will reload now...';\n\n          await self.registration.showNotification(title);\n\n          return client.postMessage({ message })\n        }\n\n        default: {\n          console.error('Unexpected push message type');\n        }\n      }\n    };\n\n    // We're not using this right now.\n    const onMessage = async (event) => {\n      console.log(event);\n    };\n\n    setupMessaging({ onPush, onMessage });\n\n}());\n";

const loadMessage = `
DEVELOPMENT build with non-persistent auto-reloader.
Loaded on ${new Date().toTimeString()}.
`.trim();

const name = 'Non-persistent reloader';

const reloader = () => {
  const _state = {
    // Anonymous UID from Firebase
    // uid: string,
    // Interval ID for updateUid
    // interval: number,
    // Path to service worker
    // swPath: string,
  };

  return {
    name,

    async startReloader(options, bundle, cb) {
      const uid = await login(cb);

      _state.uid = uid;

      await update();

      _state.interval = setInterval(update, 5 * 60 * 1000);
    },

    createClientFiles(options, bundle, state = _state) {
      const emit = (name, code) => {
        const id = this.emitAsset(name, code);

        return this.getAssetFileName(id)
      };

      if (state.uid) {
        state.swPath = emit('reloader-sw.js', serviceWorkerCode);

        const bgClientPath = emit(
          'bg-reloader-client.js',
          bgClientCode
            .replace('%UID%', state.uid)
            .replace('%SW_PATH%', state.swPath),
        );

        state.bgScriptPath = emit(
          'bg-reloader-wrapper.js',
          `import('/${bgClientPath}')`,
        );

        state.ctScriptPath = emit(
          'ct-reloader-client.js',
          ctClientCode.replace('%LOAD_MESSAGE%', loadMessage),
        );
      } else {
        throw new TypeError('state.uid is undefined')
      }
    },

    updateManifest(options, bundle, state = _state) {
      const manifestKey = 'manifest.json';
      const manifestSource = bundle[manifestKey].source;

      if (!manifestSource) {
        throw new ReferenceError(
          `bundle.${manifestKey} is undefined`,
        )
      }

      const manifest = JSON.parse(manifestSource);

      manifest.description = loadMessage;

      if (!manifest.background) {
        manifest.background = {};
      }

      if (manifest.background.persistent === undefined) {
        manifest.background.persistent = false;
      }

      const { scripts: bgScripts = [] } = manifest.background;

      if (state.bgScriptPath) {
        manifest.background.scripts = [
          state.bgScriptPath,
          ...bgScripts,
        ];
      } else {
        this.warn(
          'Background page reloader script was not emitted',
        );
      }

      const {
        content_scripts: ctScripts = [],
        permissions = [],
      } = manifest;

      if (state.ctScriptPath) {
        manifest.content_scripts = ctScripts.map(
          ({ js = [], ...rest }) => ({
            js: [state.ctScriptPath, ...js],
            ...rest,
          }),
        );
      } else {
        this.warn('Content page reloader script was not emitted');
      }

      if (manifest.permissions) {
        const perms = new Set(permissions);
        perms.add('notifications');
        perms.add(
          'https://us-central1-rpce-reloader.cloudfunctions.net/registerToken',
        );

        manifest.permissions = Array.from(perms);
      }

      bundle[manifestKey].source = JSON.stringify(
        manifest,
        undefined,
        2,
      );
    },

    reloadClients() {
      return reload()
    },
  }
};

exports.reloader = reloader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
